WEBVTT

00:00.000 --> 00:05.400
 The following is a conversation with Travis Oliphant, one of the most impactful programmers

00:05.400 --> 00:08.000
 and data scientists ever.

00:08.000 --> 00:12.880
 He created NumPy, SciPy, and Anaconda.

00:12.880 --> 00:18.080
 NumPy formed the foundation of tensor based machine learning in Python, SciPy formed

00:18.080 --> 00:24.040
 the foundation of scientific programming in Python, and Anaconda, specifically with Konda,

00:24.040 --> 00:27.640
 made Python more accessible to a much larger audience.

00:27.640 --> 00:33.560
 Travis's life work across a large number of programming and entrepreneurial efforts

00:33.560 --> 00:39.080
 has and will continue to have immeasurable impact on millions of lives by empowering

00:39.080 --> 00:45.360
 scientists and engineers in big companies, small companies, and open source communities

00:45.360 --> 00:50.480
 to take on difficult problems and solve them with the power of programming.

00:50.480 --> 00:55.960
 Plus, he's a truly kind human being, which is something that when combined with vision

00:55.960 --> 01:00.720
 and ambition makes for a great leader and a great person to chat with.

01:00.720 --> 01:05.080
 To support this podcast, please check out our sponsors in the description.

01:05.080 --> 01:11.720
 This is the Lex Friedman podcast, and here is my conversation with Travis Oliphant.

01:11.720 --> 01:14.600
 What was the first computer program you've ever written?

01:14.600 --> 01:15.600
 Do you remember?

01:15.600 --> 01:16.600
 Whoa, that's a good question.

01:16.600 --> 01:21.240
 I think it was in fourth grade, just a simple loop in basic.

01:21.240 --> 01:22.240
 Basic.

01:22.240 --> 01:26.880
 It was written on Atari 400, I think, or maybe it was Atari 800.

01:26.880 --> 01:32.160
 It was part of a class, and we just were just basic loops to print things out.

01:32.160 --> 01:34.440
 Did you use go to statements?

01:34.440 --> 01:35.440
 Yes.

01:35.440 --> 01:37.400
 Yes, we used go to statements.

01:37.400 --> 01:43.200
 I remember in the early days, that's when I first realized there's principles to programming

01:43.200 --> 01:48.360
 when I was told that don't use go to statements, those are bad software engineering.

01:48.360 --> 01:51.800
 It goes against what great, beautiful code is.

01:51.800 --> 01:54.760
 I was like, oh, okay, there's rules to this game.

01:54.760 --> 01:58.240
 I didn't see that until high school when I took an AP computer science course.

01:58.240 --> 02:03.480
 I did a lot of other kinds of just programming and TI, but finally, when I took an AP computer

02:03.480 --> 02:07.560
 science course in Pascal, that was Pascal.

02:07.560 --> 02:09.920
 That's when I, oh, there are these principles.

02:09.920 --> 02:10.920
 Not C or C++?

02:10.920 --> 02:17.040
 No, I didn't take C until the next year in college, I had a course in C, but I haven't

02:17.040 --> 02:21.400
 done much in Pascal, just that AP computer science course.

02:21.400 --> 02:26.880
 Now, sorry for the romanticized question, but when did you first fall in love with programming?

02:26.880 --> 02:27.880
 Oh, man, good question.

02:27.880 --> 02:35.120
 I think actually when I was 10, my dad got us a TI Timex in Claire, and he was excited

02:35.120 --> 02:40.280
 about the spreadsheet capability, but I made him get the basic, the add ons so we could

02:40.280 --> 02:44.960
 actually program in basic, and just being able to write instructions and have the computer

02:44.960 --> 02:45.960
 do something.

02:45.960 --> 02:52.360
 Then we got a TI 994A when I was about 12, and I would just, it had sprites and graphics

02:52.360 --> 02:55.480
 and music you could actually program to do music.

02:55.480 --> 02:58.720
 That's when I really sort of fell in love with programming.

02:58.720 --> 03:04.560
 So this is a full, like a real computer with like, with memory and storage and processors

03:04.560 --> 03:06.080
 so we're not going to say TI.

03:06.080 --> 03:10.240
 Yeah, the Timex in Claire was one of the very first, it was a cheap, cheap, like, I think

03:10.240 --> 03:14.480
 it was, well, it was still expensive, but it was 2K of memory.

03:14.480 --> 03:19.040
 We got the 16K add on pack, but yeah, it had memory and you could program it.

03:19.040 --> 03:22.520
 You had the, in order to store your programs, you had to attach a tape drive.

03:22.520 --> 03:28.840
 Remember that old, the sound that would play when you converted the modems would convert

03:28.840 --> 03:32.040
 digital bits to audio files, tape drive.

03:32.040 --> 03:34.920
 Still remember that sound, but that was the storage.

03:34.920 --> 03:36.480
 And what was the programming language, do you remember?

03:36.480 --> 03:37.480
 It was basic.

03:37.480 --> 03:38.480
 It was basic.

03:38.480 --> 03:39.480
 And then they had a VisiCalc.

03:39.480 --> 03:42.800
 And so a little bit of spreadsheet program in VisiCalc, but mostly just some basic.

03:42.800 --> 03:46.440
 Do you remember what kind of things drew you to programming?

03:46.440 --> 03:48.840
 Was it working with data?

03:48.840 --> 03:50.880
 Was it video games and video games?

03:50.880 --> 03:51.880
 Math.

03:51.880 --> 03:52.880
 Math.

03:52.880 --> 03:53.880
 Mathy stuff.

03:53.880 --> 03:58.280
 Yeah, I've always loved math and a lot of people think they don't like math because

03:58.280 --> 04:01.320
 I think when they're exposed to it early, they, it's about memory.

04:01.320 --> 04:04.560
 You know, when you're exposed to math early, you have a good short term memory, you remember

04:04.560 --> 04:06.080
 timetables.

04:06.080 --> 04:11.280
 And I do have a reasonably, I mean, not perfect, but a reasonably long little short term memory

04:11.280 --> 04:12.640
 buffer.

04:12.640 --> 04:16.560
 And so I did great at timetables and said, oh, I get a math, but I started to really

04:16.560 --> 04:20.400
 like math, just the problem solving aspect.

04:20.400 --> 04:25.120
 And so computing was problem solving applied.

04:25.120 --> 04:30.640
 And so that's always kind of been the, the draw kind of coupled with the mathematics.

04:30.640 --> 04:35.840
 Did you ever see the computer as like an extension of your mind, like something able

04:35.840 --> 04:36.840
 to achieve?

04:36.840 --> 04:37.840
 Not till later.

04:37.840 --> 04:38.840
 Okay.

04:38.840 --> 04:39.840
 Yeah.

04:39.840 --> 04:40.840
 Not then.

04:40.840 --> 04:44.000
 You could play with it and you can, you could play with math puzzles and yeah, it was, it

04:44.000 --> 04:48.680
 was too rudimentary early on, like it was sort of, yeah, it was too, it was a lot of

04:48.680 --> 04:53.200
 work to actually take a thought you'd have and actually get it implemented.

04:53.200 --> 04:56.240
 And that's still work, but it's getting easier.

04:56.240 --> 04:59.840
 And so yeah, I would say that's definitely what's attracting me to Python is that that

04:59.840 --> 05:02.080
 was more real, right?

05:02.080 --> 05:07.680
 I could think in Python, speaking a foreign language, I only speak another language fluently

05:07.680 --> 05:11.800
 besides English, which is Spanish, and I remember the day when I would dream in Spanish and

05:11.800 --> 05:13.440
 you start to think in that language.

05:13.440 --> 05:19.680
 And then you actually, I do definitely believe that language limits or expands your thinking.

05:19.680 --> 05:23.600
 There's some languages that actually lead you to certain thought processes.

05:23.600 --> 05:24.600
 Yeah.

05:24.600 --> 05:31.960
 Like, so I speak Russian fluently and that's certainly a language that leads you down certain

05:31.960 --> 05:32.960
 thought processes.

05:32.960 --> 05:33.960
 Is that right?

05:33.960 --> 05:42.600
 There's a, there's a history of the two world wars of the millions of people starving to

05:42.600 --> 05:48.560
 death or near to death throughout his history of suffering, of injustice, like this promise

05:48.560 --> 05:54.560
 sold to the people and then the carpet or whatever swept from under them and it's like

05:54.560 --> 06:01.400
 broken promises and all of that pain and melancholy is in the language, the sad songs, the sad

06:01.400 --> 06:08.200
 hopeful songs, the over romanticized, like, I love you, I hate you, the sort of the swings

06:08.200 --> 06:11.560
 between all the various spectrums of emotion.

06:11.560 --> 06:17.880
 So that's all within the language, the way it's twisted, poetry, there's a strong culture

06:17.880 --> 06:24.200
 of rhyming poetry, so like the bards, like the, there's a musicality to the language

06:24.200 --> 06:25.200
 too.

06:25.200 --> 06:27.000
 Did Dostoevsky write in Russian?

06:27.000 --> 06:28.000
 Yeah.

06:28.000 --> 06:33.840
 Like Dostoevsky, Tostoevsky, all the, all the, all the, the ones that I know about which

06:33.840 --> 06:36.440
 are translated and I'm curious how the translations.

06:36.440 --> 06:43.200
 So Dostoevsky did not use the musicality of the language too much, so they actually

06:43.200 --> 06:48.560
 translate pretty well because it's so philosophically dense that the story does a lot of the work,

06:48.560 --> 06:51.440
 but there's a bunch of things that are untranslatable.

06:51.440 --> 06:53.600
 Certainly the poetry is not translatable.

06:53.600 --> 06:59.920
 I actually have a few conversations coming up offline and also in this podcast with people

06:59.920 --> 07:06.320
 who have translated Dostoevsky and that's for people who worked, who work in this field

07:06.320 --> 07:07.760
 know how difficult that is.

07:07.760 --> 07:12.840
 Sometimes you can spend, you know, months thinking about a single sentence, right?

07:12.840 --> 07:17.840
 In context, like, because there's just a magic captured by that sentence and how do you translate

07:17.840 --> 07:22.720
 just in the right way because those words can be, can be really powerful.

07:22.720 --> 07:27.200
 There's a famous line, beauty will save the world from Dostoevsky.

07:27.200 --> 07:31.680
 You know, there's so many ways to translate that and you're right, the language gives

07:31.680 --> 07:37.160
 you the tools with which to tell the story, but it also leads your mind down certain trajectories

07:37.160 --> 07:42.200
 and paths to where over time, as you think in that language, you become a different human

07:42.200 --> 07:43.200
 being.

07:43.200 --> 07:44.200
 Yes.

07:44.200 --> 07:45.200
 Yeah.

07:45.200 --> 07:46.200
 Yeah, that's a fascinating reality, I think.

07:46.200 --> 07:49.200
 I know people have explored that, but it's, I guess, rediscovered.

07:49.200 --> 07:55.360
 Well, we don't, we live in our own like little pockets, like this is the sad thing is I feel

07:55.360 --> 08:02.760
 like, unfortunately, given time and given getting older, I'll never know the China, the Chinese

08:02.760 --> 08:08.160
 world because I don't truly know the language, same with Japanese, I don't truly know Japanese

08:08.160 --> 08:13.160
 and Portuguese and Brazil, that whole South American continent, like, yeah, I'll go to

08:13.160 --> 08:18.840
 Brazil and Argentina, but will I truly understand the people, if I don't understand the language?

08:18.840 --> 08:27.440
 It's sad because I wonder how much, how many geniuses we're missing because so much of

08:27.440 --> 08:32.360
 the scientific world, so much of the technical world is in English and so much of it might

08:32.360 --> 08:36.040
 be lost because they're, they just, we don't have the common language.

08:36.040 --> 08:37.040
 I completely agree.

08:37.040 --> 08:42.080
 I'm very much in that vein of, there's a lot of genius out there that we miss and it's

08:42.080 --> 08:46.800
 sort of, we're sort of fortunate when it, when it bubbles up into something that we

08:46.800 --> 08:52.160
 can understand or process, there's a lot we miss, so I tend to lean towards really loving

08:52.160 --> 08:58.880
 democratization or things that empower people or, you know, very resistant to sort of authoritarian

08:58.880 --> 08:59.880
 structures.

08:59.880 --> 09:04.920
 Fundamentally, for that reason, it, well, several reasons, but it just hurts us, we're

09:04.920 --> 09:05.920
 worse off.

09:05.920 --> 09:12.000
 So speaking of languages that empower you, so Python was the first language for me that

09:12.000 --> 09:16.560
 I could, I really enjoyed thinking in, as you said.

09:16.560 --> 09:18.560
 Sounds like you shared my experience too.

09:18.560 --> 09:22.040
 So when did you first, do you remember when you first kind of connected with Python, maybe

09:22.040 --> 09:23.760
 even fell in love with Python?

09:23.760 --> 09:24.760
 It's a good question.

09:24.760 --> 09:26.440
 It was a process that took about a year.

09:26.440 --> 09:29.440
 I first encountered Python in 1997.

09:29.440 --> 09:34.600
 I was a graduate student studying biomedical engineering at the Mayo Clinic and I had previously,

09:34.600 --> 09:39.280
 I'd been involved in taking information from satellites.

09:39.280 --> 09:43.560
 I was an electrical engineering student used to taking information and trying to get something

09:43.560 --> 09:45.920
 out of it, doing some data processing information out of it.

09:45.920 --> 09:51.400
 And I'd done that in MATLAB, I'd done that in Perl, I'd done that in, you know, scripting

09:51.400 --> 09:56.280
 on a VMS, there's actually a VAX VMS system and they had their own little scripting tools

09:56.280 --> 09:58.920
 around Fortran, done a lot of that.

09:58.920 --> 10:05.000
 And then as a graduate student, I was looking for something and encounter Python and because

10:05.000 --> 10:09.760
 Python had an array, had two things that made me not filter it away because I was filtering

10:09.760 --> 10:10.760
 a bunch of stuff.

10:10.760 --> 10:14.400
 I was Yorick, I looked at Yorick, I looked at a few other languages throughout there

10:14.400 --> 10:19.800
 at the time in 1997, but it had arrays, there's a library called Numeric that had just been

10:19.800 --> 10:23.800
 written in 95, like not very, not too much earlier.

10:23.800 --> 10:29.280
 By an MIT alum, Jim Hugenin, you know, and I went back and read the mailing list to see

10:29.280 --> 10:32.040
 the history of how it grew and there was a very interesting, it's fascinating to do that

10:32.040 --> 10:38.480
 actually to see how this emergent cooperation, unstructured cooperation happens in the open

10:38.480 --> 10:44.280
 source world that led to a lot of this collective programming, which is something maybe we might

10:44.280 --> 10:46.320
 get into a little later, but what that looks like.

10:46.320 --> 10:47.800
 What gap did Numeric fill?

10:47.800 --> 10:50.360
 Numeric filled the gap of having an array object.

10:50.360 --> 10:52.320
 There was no array object.

10:52.320 --> 10:58.240
 There was a one dimensional byte concept, but there was no n dimensional, two, three, four

10:58.240 --> 11:00.600
 dimensional tensor they call it now.

11:00.600 --> 11:04.600
 I'm still in the category that a tensor is another thing and it's just an nv array, we

11:04.600 --> 11:08.360
 should call it, but kind of lost that battle.

11:08.360 --> 11:12.080
 There's many battles in this world, some which will win, some we lose.

11:12.080 --> 11:13.640
 That's exactly right.

11:13.640 --> 11:17.200
 So and, but it was, it had no math to it.

11:17.200 --> 11:20.840
 So Numeric had math and a basic way to think in arrays.

11:20.840 --> 11:26.600
 So I was looking for that and it had complex numbers, a lot of programming languages.

11:26.600 --> 11:30.760
 And you can see it because, you know, if you're just a computer scientist, you think, ah,

11:30.760 --> 11:32.120
 complex numbers just too, too float.

11:32.120 --> 11:37.680
 So you can, people can build that on, but in practice, a complex number as a, as one

11:37.680 --> 11:42.320
 of the significant algebras that helps connect a lot of physical and mathematical ideas,

11:42.320 --> 11:45.760
 particularly to FFT for an actual engineer.

11:45.760 --> 11:51.160
 And it's a really important concept and not having it means you have to develop it several

11:51.160 --> 11:54.400
 times and those times may not share an approach.

11:54.400 --> 11:59.160
 One of the common things in programming, one of the things programming enables is abstractions.

11:59.160 --> 12:01.040
 But when you have shared abstractions, it's even better.

12:01.040 --> 12:05.600
 It sort of gets to the level of language of actually we all think of this the same way,

12:05.600 --> 12:08.200
 which is both powerful and dangerous, right?

12:08.200 --> 12:13.560
 It's powerful and that we now can quickly make bigger and higher level things on top

12:13.560 --> 12:17.680
 of those abstractions dangerous because it also limits us as to the things we left, maybe

12:17.680 --> 12:21.800
 left behind in producing an abstraction, which is at the heart of programming today

12:21.800 --> 12:24.200
 and actually building around the programming world.

12:24.200 --> 12:26.360
 So I think it's a fascinating philosophical topic.

12:26.360 --> 12:30.400
 Yeah, they will continue for many years, I think, as we build more and more and more

12:30.400 --> 12:31.400
 abstractions.

12:31.400 --> 12:32.400
 Yes.

12:32.400 --> 12:34.920
 I often think about, you know, we have, we have a world that's built on these abstractions

12:34.920 --> 12:36.920
 that were they the only ones possible?

12:36.920 --> 12:37.920
 Yeah.

12:37.920 --> 12:41.800
 There's a lot, but they led to, you know, it's very hard to do it differently.

12:41.800 --> 12:42.800
 Yeah.

12:42.800 --> 12:47.360
 Like there's an inertia that's very hard to, you know, push out, push away from.

12:47.360 --> 12:50.840
 There's, that has implications for things like, you know, the Julia language, which

12:50.840 --> 12:52.880
 you have heard of, I'm sure.

12:52.880 --> 12:55.760
 And I've met the creators and I like Julia.

12:55.760 --> 12:59.560
 It's a really cool language, but they've struggled to kind of against the, just the

12:59.560 --> 13:04.960
 tide of like this inertia of people using Python and, and, you know, there's strategies

13:04.960 --> 13:05.960
 to approach that.

13:05.960 --> 13:09.600
 But nonetheless, it's a, it's a phenomenon and sometimes, so I love complex numbers and

13:09.600 --> 13:10.600
 I love to raise.

13:10.600 --> 13:13.480
 So I, I looked at Python and then I had the experience.

13:13.480 --> 13:16.440
 I did some stuff in Python and I was just doing my PhD.

13:16.440 --> 13:22.240
 So I was out, my focus was on, I was actually doing a combination of MRI and ultrasound and

13:22.240 --> 13:27.360
 looking at a phenomenon called elastography, which is you push waves into the body and

13:27.360 --> 13:30.400
 observe those waves, like you can actually measure them.

13:30.400 --> 13:35.320
 And then you do mathematical inversion to see what the elasticity is.

13:35.320 --> 13:39.760
 And so that's the problem I was solving is how to do that with both ultrasound and MRI.

13:39.760 --> 13:41.440
 I needed some tool to do that with.

13:41.440 --> 13:47.320
 So I was starting to use Python in 97, in 98, I went back, looked at what I'd written

13:47.320 --> 13:51.600
 and realized I could still understand it, which is not the experience I'd had when doing

13:51.600 --> 13:53.640
 Pearl in 95, right?

13:53.640 --> 13:55.040
 I'd done the same thing.

13:55.040 --> 13:57.840
 And then I looked back and I, I'd forgotten what I was even saying.

13:57.840 --> 13:59.520
 Now, you know, I'm not saying it.

13:59.520 --> 14:01.800
 So I, that, that may, hey, this may work.

14:01.800 --> 14:02.800
 I like this.

14:02.800 --> 14:07.720
 This may be something I can retain without becoming an expert per se.

14:07.720 --> 14:10.640
 And so that led me to go, I'm going to push more into this.

14:10.640 --> 14:18.440
 And then that 98 was kind of the, when I started to fall in love with Python, I would say.

14:18.440 --> 14:21.000
 A few peculiar things about Python.

14:21.000 --> 14:24.720
 So maybe compared to Pearl, compared to some of the other languages.

14:24.720 --> 14:26.400
 So there's no braces.

14:26.400 --> 14:27.400
 Yeah.

14:27.400 --> 14:28.400
 Yeah.

14:28.400 --> 14:34.120
 So space is used, indentation, I should say, is used as part of the language.

14:34.120 --> 14:35.120
 Yeah.

14:35.120 --> 14:36.120
 Right.

14:36.120 --> 14:39.280
 So did you, I mean, that's quite a leap.

14:39.280 --> 14:41.240
 Were you comfortable with that leap?

14:41.240 --> 14:42.760
 Or were you just very open minded?

14:42.760 --> 14:43.760
 It's a good question.

14:43.760 --> 14:44.960
 I was open minded.

14:44.960 --> 14:48.160
 So it, I was cognizant of the concern.

14:48.160 --> 14:54.080
 And it definitely has, it has specific challenges, you know, cut and pasting, for example, your

14:54.080 --> 14:55.600
 cut and pasting code.

14:55.600 --> 14:59.200
 And if your editors aren't supportive of that, if you're putting it into a terminal, and

14:59.200 --> 15:02.760
 particularly in the past when terminals didn't necessarily have the intelligence to manage

15:02.760 --> 15:03.760
 it now.

15:03.760 --> 15:06.000
 Now, now I Python and Jupyter notebooks handle it just fine.

15:06.000 --> 15:07.000
 So there's really no problem.

15:07.000 --> 15:10.320
 But in the past, it creates some challenges, formatting challenges.

15:10.320 --> 15:15.480
 Also mixed tabs and spaces, if your, if editors weren't, you weren't clear on what was happening,

15:15.480 --> 15:16.480
 you would have these issues.

15:16.480 --> 15:20.400
 So there were really concrete reasons about it that I heard and understood.

15:20.400 --> 15:24.080
 I never really encountered a problem with it personally.

15:24.080 --> 15:29.240
 Like it was occasional annoyances, but I really liked the fact that it didn't have all this

15:29.240 --> 15:31.200
 extra characters, right?

15:31.200 --> 15:35.400
 That these extra characters didn't show up in my visual field when I was just trying

15:35.400 --> 15:37.800
 to process understanding a snippet of code.

15:37.800 --> 15:39.400
 Yeah, there's a cleanness to it.

15:39.400 --> 15:43.680
 But I mean, the idea is supposed to be that Pearl also has a cleanness to it because of

15:43.680 --> 15:48.080
 the minimalism of like how many characters it takes to express a certain thing.

15:48.080 --> 15:49.080
 So it's very compact.

15:49.080 --> 15:50.080
 Yeah.

15:50.080 --> 15:57.320
 So you realize with that compactness comes, there's a culture that prizes compactness.

15:57.320 --> 16:01.080
 And so the code gets more and more compact and less and less readable to a point where

16:01.080 --> 16:07.280
 it's like, like to be a good programmer in Pearl, you write code that's basically unreadable.

16:07.280 --> 16:08.280
 Right.

16:08.280 --> 16:09.280
 There's a culture like.

16:09.280 --> 16:10.280
 Correct.

16:10.280 --> 16:11.280
 And you're proud of it.

16:11.280 --> 16:12.280
 Yeah.

16:12.280 --> 16:13.280
 You're proud of it.

16:13.280 --> 16:14.280
 Right.

16:14.280 --> 16:15.280
 Exactly.

16:15.280 --> 16:16.280
 And it's like feels good.

16:16.280 --> 16:17.280
 And it's really selective.

16:17.280 --> 16:18.280
 Yeah.

16:18.280 --> 16:20.480
 And it's hard in Pearl to understand it.

16:20.480 --> 16:23.920
 Whereas Python was allowed you not to have to be an expert, you don't have to take all

16:23.920 --> 16:24.920
 this brain energy.

16:24.920 --> 16:28.800
 You could leverage what I say, you could leverage your English language center, which you're

16:28.800 --> 16:29.800
 using all the time.

16:29.800 --> 16:34.960
 I've wondered about other languages, particularly non Latin based languages, you know, Latin

16:34.960 --> 16:37.080
 based languages with the characters are at least similar.

16:37.080 --> 16:41.520
 I think people have an easier time, but I don't know what it's like to be a Japanese or a

16:41.520 --> 16:46.920
 Chinese person trying to learn a different, different syntax.

16:46.920 --> 16:50.440
 Like what would computer programming look like in a, in that, I haven't looked at that

16:50.440 --> 16:54.240
 at all, but it certainly doesn't, you know, leveraging your, your Chinese language center.

16:54.240 --> 16:58.120
 I'm not sure Python or any program names does that, but that was a big deal.

16:58.120 --> 17:00.360
 The fact that it was accessible, I could be a scientist.

17:00.360 --> 17:04.280
 What I really liked is many programming languages really demand a lot of you and you can get

17:04.280 --> 17:09.040
 a lot, you know, you do a lot if you learn it, but Python enables you to do a lot without

17:09.040 --> 17:11.440
 demanding a lot of you.

17:11.440 --> 17:15.400
 There's a, there's nuance to that statement, but it certainly was, it's more accessible.

17:15.400 --> 17:20.040
 So more people could actually, as a, as a scientist, as somebody or engineer who was

17:20.040 --> 17:24.880
 trying to solve another problem besides point programming, I could still use this language

17:24.880 --> 17:27.200
 and get things done and, and be happy about it.

17:27.200 --> 17:30.160
 And I was also comfortable in C at that time.

17:30.160 --> 17:31.160
 And MATLAB you did a little bit of that.

17:31.160 --> 17:33.240
 And MATLAB I did a lot before that, exactly.

17:33.240 --> 17:38.680
 So I was comfortable in those three languages were really the tools I used during my studies

17:38.680 --> 17:39.680
 and schooling.

17:39.680 --> 17:44.080
 Um, but to your point about language helping you think, one of the big things about MATLAB

17:44.080 --> 17:49.400
 is it was, and APL before it, I don't know if you're a, you remember APL, APL is actually

17:49.400 --> 17:54.240
 the predecessor of array based programming, which I think is really an underappreciated,

17:54.240 --> 17:57.720
 if I talked to people who are just steeped in computer programming and computer science,

17:57.720 --> 18:01.560
 like most of the people that Microsoft has hired in the past, for example, you know, Microsoft

18:01.560 --> 18:05.960
 is a company generally did not understand array based programming like culturally they

18:05.960 --> 18:06.960
 understand it.

18:06.960 --> 18:11.680
 So they kept missing the boat, kept missing the understanding of what this, what this was.

18:11.680 --> 18:15.760
 We've gotten better, but there's still a whole culture of folks that doesn't programming.

18:15.760 --> 18:19.920
 That's the, you know, that's, that's systems programming or web programming or lists and

18:19.920 --> 18:22.400
 maps and you know, what about an end dimensional array?

18:22.400 --> 18:23.400
 Oh yeah.

18:23.400 --> 18:24.880
 That's just an implementation detail.

18:24.880 --> 18:29.040
 Well, you can think that, but then actually if you have that as a construct, you actually

18:29.040 --> 18:30.040
 think differently.

18:30.040 --> 18:33.520
 APL was the first language to understand that and it was in the sixties, right?

18:33.520 --> 18:38.880
 The challenge of APL is APL had very dense, not only glyphs, like new characters, new

18:38.880 --> 18:43.000
 glyphs, they even had a new keyboard because to produce those glyphs, this is back in the

18:43.000 --> 18:47.920
 early days of computing when, you know, the qwerty keyboard maybe wasn't as established

18:47.920 --> 18:52.200
 like, well, we can have a new keyboard, no big deal, but it was a big deal and it didn't

18:52.200 --> 18:57.520
 catch on and the language APL very much like Pearl is people would pride themselves on

18:57.520 --> 19:04.040
 how much could they write the game of life in 30 characters of APL, APL has characters

19:04.040 --> 19:08.800
 that mean summation and they have adverbs, you know, they would have adjectives and

19:08.800 --> 19:13.280
 these things called adverbs, which are like methods, like reduction, it would be an adverb

19:13.280 --> 19:16.440
 on an ad operator, right?

19:16.440 --> 19:20.960
 But using these tools, you could construct and then you start to think at that level,

19:20.960 --> 19:24.080
 you think in end dimensions is something I like to say and you start to think differently

19:24.080 --> 19:27.360
 about data at that point, you know, now you're, it really helps.

19:27.360 --> 19:33.680
 Yeah, I mean, outside of programming, if you really internalize linear algebra as a course,

19:33.680 --> 19:37.320
 I mean, it's philosophically allows you to think of the world differently.

19:37.320 --> 19:38.320
 It's almost like liberating.

19:38.320 --> 19:43.680
 You don't have to, you don't have to think about the individual numbers in the end dimensional

19:43.680 --> 19:44.680
 array.

19:44.680 --> 19:49.040
 You could think of it as an object in itself and all of a sudden this world can open up.

19:49.040 --> 19:54.080
 You're saying MATLAB and APL were like the early, I don't know if many languages got

19:54.080 --> 19:55.080
 that right ever.

19:55.080 --> 20:01.760
 No, no, no, they didn't still, even still, I would say, I mean, NumPy is a, as an inheritor

20:01.760 --> 20:07.720
 of the traditions that I would say APLJ was another version that was what it did is not

20:07.720 --> 20:11.840
 have the glyphs just have short characters, but still a Latin keyboard could type them.

20:11.840 --> 20:17.840
 And then numeric inherited from that in terms of, let's add arrays plus broadcasting plus

20:17.840 --> 20:22.560
 methods, reduction, even some of the language like rank is a concept that's in, that was

20:22.560 --> 20:27.640
 in Python is still in Python for the number of dimensions, right?

20:27.640 --> 20:31.240
 That's different than say the rank of a matrix, which people think of as well.

20:31.240 --> 20:38.200
 So it's, it came from that tradition, but NumPy is a very pragmatic, practical tool.

20:38.200 --> 20:41.640
 NumPy inherited from numeric and we can get to where NumPy came from, which is the current

20:41.640 --> 20:48.240
 array, at least current as of 2015, 2017, now there's a ton of them over the past two

20:48.240 --> 20:49.240
 or three years.

20:49.240 --> 20:50.400
 We can get into that too.

20:50.400 --> 20:55.720
 So if we just sort of linger on the early days of what was your favorite feature of

20:55.720 --> 20:56.720
 Python?

20:56.720 --> 20:57.720
 Do you remember like what?

20:57.720 --> 20:58.720
 Yeah.

20:58.720 --> 21:05.440
 I think it's an interesting to linger on like the, what, what really makes you connect

21:05.440 --> 21:06.440
 with a language?

21:06.440 --> 21:09.320
 I'm not sure it's obvious to introspect that.

21:09.320 --> 21:10.320
 No, it isn't.

21:10.320 --> 21:11.320
 And I've thought about that.

21:11.320 --> 21:12.320
 It's just some length.

21:12.320 --> 21:17.440
 I'm not, I think definitely the fact that I could read it later, that I could use it

21:17.440 --> 21:19.360
 productively without becoming an expert.

21:19.360 --> 21:21.560
 And you, other languages I had to put more effort into.

21:21.560 --> 21:22.560
 Right.

21:22.560 --> 21:24.040
 That's like an empirical observation.

21:24.040 --> 21:26.520
 Like you're not analyzing any one aspect of language.

21:26.520 --> 21:30.640
 It just seems time after time, when you look back, it's somehow readable.

21:30.640 --> 21:31.640
 It's somehow readable.

21:31.640 --> 21:36.760
 And then it was sort of, I could take executable English and translate it to Python more easily.

21:36.760 --> 21:41.560
 Like I didn't have to go, there was no translation layer as an engineer or as a scientist.

21:41.560 --> 21:43.320
 I could think about what I wanted to do.

21:43.320 --> 21:46.000
 And then the syntax wasn't that far behind it.

21:46.000 --> 21:47.000
 Yeah.

21:47.000 --> 21:48.000
 Right.

21:48.000 --> 21:49.240
 Now there are some, there are some warts there still.

21:49.240 --> 21:50.240
 It wasn't perfect.

21:50.240 --> 21:53.000
 Like there's some areas where I'm like, it'd be better if this were different or if this

21:53.000 --> 21:54.600
 were different.

21:54.600 --> 21:56.600
 Some of those things got out of the language too.

21:56.600 --> 22:00.520
 I was really grateful for some of the early pioneers in the Python ecosystem back because

22:00.520 --> 22:03.200
 Python got written in 91 is when the first version came out.

22:03.200 --> 22:06.600
 But Guido was very open to users.

22:06.600 --> 22:11.160
 And one of the sets of users were people like Jim Huguenin and David Asher and Paul Dubois

22:11.160 --> 22:13.520
 and Conrad Hinson.

22:13.520 --> 22:15.040
 These were people that were on the main list.

22:15.040 --> 22:18.240
 And they were just asking for things like, hey, we really should have complex numbers

22:18.240 --> 22:19.240
 in this language.

22:19.240 --> 22:22.560
 So let's, you know, there's a J, there's a one J, right?

22:22.560 --> 22:25.680
 And the fact that they went the engineering route of J is interesting.

22:25.680 --> 22:28.560
 I don't think that's entirely favorite engineers.

22:28.560 --> 22:32.000
 I think it's because I is so often used as the index of a for loop.

22:32.000 --> 22:34.200
 I think that's actually why.

22:34.200 --> 22:35.200
 Probably.

22:35.200 --> 22:36.800
 I mean, there's a pragmatic aspect.

22:36.800 --> 22:38.280
 But the complex numbers were there.

22:38.280 --> 22:39.280
 I love that.

22:39.280 --> 22:43.040
 The fact that I could write in the array constructs and that reduction was there.

22:43.040 --> 22:46.560
 Very simple to write summations and broadcasting was there.

22:46.560 --> 22:49.560
 I could do addition of whole arrays.

22:49.560 --> 22:50.560
 So that was cool.

22:50.560 --> 22:52.640
 That was something that I loved about it.

22:52.640 --> 22:56.280
 I don't know what to start talking to you about because you've been, you've created

22:56.280 --> 23:00.280
 so many incredible projects that basically change the whole landscape of programming.

23:00.280 --> 23:06.200
 But okay, let's start with, let's go chronologically with SciPy.

23:06.200 --> 23:09.040
 You created SciPy over two decades ago now.

23:09.040 --> 23:10.040
 Yes.

23:10.040 --> 23:11.040
 Right.

23:11.040 --> 23:12.040
 Yes.

23:12.040 --> 23:13.040
 I love to talk about SciPy.

23:13.040 --> 23:14.040
 SciPy was really my baby.

23:14.040 --> 23:15.040
 What is it?

23:15.040 --> 23:16.040
 Yeah.

23:16.040 --> 23:17.040
 What was its goal?

23:17.040 --> 23:18.040
 What is its goal?

23:18.040 --> 23:19.040
 How does it work?

23:19.040 --> 23:20.040
 Yeah.

23:20.040 --> 23:24.200
 Well, practically, here I am using Python to do stuff that I previously used Matlab

23:24.200 --> 23:25.200
 to use.

23:25.200 --> 23:28.400
 And I was using Numeric, which is an array library that made a lot of it possible.

23:28.400 --> 23:30.000
 But there's things that were missing.

23:30.000 --> 23:33.400
 Like I didn't have an ordinary differential equation solver I could just call.

23:33.400 --> 23:34.800
 I didn't have integration.

23:34.800 --> 23:37.200
 Yeah, I wanted to integrate this function.

23:37.200 --> 23:38.200
 Okay.

23:38.200 --> 23:40.640
 Well, I don't have just a function I can call to do that.

23:40.640 --> 23:43.960
 These are things I remember being critical things that I was missing.

23:43.960 --> 23:44.960
 Optimization.

23:44.960 --> 23:48.600
 I just want to pass a function to an optimizer and have it tell me what the optimum value

23:48.600 --> 23:50.280
 is.

23:50.280 --> 23:54.440
 Those things like, well, why don't we just write a library that adds these tools?

23:54.440 --> 23:57.520
 And I started to post on the main list and there had previously been, you know, people

23:57.520 --> 23:58.520
 have discussed.

23:58.520 --> 24:00.880
 I remember Conrad Hinson saying, wouldn't it be great if we had this optimizer library

24:00.880 --> 24:06.440
 or David Asch would say this stuff and I'm, you know, I'm a ambitious, ambitious is the

24:06.440 --> 24:11.320
 wrong word, an eager and probably more time than sense.

24:11.320 --> 24:13.600
 I was, you know, a poor graduate student.

24:13.600 --> 24:17.280
 My wife thinks I'm working on my PhD and I am, but part of the PhD that I loved was

24:17.280 --> 24:22.200
 the fact that it's exploratory, but you're not just, you know, taking orders fulfilling

24:22.200 --> 24:23.560
 a list of things to do.

24:23.560 --> 24:25.840
 You're trying to figure out what to do.

24:25.840 --> 24:29.240
 And so I thought, well, you know, I'm writing tools for my own use in a PhD.

24:29.240 --> 24:32.200
 So I'll just start this project.

24:32.200 --> 24:37.240
 And so in 99, 98 was when I first started to write libraries for Python, but when I fell

24:37.240 --> 24:39.800
 in love with Python 98, I said, Oh, well, there's just a few things missing.

24:39.800 --> 24:44.040
 Like, Oh, I need a reader to read daikon files that was in medical imaging and daikon was

24:44.040 --> 24:46.640
 a format that I want to be able to load that into Python.

24:46.640 --> 24:47.640
 Okay.

24:47.640 --> 24:48.640
 How do I write a reader for that?

24:48.640 --> 24:52.000
 So I wrote something called, it was an IO package, right?

24:52.000 --> 24:57.000
 And that was my very first extension module, which is C. So I wrote C code to extend Python

24:57.000 --> 25:01.000
 so that the positive in Python, I could write things more easily that, that combination

25:01.000 --> 25:02.000
 kind of hooked me.

25:02.000 --> 25:05.680
 It was the idea that I could, here's this powerful tool I can use as a scripting language

25:05.680 --> 25:10.520
 and a high level language to think about, but that I can extend easily, easily in this

25:10.520 --> 25:13.960
 in C that easily for me, because I knew enough C.

25:13.960 --> 25:17.200
 And then Guido had written a link, I mean, the only, the hard part of extending Python

25:17.200 --> 25:21.240
 was something called the way memory management networks, and you have to reference counting.

25:21.240 --> 25:25.680
 And so there's, there's a tracking of reference counting you have to do manually.

25:25.680 --> 25:27.720
 And if you don't, you have, you have memory leaks.

25:27.720 --> 25:31.520
 And so that's hard, plus then C, you know, it's just much more, you have to put more

25:31.520 --> 25:32.520
 effort into it.

25:32.520 --> 25:37.680
 It's not just I have to now think about pointers and I have to think about stuff that is different.

25:37.680 --> 25:41.560
 I have to kind of, you're like putting a new cartridge in your brain, like, okay, I'm

25:41.560 --> 25:45.240
 thinking about MRI, now I'm thinking about programming and, and they're distinct modules

25:45.240 --> 25:46.720
 you end up having to think about.

25:46.720 --> 25:50.040
 So it's harder when I was just in Python, I could just think about MRI and high level

25:50.040 --> 25:51.040
 writing.

25:51.040 --> 25:54.000
 But I could do that and that kind of, I liked it.

25:54.000 --> 25:55.880
 I found that to be enjoyable and fun.

25:55.880 --> 26:00.120
 And so I ended up, oh, well, let me just add a bunch of stuff to Python to do integration.

26:00.120 --> 26:03.520
 Well, and the cool thing is, is that, you know, the power of the internet, I just looking

26:03.520 --> 26:09.200
 around and I found, oh, there's this NetLib, which has hundreds of 4chan routines that people

26:09.200 --> 26:14.640
 are written in the 60s and the 70s and the 80s and 4chan 77, fortunately, it wasn't 4chan

26:14.640 --> 26:18.240
 60s, it had been imported to 4chan 77.

26:18.240 --> 26:21.040
 And 4chan 77 is actually a really great language.

26:21.040 --> 26:26.800
 4chan 90 probably is my favorite 4chan because it's also, it's got complex numbers, got arrays

26:26.800 --> 26:27.800
 and it's pretty high level.

26:27.800 --> 26:31.880
 Now, the problem with it is you'd never want to write a program in 4chan 90 or 4chan 77,

26:31.880 --> 26:35.040
 but it's totally fine to write a sub routine in, right?

26:35.040 --> 26:38.360
 And so, and then 4chan kind of got a little off course when they tried to compete with

26:38.360 --> 26:42.880
 C++, but at the time, I just want libraries that do something like, oh, here's an order

26:42.880 --> 26:47.320
 infrastructure equation, here's integration, here's runge cut integration, already done.

26:47.320 --> 26:50.360
 I don't have to think about that algorithm, I mean, you could, but it's nice to have somebody

26:50.360 --> 26:52.040
 who's already done one and tested it.

26:52.040 --> 26:56.080
 And so, I sort of started this journey in 98, really, look back at the main list, there's

26:56.080 --> 27:03.000
 sort of this, this productive era of me writing an extension module to connect runge cut integration

27:03.000 --> 27:08.440
 to Python and making an ordinary additional equation solver and then releasing that as

27:08.440 --> 27:12.960
 a package, so we could call ODE pack, I think I called it then quad pack, you know, I just

27:12.960 --> 27:17.360
 made these packages, eventually that became multi pack because they're originally modular,

27:17.360 --> 27:21.640
 you can install them separately, but a massive problem in Python was actually just getting

27:21.640 --> 27:23.480
 your stuff installed.

27:23.480 --> 27:27.680
 At the time, releasing software for me, like today it's, people think, what does that mean?

27:27.680 --> 27:32.680
 Well, then it meant some poorly written webpage, I had some bad webpage up and I put a tar

27:32.680 --> 27:37.400
 ball, just a GZip tar ball of source code, that was the release.

27:37.400 --> 27:44.240
 But okay, can we just stand that because that, the community aspect of creating the package

27:44.240 --> 27:51.320
 and sharing that, that's rare, that to have, to both have the, at that time, so like the

27:51.320 --> 27:52.320
 rust.

27:52.320 --> 27:53.320
 Yeah, it was pretty early, yeah.

27:53.320 --> 27:59.080
 Well, not rare, maybe you can correct me on this, but it seems like in the scientific

27:59.080 --> 28:04.160
 community, so many people, you were basically solving the problems you needed to solve,

28:04.160 --> 28:10.920
 to process the particular application, the data that you need, and to also have the mind

28:10.920 --> 28:15.360
 that I'm going to make this usable for others, that's...

28:15.360 --> 28:20.240
 I would say I was inspired, I'd been inspired by Linux, been inspired by, you know, Linus

28:20.240 --> 28:23.600
 and him making his code available, and I was starting to use Linux at the time, and I went,

28:23.600 --> 28:24.600
 this is cool.

28:24.600 --> 28:29.400
 So I'd kind of been previously primed that way, and generally, I was into science because

28:29.400 --> 28:33.880
 I like the sharing notion, I like the idea of, hey, let's, if collectively we build

28:33.880 --> 28:35.720
 knowledge and share it, we can all be better off.

28:35.720 --> 28:37.520
 Okay, so you want to energize by that idea?

28:37.520 --> 28:41.720
 So I was energized by that idea already, right, and I can't deny that I was, I'm sort of had

28:41.720 --> 28:46.360
 this very, I liked that part of science, that part of sharing, and then all of a sudden,

28:46.360 --> 28:51.720
 oh wait, here's something, and here's something I could do, and then I slowly over years learned

28:51.720 --> 28:55.280
 how to share better so that you could actually engage more people faster.

28:55.280 --> 28:59.160
 One of the key things was actually giving people a binary they could install, right,

28:59.160 --> 29:01.880
 so that wasn't just your source code, good luck.

29:01.880 --> 29:02.880
 Compile this and then...

29:02.880 --> 29:06.720
 It's compiled, ready to install, you just, you know, so, in fact, a lot of the journey

29:06.720 --> 29:11.800
 from 98, even through 2012 when I started Anaconda was about that, like it's why, you

29:11.800 --> 29:18.200
 know, it's really the key as to why a scientist with dreams of doing MRI research ended up

29:18.200 --> 29:22.240
 starting a software company that installs software.

29:22.240 --> 29:28.600
 I work with a few folks now that don't program, like on the creative side, the video side,

29:28.600 --> 29:33.200
 the audio side, and because my whole life is running on scripts, I have to try to get

29:33.200 --> 29:39.480
 them, I have now the task of teaching them how to do Python enough to run the scripts,

29:39.480 --> 29:44.200
 and so I've been actually facing this, whether it's on the condor, some, with the task of

29:44.200 --> 29:49.520
 how do I minimally explain, basically to my mom, how to write a Python script, and it's

29:49.520 --> 29:50.520
 an interesting challenge.

29:50.520 --> 29:55.280
 It's a to do item for me to figure out, like, what is the minimal amount of information

29:55.280 --> 30:00.800
 I have to teach, what are the tools you use, the one you enjoy it, to your effect of it.

30:00.800 --> 30:01.800
 And they're related.

30:01.800 --> 30:02.800
 Those are two related questions.

30:02.800 --> 30:06.840
 And then the debugging, like the iterative process of running the script to figure out

30:06.840 --> 30:11.680
 what the error is, maybe even for some people to do the fix yourself.

30:11.680 --> 30:15.560
 So do you compile it, like how do you distribute that code to them?

30:15.560 --> 30:20.760
 And it's interesting because I think it's exactly what you're talking about, if you

30:20.760 --> 30:29.160
 increase the circle of empathy, the circle of people that are able to use your programs,

30:29.160 --> 30:33.040
 you increase its effectiveness and its power.

30:33.040 --> 30:39.680
 And so you have to think, can I write scripts, can I write programs that can be used by medical

30:39.680 --> 30:45.320
 engineers, by all kinds of people that don't know programming, and actually maybe plant

30:45.320 --> 30:50.400
 the seed, have them catch the bug of programming so that they start on their journey.

30:50.400 --> 30:51.400
 That's a huge responsibility.

30:51.400 --> 30:57.240
 And ultimately it has to do with the Amazon one click buy, like how frictionless can you

30:57.240 --> 30:59.120
 make the early steps?

30:59.120 --> 31:02.760
 Frictionless is actually really key to go in any community is every, any friction point,

31:02.760 --> 31:05.280
 you're just going to lose, you're going to lose some people, right?

31:05.280 --> 31:10.160
 Now, sometimes you may want to intentionally do that, if you're early enough on that you

31:10.160 --> 31:14.560
 need a lot of help, you need people who have the skills, you might actually, it's helpful,

31:14.560 --> 31:19.360
 you don't necessarily have too many users as opposed to contributors if you're early

31:19.360 --> 31:20.360
 on.

31:20.360 --> 31:25.680
 Anyway, there's a sci fi start in 98, but it really emerged as this collection of modules

31:25.680 --> 31:30.280
 that I was just putting on the net, people were downloading, and you know, I think I

31:30.280 --> 31:35.040
 got 100 users by the end of that year, but the fact that I got 100 users and more than

31:35.040 --> 31:41.040
 that, people started to email me with fixes, like, and that was actually intoxicating,

31:41.040 --> 31:42.040
 right?

31:42.040 --> 31:45.040
 That was the, that was the, you know, here I'm writing papers and I'm giving conferences

31:45.040 --> 31:48.960
 and I get people would say hello, but yeah, good job, but mostly it was, you're reviewed

31:48.960 --> 31:51.600
 with it's competitive, right?

31:51.600 --> 31:56.400
 You publish a paper and people were like, oh, it wasn't my paper, you know, it was starting

31:56.400 --> 32:01.040
 to see that sense of academic life where it was so much, I thought it was a cooperative

32:01.040 --> 32:05.200
 effort, but it sounds like we're here just to one up each other.

32:05.200 --> 32:09.000
 And you know, that's not true across the board, but a lot of that's there, but here

32:09.000 --> 32:13.520
 in this world, I was getting responses from people all over the world.

32:13.520 --> 32:14.520
 You know, I remember P.R.

32:14.520 --> 32:18.280
 Peterson in Estonia, right, was one of the first people, and he sent me back this make

32:18.280 --> 32:21.720
 file because, you know, the first thing it is, yeah, you're building stinks and here's

32:21.720 --> 32:22.720
 a better make file.

32:22.720 --> 32:26.720
 Now, it was a complex make file, I don't think I never understood that make file actually,

32:26.720 --> 32:31.080
 but it worked and it did a lot more, and so I said, thanks, this is cool.

32:31.080 --> 32:35.240
 And that was my first kind of engagement with community development.

32:35.240 --> 32:39.960
 But you know, the process was he sent me a patch file, I had to upload a new tar ball,

32:39.960 --> 32:41.640
 and I just found I really love that.

32:41.640 --> 32:46.000
 And the style back then was here's a main list is very, it wasn't as, there's certainly

32:46.000 --> 32:49.680
 more of the tools that are available today, it was very early on, but I really started

32:49.680 --> 32:54.600
 to, that's the whole year, I think I did about seven packages that year, right?

32:54.600 --> 32:57.880
 And then by the end of the year, I collected them into a thing called multi pack.

32:57.880 --> 33:01.960
 So 99, there was this thing called multi pack, and that's when a high school student, always

33:01.960 --> 33:07.400
 a high school student at the time, getting Robert Kern, took that package and made a

33:07.400 --> 33:09.880
 Windows installer, right?

33:09.880 --> 33:12.760
 And then of course, a massive increase of usage.

33:12.760 --> 33:15.800
 So by the way, most of this development was under Linux.

33:15.800 --> 33:16.800
 Yes.

33:16.800 --> 33:17.800
 Yes, it was on Linux.

33:17.800 --> 33:20.200
 I was a Linux developer doing it on a new box.

33:20.200 --> 33:24.520
 I mean, at the time, I was actually getting into, I had a new hard drive, just some kernel

33:24.520 --> 33:28.280
 programming to make the hard drive work, I mean, not programming, but modification to

33:28.280 --> 33:30.640
 the kernel so I could actually hard drive working.

33:30.640 --> 33:32.280
 I love that aspect of it.

33:32.280 --> 33:38.680
 I was also in, at school, I was building a cluster, I took Mac computers, and you put

33:38.680 --> 33:40.120
 Yellow Dog Linux on them.

33:40.120 --> 33:44.320
 At the Mayo Clinic, they were just, all these Macs that were older, they were just getting

33:44.320 --> 33:47.640
 rid of, and so I kind of got permission to go grab them together, I put about 24 of them

33:47.640 --> 33:52.240
 together in a cluster, in a cabinet, and put Yellow Dog Linux on them all, and I wrote

33:52.240 --> 33:56.320
 a C++ program to do MRI simulation.

33:56.320 --> 34:01.480
 That was what I was doing at the same time for my day job, so to speak.

34:01.480 --> 34:05.560
 So I was loving the whole process, and at the same time, I was, oh, I need an ordinary

34:05.560 --> 34:06.560
 differential equation.

34:06.560 --> 34:09.000
 That's why ordinary differential equations were key, was because that's the heart of

34:09.000 --> 34:15.160
 a block equation for simulating MRI is an ODE solver, and so that's, I actually did that,

34:15.160 --> 34:17.000
 it doesn't happen at the same time.

34:17.000 --> 34:20.120
 That's why, kind of, what you're working on and what you're interested in, they're

34:20.120 --> 34:21.120
 coinciding.

34:21.120 --> 34:25.720
 I was definitely scratching my own itch, in terms of building stuff, which helped in

34:25.720 --> 34:28.080
 the sense that I was using it for me, so at least I had one user.

34:28.080 --> 34:31.840
 I had one person who was like, well, no, this is better, I like this interface better, and

34:31.840 --> 34:36.800
 I had the experience of Matlab to guide some of what those APIs might look like, but you

34:36.800 --> 34:39.080
 know, you're just doing yourself, you're building all this stuff.

34:39.080 --> 34:42.240
 But the Windows installer, it was the first time I realized, oh, yeah, the binary installer

34:42.240 --> 34:43.840
 really helps people.

34:43.840 --> 34:49.160
 And so that led to spending more time on that side of things.

34:49.160 --> 34:56.080
 So around 2000, so I graduated my PhD in 2000, end of year, end of 2000, so 99 doing a lot

34:56.080 --> 35:01.000
 of work there, 98 doing a lot of work there, 99 kind of spending more time on my PhD, helping

35:01.000 --> 35:04.160
 people use the tools, thinking about where do I want to go from here.

35:04.160 --> 35:08.560
 There was a company, there was a guy actually, Eric Jones and Travis Vott, they were two

35:08.560 --> 35:13.760
 friends who founded a company called Enthought, it's here in Austin, still here.

35:13.760 --> 35:19.920
 And they, Eric contacted me at the time when I was a graduate student still, and he said,

35:19.920 --> 35:23.920
 hey, why don't you come down, we want to build a company, you know, we're thinking of, you

35:23.920 --> 35:28.120
 know, a scientific company and we want to take what you're doing and kind of add it

35:28.120 --> 35:32.320
 to some stuff that he'd done, he'd written some tools, and then Piero Peterson had done

35:32.320 --> 35:36.840
 F2Py, let's come together and build, pull this all together and call it SciPy.

35:36.840 --> 35:41.560
 So that's the origin of the SciPy brand, it came from, you know, multi pack and a whole

35:41.560 --> 35:44.920
 bunch of modules I'd written, plus a few things from some other folks, and then pull

35:44.920 --> 35:47.880
 together in a single installer.

35:47.880 --> 35:51.360
 SciPy was really a distribution of Python masquerading as a library.

35:51.360 --> 35:56.120
 How did you think of all SciPy in context of Python, in context of numeric, like what?

35:56.120 --> 36:02.680
 We saw SciPy as a way to make an R&D environment for Python, like use Python, dependent on

36:02.680 --> 36:06.960
 numeric, so numeric was the array library we depended on, and then from there extend

36:06.960 --> 36:11.440
 it with a bunch of modules that allowed for, and at the time, the original vision of SciPy

36:11.440 --> 36:16.080
 was to have plotting, was to have, you know, replant, you know, the replant environment

36:16.080 --> 36:20.880
 and kind of a whole, really a whole data environment that you could then install and get going

36:20.880 --> 36:21.880
 with.

36:21.880 --> 36:25.320
 And that was kind of the thinking, it didn't really evolve that way, right?

36:25.320 --> 36:32.480
 It sort of had a, but one, it's really hard to do massive scale projects with open source

36:32.480 --> 36:33.480
 collectives.

36:33.480 --> 36:39.680
 Actually, there's sort of an intrinsic cooperation limit as to which, you know, too many cooks

36:39.680 --> 36:43.280
 in the kitchen, you know, you can do amazing infrastructure work, when it comes down to

36:43.280 --> 36:48.640
 bringing it all together into a single deliverable, that actually requires a little more product

36:48.640 --> 36:54.120
 management that is not, that doesn't really emerge from the same dynamic.

36:54.120 --> 36:58.320
 So it struggled, you know, struggled to get almost too many voices, it's hard to have

36:58.320 --> 37:02.440
 everybody agree, you know, consensus doesn't really work at that scale, you end up with

37:02.440 --> 37:06.120
 politics, you know, with the same kind of things that's happened in large organizations

37:06.120 --> 37:09.560
 trying to decide on what to do together.

37:09.560 --> 37:14.080
 The consensus building was still, was challenging at scale, as more people came in, right?

37:14.080 --> 37:17.120
 Early on, it's fine, because there's nobody there, and so it works, but then as you get

37:17.120 --> 37:21.400
 more successful, the more people use it, all of a sudden, oh, there's this scale at which

37:21.400 --> 37:24.120
 this doesn't work anymore, and we have to come up with different approaches.

37:24.120 --> 37:28.920
 So SciFi came out officially in 2001, was the first release, most of the time.

37:28.920 --> 37:32.840
 I remember the days of getting that release ready, it was a Windows installer, and there

37:32.840 --> 37:37.480
 were bugs on how, you know, the Windows compiler handled complex numbers, and you were chasing

37:37.480 --> 37:42.880
 segmentation faults, and it was, it's a lot of work, there's a lot of effort had nothing

37:42.880 --> 37:48.080
 to do with my area of study, and at the same time, I had just gotten an offer, so he wondered

37:48.080 --> 37:51.120
 if I wanted to come down and help him start that, you know, start that company with his

37:51.120 --> 37:55.880
 friend, and at the time I was like, I was intrigued, but I was squaring a path, an academic

37:55.880 --> 38:01.120
 path, and I just got an offer to go and teach at my alma mater, so I took that tenure track

38:01.120 --> 38:06.640
 position, and SciFi, and kind of, then I started working on SciFi as a professor, too.

38:06.640 --> 38:07.640
 Okay.

38:07.640 --> 38:12.160
 So that's, I left, I've got the Mayo Clinic graduate, wrote my thesis using SciFi, wrote,

38:12.160 --> 38:17.320
 you know, there's images that were created, now the plotting tool I used was something

38:17.320 --> 38:22.760
 from Yorick, actually, it was a plotting PLT, kind of a plotting language that I used.

38:22.760 --> 38:24.000
 Yorick is a programming language.

38:24.000 --> 38:28.960
 It was a programming language, it had a plotting tool, Dislin, it had integration to Dislin,

38:28.960 --> 38:33.960
 I ended up using Dislin, plus some of the plotting from Yorick, linked to from Python.

38:33.960 --> 38:39.320
 But it was a, people don't plot that way now, but this was before, and SciFi was trying

38:39.320 --> 38:41.560
 to add plotting, right?

38:41.560 --> 38:45.760
 It didn't have much success, really the success of plotting came from John Hunter, who had

38:45.760 --> 38:49.760
 a similar experience to my experience, my kind of Maverick experience as a person just

38:49.760 --> 38:53.680
 trying to get stuff done, and kind of having more time than money, maybe, right?

38:53.680 --> 38:55.480
 And John Hunter created what?

38:55.480 --> 38:56.480
 Mapplotlib.

38:56.480 --> 38:57.480
 He's a creator of Mapplotlib.

38:57.480 --> 39:00.920
 Yeah, so John Hunter was, you know, he wasn't a student at the time, but he was working

39:00.920 --> 39:03.600
 in Quantfield, and he said, we need better plotting.

39:03.600 --> 39:06.640
 So he just went out and said, cool, I'll make a new project, and we'll call it Mapplotlib.

39:06.640 --> 39:10.040
 And he released in 2001, about the same time that SciFi came out.

39:10.040 --> 39:15.840
 And it was separate library, separate install, use numeric, SciFi, use numeric.

39:15.840 --> 39:21.200
 And so SciFi, you know, in 2001, we released SciFi, and then Enthoc created a conference

39:21.200 --> 39:25.160
 called SciFi, which was brought people together to talk about the space.

39:25.160 --> 39:28.120
 And that conference is still ongoing, it's one of the favorite conferences of a lot of

39:28.120 --> 39:30.920
 people because it's, you know, it's changed over the years.

39:30.920 --> 39:36.200
 But early on, it was, you know, a collection of 50 people who care about scientists mostly,

39:36.200 --> 39:40.560
 you know, practicing scientists who want to care about coding and doing it well and not

39:40.560 --> 39:41.560
 using MATLAB.

39:41.560 --> 39:45.200
 And I remember being driven by, you know, I like MATLAB, but I didn't like the fact

39:45.200 --> 39:48.080
 that, like, so I'm not opposed to proprietary software.

39:48.080 --> 39:50.240
 I'm actually not an open source zealot.

39:50.240 --> 39:54.480
 I love open source for the, what it brings, but I also see the role for proprietary software.

39:54.480 --> 39:58.840
 But what I didn't like was the fact that I would develop code and publish it, and then

39:58.840 --> 40:02.440
 effectively telling somebody here to run my code, you have to have this proprietary software.

40:02.440 --> 40:03.440
 Right.

40:03.440 --> 40:07.080
 And there's also culture around MATLAB as much, because I've talked to a few folks

40:07.080 --> 40:09.920
 at MathWorks, Greats MATLAB.

40:09.920 --> 40:10.920
 Yeah.

40:10.920 --> 40:16.000
 I mean, there's just a culture, they try really hard, but it's just this corporate IBM

40:16.000 --> 40:18.440
 style culture that's like, or whatever.

40:18.440 --> 40:23.160
 I don't want to say negative things about IBM or whatever, but there's a, no, it's really

40:23.160 --> 40:24.160
 that connection.

40:24.160 --> 40:27.000
 It's something I'm in the middle of right now is the business of open source.

40:27.000 --> 40:33.440
 And how do you connect the ethos of cooperative development with the necessity of creating

40:33.440 --> 40:34.440
 profits?

40:34.440 --> 40:35.440
 Right.

40:35.440 --> 40:38.200
 And like right now today, you know, I'm still in the middle of that.

40:38.200 --> 40:41.720
 That's actually the early days of me exploring this question.

40:41.720 --> 40:46.280
 Because as I was writing SciPy, I mean, as an aside, I also had, so I had three kids

40:46.280 --> 40:47.280
 at the time.

40:47.280 --> 40:48.280
 I have six kids now.

40:48.280 --> 40:50.880
 I got married early, wanted a family.

40:50.880 --> 40:54.720
 I had three kids, and I remember reading, I read Richard Stallman's post, and I was

40:54.720 --> 40:55.720
 a fan of Stallman.

40:55.720 --> 40:59.000
 I would read his work, I liked this collective ideas he would have.

40:59.000 --> 41:01.800
 Certainly the ideas on IP law, I read a lot of stuff.

41:01.800 --> 41:05.800
 But then he said, you know, okay, well, how do I make money with this?

41:05.800 --> 41:06.800
 How do I make a living?

41:06.800 --> 41:07.800
 How do I pay for my kids?

41:07.800 --> 41:09.440
 All this stuff was in my mind.

41:09.440 --> 41:12.320
 Young graduate student making no money thinking I got to get a job.

41:12.320 --> 41:15.960
 And he said, well, you know, I think just be like me and don't have kids, right?

41:15.960 --> 41:17.200
 That's just don't, don't.

41:17.200 --> 41:18.840
 That's his take on, is that his dad?

41:18.840 --> 41:20.960
 That was the, that was the, what he said in that moment, right?

41:20.960 --> 41:25.080
 That's the thing I read and I went, okay, this is a train I can't get on.

41:25.080 --> 41:28.880
 There has to be a way to preserve the culture of open source and still be able to make sufficient

41:28.880 --> 41:30.360
 money to feed your kids.

41:30.360 --> 41:31.360
 Yes, exactly.

41:31.360 --> 41:34.680
 There's got to be, well, so that actually led me to a study of economics, because at

41:34.680 --> 41:38.920
 the time I was ignorant, and it really was, and I'm actually, I'm embarrassed for educational

41:38.920 --> 41:43.040
 system that they could let me, and I was valedictorian of my high school class, and I did super well

41:43.040 --> 41:47.680
 in college, and like academically I did great, right?

41:47.680 --> 41:52.840
 But the fact that I could do that and then be clueless about this key part of life, it

41:52.840 --> 41:54.480
 led me to go, there's a problem.

41:54.480 --> 41:58.040
 Like I should have learned this in fifth grade, I should have learned this in eighth

41:58.040 --> 42:01.800
 grade, like everybody should come out with a basic knowledge of economics.

42:01.800 --> 42:06.200
 You're an interesting example, because you've created tools that change the lives of probably

42:06.200 --> 42:10.680
 millions of people, and the fact that you don't understand at the time of the creation

42:10.680 --> 42:15.040
 of those tools, the basics economics of how to build up a giant system is a problem.

42:15.040 --> 42:16.040
 Yeah, it's a problem.

42:16.040 --> 42:20.800
 And so, during my PhD, at the same time, this is back in 98, 99, at the same time, I was

42:20.800 --> 42:24.960
 in a library, I was reading books on capitalism, I was reading books on Marxism, I was reading

42:24.960 --> 42:29.800
 books on, you know, what is this thing, what does it mean?

42:29.800 --> 42:34.000
 And I encountered a, basically what I, I encountered a set of writings from people that said they

42:34.000 --> 42:37.280
 were the inheritors of Adam Smith, but Adam Smith for the first time, right?

42:37.280 --> 42:42.480
 Which is the wealth of nations and kind of this notion of emergent, emergent societies,

42:42.480 --> 42:47.040
 and realized, oh, there's this whole world out here of people.

42:47.040 --> 42:53.560
 And the challenge of economics is also political, like, because economics, you know, people,

42:53.560 --> 42:58.400
 different parties running for office, they'll, they want their economic friends, they want

42:58.400 --> 43:03.640
 their economists to back them up, right, or to be their magicians, like the magicians

43:03.640 --> 43:06.440
 in Pharaoh's court, right, the people that are kind of say, hey, this is, you should

43:06.440 --> 43:09.520
 listen to me, because I've got the expert who says this.

43:09.520 --> 43:11.800
 And so, it gets really muddled, right?

43:11.800 --> 43:16.000
 I was looking at, as a scientist going, what is this space, what does this mean, how does

43:16.000 --> 43:19.120
 Paris get fed, how does, how does money, how does it work?

43:19.120 --> 43:21.280
 And I found a lot of writings I really loved.

43:21.280 --> 43:24.800
 I found some things that I really loved, and I learned from that, it was writings from

43:24.800 --> 43:29.040
 people like Von Missas, he wrote a, he wrote a paper in 1920 that still should be read

43:29.040 --> 43:30.040
 more than it is.

43:30.040 --> 43:34.160
 It's got, I mean, it was the economic calculation problem of the socialist commonwealth.

43:34.160 --> 43:36.960
 It was basically in response to the Bolshevik Revolution in 1917.

43:36.960 --> 43:41.840
 And his basic argument was, it's not going to work to not have private property.

43:41.840 --> 43:43.400
 You're not going to be able to come up with prices.

43:43.400 --> 43:46.760
 The bureaucrats aren't going to be able to determine how to allocate resources without

43:46.760 --> 43:47.760
 a price system.

43:47.760 --> 43:51.760
 And a price system emerges from people making trades.

43:51.760 --> 43:55.560
 And they can only make trades if they have authority over the thing they're trading.

43:55.560 --> 44:00.720
 And that, that creates information flow that you just don't have if you try to top down

44:00.720 --> 44:01.720
 it.

44:01.720 --> 44:02.720
 Right.

44:02.720 --> 44:03.720
 Right.

44:03.720 --> 44:04.720
 It's like, huh, that's a really good point.

44:04.720 --> 44:05.720
 Yeah.

44:05.720 --> 44:09.640
 The prices have a signal that's used, and it's important to have that signal when you're

44:09.640 --> 44:13.520
 trying to build a community of productive people like you would in the software engineering

44:13.520 --> 44:14.520
 space.

44:14.520 --> 44:15.520
 Yeah.

44:15.520 --> 44:17.920
 The prices are actually an important signaling mechanism, right?

44:17.920 --> 44:20.720
 And that money is just a bartering tool.

44:20.720 --> 44:21.720
 Right.

44:21.720 --> 44:23.880
 So this is the first time I've encountered any of this concept, right?

44:23.880 --> 44:26.640
 And the fact that, oh, this is actually really critical.

44:26.640 --> 44:33.600
 Like it's so critical to our prosperity and that we're, we're dangerously not learning

44:33.600 --> 44:35.840
 about this, not teaching our children about this.

44:35.840 --> 44:38.200
 So you had the three kids, they had to make some hard decisions.

44:38.200 --> 44:39.920
 They had to make some money, right, had to figure it out.

44:39.920 --> 44:40.920
 But I didn't really care.

44:40.920 --> 44:42.600
 I mean, I was never, I've never been driven by money.

44:42.600 --> 44:43.600
 Just need it.

44:43.600 --> 44:44.600
 Yeah.

44:44.600 --> 44:45.600
 Right.

44:45.600 --> 44:46.600
 You need to eat.

44:46.600 --> 44:49.160
 So what, how did that resolve itself in terms of side by?

44:49.160 --> 44:51.360
 So I would say it didn't really resolve itself.

44:51.360 --> 44:53.200
 It sort of started a journey that I'm continuing on.

44:53.200 --> 44:54.200
 I'm still on, I would say.

44:54.200 --> 44:59.520
 I don't think it resolved itself, but I will say I went in wide, eyes wide open.

44:59.520 --> 45:05.320
 Like I knew that there were problems with, you know, giving stuff away and creating the,

45:05.320 --> 45:10.120
 the market externalities, that the fact that, yeah, people might use it and I might not

45:10.120 --> 45:12.680
 get paid for it and I'll have to figure something else out to get paid.

45:12.680 --> 45:16.840
 Like at least I can say I'm not bitter that a lot of people have used stuff that I've

45:16.840 --> 45:19.840
 written and I haven't necessarily benefited economically from it.

45:19.840 --> 45:22.920
 Like I've heard other people be, you know, bitter about that when they write or they

45:22.920 --> 45:25.160
 talk, they go, oh, I should have got more value out of this.

45:25.160 --> 45:31.000
 And I'm also, I want to create systems that let people like me who might have these desires

45:31.000 --> 45:34.880
 to do things, let them benefit so that actually creates more of the same.

45:34.880 --> 45:40.320
 Not to turn on your bitterness module, but there's some aspect, I wish there was mechanisms

45:40.320 --> 45:44.480
 for me to reward whoever created side pie and non pie because it brought so much joy

45:44.480 --> 45:45.480
 into my life.

45:45.480 --> 45:46.480
 I appreciate that.

45:46.480 --> 45:48.240
 And I, the tip dark notion was there.

45:48.240 --> 45:49.240
 I appreciate that.

45:49.240 --> 45:52.600
 And I think there should be a very, there should be a machine less mechanism.

45:52.600 --> 45:53.600
 I totally agree.

45:53.600 --> 45:56.440
 I would love to talk about some of the ideas I have because I actually came across, I think

45:56.440 --> 46:01.040
 I've come up with some interesting notions that could work, but they'll require anything

46:01.040 --> 46:03.200
 that will work takes time to emerge.

46:03.200 --> 46:04.200
 Right.

46:04.200 --> 46:05.200
 And I don't just turn overnight.

46:05.200 --> 46:09.320
 That's definitely one thing I've also understood and learned is any fixes.

46:09.320 --> 46:10.320
 That's why it's kind of funny.

46:10.320 --> 46:13.560
 We often give credit to, you know, oh, this president gets elected and, oh, look how great

46:13.560 --> 46:14.560
 things have done.

46:14.560 --> 46:19.560
 And I saw that when, when I had a transition in a condo, when a new CEO came in, right?

46:19.560 --> 46:22.480
 And it's like the success that's happening.

46:22.480 --> 46:23.480
 There's an inertia there.

46:23.480 --> 46:24.480
 Yeah.

46:24.480 --> 46:25.480
 Right.

46:25.480 --> 46:28.360
 And sometimes the decision made like 10 years before is the reason why the success is

46:28.360 --> 46:29.360
 the.

46:29.360 --> 46:30.360
 Right.

46:30.360 --> 46:31.360
 Exactly.

46:31.360 --> 46:32.360
 So we're sort of just one around taking credit for stuff.

46:32.360 --> 46:34.600
 Credit assignment has like a delay to it.

46:34.600 --> 46:35.600
 Yes.

46:35.600 --> 46:39.360
 That makes the credit assignment basically wrong more than right.

46:39.360 --> 46:40.360
 Wrong more than right.

46:40.360 --> 46:41.360
 Exactly.

46:41.360 --> 46:44.280
 And so I'm like, oh, this is, you know, that's the stuff I would, I would read a ton about,

46:44.280 --> 46:45.780
 you know, early on.

46:45.780 --> 46:47.800
 So I don't, I feel like I'm with you.

46:47.800 --> 46:48.800
 Like I want the same thing.

46:48.800 --> 46:51.680
 I want to be able to, and honestly not for personally, I've been happy.

46:51.680 --> 46:52.680
 I've been, I've been happy.

46:52.680 --> 46:55.920
 I feel like I don't have any, I mean, we've been done reasonably okay, but I've had to

46:55.920 --> 46:57.080
 pursue it.

46:57.080 --> 47:01.840
 Like that's, that's really what started my trajectory from academia is reading that

47:01.840 --> 47:04.840
 stuff led me to say, oh, entrepreneurship matters.

47:04.840 --> 47:10.440
 So I love software, but we need more entrepreneurs and I want to understand that better.

47:10.440 --> 47:17.520
 So once I kind of had that, that virus infect my brain, it, even though I was on a trajectory

47:17.520 --> 47:23.280
 to go to a tenure track position at a university and I was there for six years, I was kind

47:23.280 --> 47:27.080
 of already out the door when I started and we can get into that.

47:27.080 --> 47:32.960
 Yeah, what can I just ask a quick question on, is there some design principles that were

47:32.960 --> 47:34.880
 in your mind or on side pie?

47:34.880 --> 47:39.120
 Like, is there some key ideas that were just like sticking to you that this is, this is

47:39.120 --> 47:40.120
 the fundamental ideas?

47:40.120 --> 47:41.120
 Yeah, I would say so.

47:41.120 --> 47:45.520
 I would think it's basically accessibility to scientists, like give them, give scientists

47:45.520 --> 47:48.400
 and engineers tools that they don't have to think a lot about programming.

47:48.400 --> 47:51.760
 So give them really good building blocks, give them functions that they want to call

47:51.760 --> 47:54.840
 and sort of just the right length of spelling.

47:54.840 --> 47:59.960
 You know, there's a one tradition in a programming where it's like, you know, make very, very

47:59.960 --> 48:02.000
 long names, right?

48:02.000 --> 48:05.920
 And you can see it in some programming languages where the names get, you know, take half the

48:05.920 --> 48:12.040
 screen and I, and in the fortune world, characters would have to be six, six letters early on,

48:12.040 --> 48:13.040
 right?

48:13.040 --> 48:16.840
 And that's way too, too much, too, too little, but I was like, I like to have names that

48:16.840 --> 48:19.000
 were informative, but short.

48:19.000 --> 48:24.800
 So even though Python was a different conversation, but documentation is doing so well.

48:24.800 --> 48:25.920
 There's some work there.

48:25.920 --> 48:31.720
 So when you look at great scientific libraries and functions, there's, there's a richness

48:31.720 --> 48:34.880
 of documentation that helps you get into the details.

48:34.880 --> 48:39.000
 The first glance at a function gives you the intuition of all it needs to do by looking

48:39.000 --> 48:40.600
 at the headers and so on.

48:40.600 --> 48:45.360
 But to get the depths of all the complexities involved, all the options involved, documentation

48:45.360 --> 48:46.360
 does some of the work.

48:46.360 --> 48:47.360
 Documentation is essential.

48:47.360 --> 48:48.360
 Yeah.

48:48.360 --> 48:50.640
 So that was actually, so we thought about several things.

48:50.640 --> 48:52.000
 One is we wanted plotting.

48:52.000 --> 48:53.600
 We wanted interactive environment.

48:53.600 --> 48:54.920
 We wanted good documentation.

48:54.920 --> 48:56.800
 These were things we knew, we wanted.

48:56.800 --> 49:00.600
 The reality is those took about 10 years to evolve, right?

49:00.600 --> 49:03.120
 Given the fact that we didn't have a big budget, it was all volunteer labor.

49:03.120 --> 49:10.120
 It was sort of when Enthought got created and they started to, you know, try to find projects,

49:10.120 --> 49:14.320
 people would pay for pieces and they were able to fund some of it, not nearly enough

49:14.320 --> 49:15.800
 to keep up with what was necessary.

49:15.800 --> 49:18.800
 And I'm, no, no criticism, just simply the reality.

49:18.800 --> 49:23.400
 I mean, it's, it's hard to start a business and then do consulting and then also promote

49:23.400 --> 49:26.280
 an open source project that's still fairly new.

49:26.280 --> 49:27.880
 Cypher was fairly niche.

49:27.880 --> 49:30.880
 We stayed connected all while I was a student, sorry, a professor.

49:30.880 --> 49:35.040
 I went to BYU and started to teach, electrical engineering, all the applied math courses.

49:35.040 --> 49:39.080
 I loved teaching, single processing, probability theory, electrical magnetism.

49:39.080 --> 49:44.200
 I was the, if you look at right in my professor, which my kids loved to do, I wasn't, I got

49:44.200 --> 49:46.240
 some bad reviews because people.

49:46.240 --> 49:48.520
 What was the criticism?

49:48.520 --> 49:51.000
 I would speak too high, too high of a level.

49:51.000 --> 49:55.680
 Like I definitely had a calibration problem coming out of graduate work where I hate to

49:55.680 --> 49:57.080
 be condescending to people.

49:57.080 --> 49:59.320
 Like I really have a ton of respect for people fundamentally.

49:59.320 --> 50:02.520
 Like my fundamental thing is I respect people.

50:02.520 --> 50:06.640
 Sometimes that can lead to a, I was, I was thinking they were, they, they had more knowledge

50:06.640 --> 50:07.720
 than they did.

50:07.720 --> 50:11.080
 And so I would just speak at a very high level, assume they got it.

50:11.080 --> 50:14.280
 But they need to rise to the standard that you set.

50:14.280 --> 50:16.760
 I mean, that's one of the, some of the greatest teachers do that.

50:16.760 --> 50:22.600
 And I agree, and that was kind of what was inspiring me, but, but you know, you also have to, I

50:22.600 --> 50:26.280
 cannot say I was an art, I was articulate of some of the greatest teachers, right?

50:26.280 --> 50:30.880
 I was, you know, like one, one classic example, when I first taught at BYU, my very first

50:30.880 --> 50:35.920
 class, it was overheads, transparencies, overheads, before projectors were really that common.

50:35.920 --> 50:41.960
 So transparencies, I'm writing my notes out, I go in, rooms half dark, I just blaring through

50:41.960 --> 50:42.960
 these transparencies.

50:42.960 --> 50:43.960
 Here it is.

50:43.960 --> 50:44.960
 Here it is.

50:44.960 --> 50:50.400
 And I did, gave a quiz after two weeks, nowhere knew anything, nothing I had taught, I had

50:50.400 --> 50:51.400
 gotten anywhere.

50:51.400 --> 50:54.200
 And I realized, okay, I'm not, this is not working.

50:54.200 --> 50:57.480
 So I took, put away the transparencies and I turned around and just started using the

50:57.480 --> 50:58.480
 chalkboard.

50:58.480 --> 51:00.960
 And what it did is it slowed me down, right?

51:00.960 --> 51:05.080
 The chalkboard just slowed me down and gave people time to process and to think and then

51:05.080 --> 51:06.080
 that made me focus.

51:06.080 --> 51:10.600
 My writing wasn't great on their chalkboard, but I really loved that part of like the teaching.

51:10.600 --> 51:13.800
 So that, that entered sci pies world in terms of, we always understood that sci, there's

51:13.800 --> 51:18.560
 a didactic aspect of sci pie kind of, how do you take the knowledge and then produce

51:18.560 --> 51:19.560
 it?

51:19.560 --> 51:21.160
 The challenge we had was the scope.

51:21.160 --> 51:23.560
 Like ultimately sci pie was everything, right?

51:23.560 --> 51:26.840
 And so 2001 when it first came out, people were starting to use it.

51:26.840 --> 51:27.840
 No, this is cool.

51:27.840 --> 51:29.640
 This is a tool we actually use.

51:29.640 --> 51:34.000
 At the same time, 2001 timeframe, there was a little bit of like the Hubble Space Telescope,

51:34.000 --> 51:37.520
 the folks at Hubble has started to say, hey, Python, we're going to use Python for processing

51:37.520 --> 51:38.880
 images from Hubble.

51:38.880 --> 51:43.880
 And so Perry Greenfield was a good friend and running that program and he had called me

51:43.880 --> 51:48.200
 before I left to BYU and said, you know, we want to do this, but numeric actually has

51:48.200 --> 51:52.760
 some challenges in terms of, you know, it's not, the array doesn't have enough types.

51:52.760 --> 51:56.720
 We need more operations, you know, broadcast needs to be a little more settled.

51:56.720 --> 51:57.720
 They wanted record arrays.

51:57.720 --> 52:01.800
 They wanted, you know, record arrays are like a data frame, but a little bit different,

52:01.800 --> 52:03.960
 but they want a more structured data.

52:03.960 --> 52:07.360
 So he had called me even early on then and they said, yeah, would you want to work on

52:07.360 --> 52:08.360
 something to make this work?

52:08.360 --> 52:12.200
 And I said, yeah, I'm interested, but I'm going here and we'll see if I have time.

52:12.200 --> 52:15.840
 So in the meantime, while I was teaching and SIPI was emerging and I had a student, I was

52:15.840 --> 52:18.920
 constantly while I was teaching trying to figure a way to fund this stuff.

52:18.920 --> 52:25.120
 So I had a graduate student, my only graduate student, a Chinese fellow, Lu Hongze is his

52:25.120 --> 52:26.400
 name, great guy.

52:26.400 --> 52:31.080
 He wrote a bunch of stuff for iterative linear algebra, like got into writing some of the

52:31.080 --> 52:36.200
 iterative linear algebra tools that are currently there in SIPI and they've gotten better since,

52:36.200 --> 52:39.440
 but this is in 2005, kept working on SIPI.

52:39.440 --> 52:47.160
 But Perry has started working on a replacement to Numeric called Numeray and in 2004, a package

52:47.160 --> 52:53.320
 called and the image, it was an image processing library that was written for Numeray.

52:53.320 --> 52:55.160
 And it had in it a morphology tool.

52:55.160 --> 52:56.800
 I don't know if you know what morphology is.

52:56.800 --> 52:57.800
 It's open dilations.

52:57.800 --> 53:02.640
 You know, there was sort of this, as a medical imaging student, I knew what it was because

53:02.640 --> 53:04.520
 it was used in segmentation a lot.

53:04.520 --> 53:08.720
 And in fact, I'd wanted to do something like that in Python in SIPI, but just had never

53:08.720 --> 53:10.320
 gotten around to it.

53:10.320 --> 53:16.680
 So when it came out that it worked only on Numeray and SIPI needed Numeric and so we

53:16.680 --> 53:22.560
 effectively had the beginning of this split and Numeric and Numeray didn't share data.

53:22.560 --> 53:26.480
 They were just two, so you could have a gigabyte of Numeray data and gigabyte of Numeric data

53:26.480 --> 53:27.480
 and they wouldn't share it.

53:27.480 --> 53:31.280
 And so you had these, then you had these scientific libraries written on top.

53:31.280 --> 53:32.920
 I got really bugged by that.

53:32.920 --> 53:35.120
 I got really like, oh man, this is not good.

53:35.120 --> 53:36.360
 We're not cooperating now.

53:36.360 --> 53:40.480
 We're sort of redoing each other's work and we're just this young community.

53:40.480 --> 53:46.400
 So that's what led me, even though I knew it was risky because my, I was on a tenure

53:46.400 --> 53:47.400
 track position.

53:47.400 --> 53:48.400
 2004, I got reviewed.

53:48.400 --> 53:49.400
 They said, hey, things are going okay.

53:49.400 --> 53:50.400
 You're doing well.

53:50.400 --> 53:51.400
 Paper's coming out.

53:51.400 --> 53:53.520
 But you're kind of spending a lot of time on this open source stuff.

53:53.520 --> 53:57.360
 Maybe do a little less of that and a little more of the paper writing and grant writing,

53:57.360 --> 54:01.880
 which was naive, but it was definitely the tie, the thinking that still goes on, still

54:01.880 --> 54:03.240
 goes on.

54:03.240 --> 54:09.560
 You're basically creating a thing which enables science in the 21st century.

54:09.560 --> 54:12.200
 Maybe don't emphasize that so much in your tenure.

54:12.200 --> 54:13.200
 Right.

54:13.200 --> 54:15.720
 It illustrates some of the challenges.

54:15.720 --> 54:16.720
 It does.

54:16.720 --> 54:22.480
 And it's, people mean well, but we've gotten broken in a bunch of ways.

54:22.480 --> 54:26.040
 Certain things, a programming, understanding the role of software engineering, programming

54:26.040 --> 54:28.360
 in society is a little bit like, I guess.

54:28.360 --> 54:29.360
 Exactly.

54:29.360 --> 54:30.360
 Now I was in an electrical engineering position.

54:30.360 --> 54:31.360
 Right.

54:31.360 --> 54:32.360
 Yeah, of course.

54:32.360 --> 54:33.360
 There.

54:33.360 --> 54:34.360
 Yeah.

54:34.360 --> 54:35.360
 They were very focused.

54:35.360 --> 54:37.280
 And so, good people, and I had a great time.

54:37.280 --> 54:38.280
 I loved my time.

54:38.280 --> 54:39.280
 I loved my teaching.

54:39.280 --> 54:40.560
 I loved all the things I did there.

54:40.560 --> 54:43.640
 The problem was, this split was happening, this community I loved.

54:43.640 --> 54:47.840
 I saw people and I went, oh my gosh, this is going to be, this is not great.

54:47.840 --> 54:54.920
 And so, I happened, fate, I had a class I signed up for, I was trying to build an MRI system.

54:54.920 --> 55:01.880
 But I had a kind of a radio, a digital radio class, a digital MRI class.

55:01.880 --> 55:05.280
 And I had people sign up, two people signed up, then they dropped, and so, I had nobody

55:05.280 --> 55:06.280
 in this class.

55:06.280 --> 55:11.160
 So, and I didn't have any other courses to teach, and I thought, oh, I've got some time.

55:11.160 --> 55:14.920
 And I'll just write, I'll just write a merger of numeric and nummery.

55:14.920 --> 55:19.360
 Like I'll basically take the numeric code base at the features nummery I was adding,

55:19.360 --> 55:22.560
 and then kind of come up with a single array library that everybody can use.

55:22.560 --> 55:27.640
 So that's where NumPy came from, was my thinking, hey, I can do this, and who else is going

55:27.640 --> 55:28.640
 to?

55:28.640 --> 55:30.280
 Because at that point, I'd been around the community long enough, and I'd written enough

55:30.280 --> 55:31.280
 C code.

55:31.280 --> 55:32.680
 I knew, I knew the structures.

55:32.680 --> 55:38.680
 And I, in fact, my first contribution to numeric had been writing the CAPI documentation that

55:38.680 --> 55:42.200
 went in the first documentation for NumPy, for numeric, sorry.

55:42.200 --> 55:45.120
 This is Paul de Bois, David Asher, Conrad Henson and myself.

55:45.120 --> 55:50.200
 I got credit because I wrote this chapter, which is all the CAPI of numeric, all the

55:50.200 --> 55:51.200
 C stuff.

55:51.200 --> 55:54.840
 So I said, ah, probably the one to do it, and nobody else is going to do this.

55:54.840 --> 56:01.440
 So it's sort of out of a sense of duty and passion, knowing that I don't think my academic,

56:01.440 --> 56:05.360
 I don't think the department here is going to appreciate this, but it's the right thing

56:05.360 --> 56:06.360
 to do.

56:06.360 --> 56:11.840
 Can we just link on that moment because the importance of the way you thought and the

56:11.840 --> 56:19.520
 action you took, I feel is understated and is rare, and I would love to see so much more

56:19.520 --> 56:27.520
 of it because what happens as the tools become more popular, there's a split that happens.

56:27.520 --> 56:33.560
 And it's a truly heroic and impactful action to in those early, in that early split to

56:33.560 --> 56:39.720
 step up and you, it's like great leaders throughout history, like get what is the brave heart,

56:39.720 --> 56:45.360
 like get on a horse and, and rile the troops because I think that can have, make a big

56:45.360 --> 56:46.360
 difference.

56:46.360 --> 56:49.080
 We have TensorFlow versus PyTorch in the machine learning.

56:49.080 --> 56:50.400
 We have the same problem today.

56:50.400 --> 56:51.400
 Yeah.

56:51.400 --> 56:52.520
 I wonder, it's actually bigger.

56:52.520 --> 56:58.280
 I wonder if it's possible in the early days to rally the troops.

56:58.280 --> 57:00.000
 It is possible, especially in the early days.

57:00.000 --> 57:01.560
 The longer it goes, the harder, right?

57:01.560 --> 57:05.920
 And the more energy in the factions, the harder, but in the early days, it is possible and it's

57:05.920 --> 57:10.800
 extremely helpful and there's a willingness there, but, but the, but the challenge is

57:10.800 --> 57:13.040
 there's usually not a willingness to fund it.

57:13.040 --> 57:17.680
 There's not a willingness to, you know, like I was literally walking into a field saying

57:17.680 --> 57:21.560
 I'm going to do this and you know, here I am, like, you know, I have five kids at home

57:21.560 --> 57:23.960
 now.

57:23.960 --> 57:24.960
 Pressure builds.

57:24.960 --> 57:27.960
 Sometimes my wife hears these stories and she's like, you did what?

57:27.960 --> 57:32.280
 I thought we were going to, I thought you were actually on a path to make sure we had

57:32.280 --> 57:37.320
 resources and money, but, but again, there's a, there's an aspect, I'm, I'm a very hopeful

57:37.320 --> 57:38.320
 person.

57:38.320 --> 57:39.320
 I'm an optimistic person.

57:39.320 --> 57:40.320
 My nature.

57:40.320 --> 57:41.320
 I love people.

57:41.320 --> 57:47.440
 I learned that about myself later on, uh, uh, part of my, uh, my religious beliefs actually

57:47.440 --> 57:48.440
 lead to that.

57:48.440 --> 57:51.760
 And it's why I hold them dear because it's actually how I feel about, it's what, it's

57:51.760 --> 57:55.800
 what leads me to this, to these attitudes, sort of this hopefulness and this sense of,

57:55.800 --> 57:59.440
 yeah, it may not, it may not work out for me financially or maybe, but that's not the

57:59.440 --> 58:00.440
 ultimate gain.

58:00.440 --> 58:05.240
 Like that's a thing, but it's not, you know, that's not the scorecard, uh, for me.

58:05.240 --> 58:09.160
 And so I just wanted to be helpful and I knew, and partly because these sci pi conferences

58:09.160 --> 58:12.720
 because of the main list conversations, I knew there was a lot of need for this.

58:12.720 --> 58:13.720
 Right.

58:13.720 --> 58:16.480
 And so I had this, it wasn't like I was alone in terms of no feedback.

58:16.480 --> 58:19.600
 I had these people who knew, but it was crazy.

58:19.600 --> 58:22.040
 Like people who, to the time said, yeah, we didn't think you'd be able to do it.

58:22.040 --> 58:23.040
 Yeah.

58:23.040 --> 58:24.040
 We thought it was crazy.

58:24.040 --> 58:29.000
 And also instructive, like practically speaking, that you had a cool feature that you were

58:29.000 --> 58:34.640
 chasing in the morphology, like the, like it's, it's not just like, it's not some visionary

58:34.640 --> 58:35.640
 thing.

58:35.640 --> 58:37.200
 I'm going to unite the community.

58:37.200 --> 58:42.280
 You were like, you were actually practically, this is what one person actually can do, uh,

58:42.280 --> 58:43.280
 and actually build.

58:43.280 --> 58:46.720
 Cause that is important cause you can get over your skis.

58:46.720 --> 58:47.720
 Yeah.

58:47.720 --> 58:49.200
 You can definitely get over your skis.

58:49.200 --> 58:52.120
 And I had, in fact, this almost got me over my skis, right?

58:52.120 --> 58:57.240
 I would say, well, in retrospect, I hate looking back, we can, I can tell you all the flaws

58:57.240 --> 58:58.240
 with NumPy.

58:58.240 --> 58:59.240
 Right.

58:59.240 --> 59:00.240
 We want to go into it.

59:00.240 --> 59:01.800
 There's lots of stuff that I'm like, oh man, that's embarrassing.

59:01.800 --> 59:02.800
 That was wrong.

59:02.800 --> 59:04.040
 I wish I had somebody slot me with a wet fish there.

59:04.040 --> 59:05.040
 Yeah.

59:05.040 --> 59:09.920
 Like I needed, like what I'd wished I'd had was somebody with more experience and certainly

59:09.920 --> 59:11.640
 library writing and array library.

59:11.640 --> 59:14.640
 Like I wish I had me, I could go back in time and go, do this, do that.

59:14.640 --> 59:15.640
 There's an important thing.

59:15.640 --> 59:20.360
 Cause there's things we did that are still there that are problematic that created challenges

59:20.360 --> 59:21.360
 for later.

59:21.360 --> 59:24.600
 And, and I didn't know it at the time, didn't understand how important that was.

59:24.600 --> 59:26.560
 And in many cases, didn't know what to do.

59:26.560 --> 59:29.080
 Like there was pieces of the design of NumPy.

59:29.080 --> 59:31.440
 I didn't know what to do until five years ago.

59:31.440 --> 59:34.120
 Now I know what they should have been, but I didn't know at the time and nobody, and

59:34.120 --> 59:35.120
 I couldn't get the help.

59:35.120 --> 59:36.120
 Anyway.

59:36.120 --> 59:37.120
 So I wrote it.

59:37.120 --> 59:41.440
 It took about, it took four months to write the first version and then about 14 months

59:41.440 --> 59:43.520
 to make it usable.

59:43.520 --> 59:48.560
 But it was, it wasn't, it was that first four months of intense writing, coding, getting

59:48.560 --> 59:50.680
 something out the door that worked.

59:50.680 --> 59:52.520
 That was, it was, it was definitely challenging.

59:52.520 --> 59:55.720
 And then the big thing I did was create a new type object called D type.

59:55.720 --> 59:58.960
 That was probably the sync, the, the contribution.

59:58.960 --> 1:00:03.640
 And then the fact that I added a broad, not just broadcasting, but advanced indexing.

1:00:03.640 --> 1:00:09.400
 So that you could do, um, masked indexing and indirect indexing instead of just slicing

1:00:09.400 --> 1:00:10.400
 in.

1:00:10.400 --> 1:00:15.960
 So for people who don't know, and maybe you can elaborate NumPy, I guess the vision in

1:00:15.960 --> 1:00:23.480
 the narrowest sense is to have this object that represents n dimensional arrays.

1:00:23.480 --> 1:00:28.280
 And like at any level of abstraction you want, but basically it could be a black box that

1:00:28.280 --> 1:00:33.120
 you can investigate in ways that you would naturally want to investigate such objects.

1:00:33.120 --> 1:00:34.120
 Yes.

1:00:34.120 --> 1:00:35.120
 Exactly.

1:00:35.120 --> 1:00:36.120
 So you could do math on it easily.

1:00:36.120 --> 1:00:37.120
 Math on it easily.

1:00:37.120 --> 1:00:38.120
 Yeah.

1:00:38.120 --> 1:00:39.960
 So it had an associated library of math operations.

1:00:39.960 --> 1:00:45.040
 And effectively SciPy became an even larger operate set of math operations.

1:00:45.040 --> 1:00:50.440
 So the key for me was I was going to write NumPy and then move SciPy to depend on NumPy.

1:00:50.440 --> 1:00:54.760
 In fact, early on, one of the initial proposals was that we would just write SciPy and it would

1:00:54.760 --> 1:00:59.960
 have the numeric object inside of it and it'd be SciPy dot array or something.

1:00:59.960 --> 1:01:04.240
 That turned out to be problematic because numeric already had a little mini library of linear

1:01:04.240 --> 1:01:09.840
 algebra and some functions and it had enough momentum, enough users that nobody wanted

1:01:09.840 --> 1:01:10.840
 to...

1:01:10.840 --> 1:01:11.840
 They wanted the backward compatibility.

1:01:11.840 --> 1:01:15.760
 One of the big challenges of NumPy was I had to be backward compatible with both numeric

1:01:15.760 --> 1:01:19.040
 and numeric in order to allow both of those communities to come together.

1:01:19.040 --> 1:01:24.280
 There was a ton of work in creating that backward compatibility that also created echoes in

1:01:24.280 --> 1:01:25.560
 today's object.

1:01:25.560 --> 1:01:30.080
 Like some of the complexity in today's object is actually from that goal of backward compatibility

1:01:30.080 --> 1:01:34.720
 to these other communities, which if you didn't have that, you'd do something different,

1:01:34.720 --> 1:01:36.920
 which is instructive because a lot of things are there.

1:01:36.920 --> 1:01:38.960
 You think, what is that there for?

1:01:38.960 --> 1:01:43.960
 It's like, well, it's a remnant, it's an artifact of its historical existence.

1:01:43.960 --> 1:01:49.960
 By the way, I love the empathy and the lack of ego behind that because I feel...

1:01:49.960 --> 1:01:56.920
 You see that in the split, in the JavaScript frameworks, for example, the arbitrary branching.

1:01:56.920 --> 1:02:01.240
 I think in order to unite people, you have to kind of put your ego aside and truly listen

1:02:01.240 --> 1:02:02.240
 to others.

1:02:02.240 --> 1:02:03.240
 You do.

1:02:03.240 --> 1:02:04.960
 What do you love about Numeric?

1:02:04.960 --> 1:02:06.680
 What do you love about numeric?

1:02:06.680 --> 1:02:07.680
 Actually get a sense.

1:02:07.680 --> 1:02:11.520
 I was talking about languages earlier, sort of empathize to the culture of the people

1:02:11.520 --> 1:02:21.360
 that love something about this particular API, the naming style, or the usage patterns,

1:02:21.360 --> 1:02:28.680
 and truly understand them so that you can create that same draw in the united thing.

1:02:28.680 --> 1:02:29.680
 I completely agree.

1:02:29.680 --> 1:02:32.480
 You have to also have enough passion that you'll do it.

1:02:32.480 --> 1:02:37.120
 It can't be just like a perfunctory, oh yes, I'm really illicit to you, and then I'm not

1:02:37.120 --> 1:02:38.520
 really that excited about it.

1:02:38.520 --> 1:02:43.760
 So it really is an aspect, it's a philosophical, like there's a filia, there's a love of esteeming

1:02:43.760 --> 1:02:48.960
 of others that's actually at the heart of what is sort of a life philosophy for me,

1:02:48.960 --> 1:02:52.960
 right, that I'm constantly pursuing, and that helped, absolutely helped.

1:02:52.960 --> 1:02:57.800
 Makes me wonder in a philosophical, like looking at human civilization as one object, it makes

1:02:57.800 --> 1:03:01.880
 me wonder how we can copy and paste Travis's in the story.

1:03:01.880 --> 1:03:03.480
 Well, in some aspects, maybe.

1:03:03.480 --> 1:03:05.440
 Some aspects, right, right, exactly.

1:03:05.440 --> 1:03:09.840
 Well, it's a good question, how do we teach this, how do we encourage it, how do we lift

1:03:09.840 --> 1:03:10.840
 it?

1:03:10.840 --> 1:03:15.720
 Because so much of the software world, it's giant communities, right, but it seems like

1:03:15.720 --> 1:03:18.240
 so much is moved by little individuals.

1:03:18.240 --> 1:03:26.160
 You talk about Linus Tarvald, it's like, could you have had Linux without him?

1:03:26.160 --> 1:03:27.160
 Could you?

1:03:27.160 --> 1:03:28.160
 Yeah, Guido and Python.

1:03:28.160 --> 1:03:29.160
 Guido and Python.

1:03:29.160 --> 1:03:30.160
 Guido and Python.

1:03:30.160 --> 1:03:32.920
 I mean, in the scipy community in particular, I said we wanted to build this big thing,

1:03:32.920 --> 1:03:36.600
 but ultimately we didn't, what happened is we had Mavericks and champions like John Hunter

1:03:36.600 --> 1:03:41.480
 who created Map.lib, we had Fernando Perez who created iPython, and so we sort of inspired

1:03:41.480 --> 1:03:46.320
 each other, but in the credit, there's sort of a culture of this selfless, giving the

1:03:46.320 --> 1:03:54.280
 stewardship mentality, as opposed to ownership mentality, but stewardship and community focused,

1:03:54.280 --> 1:03:59.000
 community focused, but intentional work, like not waiting for everybody else to do the work,

1:03:59.000 --> 1:04:02.080
 but you're doing it for the benefit of others and not worried about what you're going to

1:04:02.080 --> 1:04:03.080
 get.

1:04:03.080 --> 1:04:05.920
 You're not worried about the credit, you're not worried about what you're going to get,

1:04:05.920 --> 1:04:09.120
 you're worried about, I later realized that I have to worry a little about credit, not

1:04:09.120 --> 1:04:13.240
 because I want the credit, because I want people to understand what led to the results.

1:04:13.240 --> 1:04:18.640
 It's not about me, it's I want to understand this is what led to the result, so I think

1:04:18.640 --> 1:04:22.920
 doing, and this is what had no impact on the result, like let's promote, this is just like

1:04:22.920 --> 1:04:26.600
 you said, I want to promote the attributes that help make us better off.

1:04:26.600 --> 1:04:31.040
 How do we make more of West McKinney, like West McKinney was critical to the success

1:04:31.040 --> 1:04:35.920
 of Python because of his creation of pandas, which is the roots of that, we're all the

1:04:35.920 --> 1:04:43.640
 way back in American num array and NumPy, where NumPy created an array of records, West started

1:04:43.640 --> 1:04:49.080
 to use that almost like a data frame, except it's an array of records, and data frame,

1:04:49.080 --> 1:04:53.800
 the challenge is, okay, if you want to augment it at another column, you have to insert, you

1:04:53.800 --> 1:04:57.400
 have to do all this memory movement to insert a column, whereas data frames became, oh, I'm

1:04:57.400 --> 1:05:03.440
 going to have a loose collection of arrays, so it's a record of arrays that is the heart

1:05:03.440 --> 1:05:04.440
 of a data frame.

1:05:04.440 --> 1:05:08.280
 And we thought about that back in the memory days, but West ended up doing the work to

1:05:08.280 --> 1:05:12.720
 build it, and then also the operations that were relevant for data processing.

1:05:12.720 --> 1:05:16.840
 What I noticed is just that each of these little things creates just another tick, another

1:05:16.840 --> 1:05:22.080
 up, so NumPy ultimately took a little while, about six months in, people started joining

1:05:22.080 --> 1:05:29.320
 me, Francesc Alted, Robert Kern, Charles Harris, and these people are many of the unsung

1:05:29.320 --> 1:05:30.520
 heroes, I would say.

1:05:30.520 --> 1:05:35.320
 People who are, they sometimes don't get the credit they deserve, because they were critical

1:05:35.320 --> 1:05:40.680
 both to support, it's hard and you need some support, people need support, and I needed

1:05:40.680 --> 1:05:44.320
 just encouragement, and they were helping, encouraged by contributing.

1:05:44.320 --> 1:05:49.960
 And once, the big thing for me was when John Hunter, he had previously done kind of a simple

1:05:49.960 --> 1:05:53.680
 thing called numerics to kind of, you know, between numeric and nummery, he had a little

1:05:53.680 --> 1:05:58.000
 high level tool that would just select each one for Matplotlib.

1:05:58.000 --> 1:06:03.240
 In 2006, he finally said, we're going to just make NumPy the dependency of Matplotlib.

1:06:03.240 --> 1:06:07.560
 As soon as he did that, and I remember specifically when he did that, I said, okay, we've done

1:06:07.560 --> 1:06:08.560
 it.

1:06:08.560 --> 1:06:11.480
 Like, that was when I knew we had to see success.

1:06:11.480 --> 1:06:14.960
 Before then, it was still, you know, doing sure, but that kind of started a roller coaster

1:06:14.960 --> 1:06:20.920
 and then 2006 to 2009, and then I've been floored by what it's done.

1:06:20.920 --> 1:06:25.800
 Like, I knew it would help, I had no idea how much it would help, right.

1:06:25.800 --> 1:06:30.760
 And it has to do with, again, the language thing, it just, people started to think in

1:06:30.760 --> 1:06:33.320
 terms of NumPy.

1:06:33.320 --> 1:06:36.680
 And that opened up a whole new way of thinking.

1:06:36.680 --> 1:06:43.960
 And part of the story that you kind of mentioned, but maybe you can elaborate, it seems like

1:06:43.960 --> 1:06:53.080
 at some point in this story, Python took over science and data science, and not bigger

1:06:53.080 --> 1:07:01.800
 than that, the scientific community started to think like programmers or started to utilize

1:07:01.800 --> 1:07:07.440
 the tools of computers to do, like at a scale that wasn't done with Fortran, like at this

1:07:07.440 --> 1:07:12.000
 gigantic scale, they started to opening their heart, and then Python was the thing.

1:07:12.000 --> 1:07:16.240
 I mean, there's a few other competitors, I guess, but Python, I think, really, really

1:07:16.240 --> 1:07:17.240
 took over.

1:07:17.240 --> 1:07:18.240
 I agree.

1:07:18.240 --> 1:07:20.360
 There's a lot of stories here that are kind of during this journey, because this is sort

1:07:20.360 --> 1:07:23.360
 of the start of this journey in 2005, 2006.

1:07:23.360 --> 1:07:29.720
 So my tenure committee, I applied for tenure in 2006, 2007, it came back, I split the department.

1:07:29.720 --> 1:07:31.240
 I was very polarizing.

1:07:31.240 --> 1:07:34.400
 I had some huge fans, and then some people said, no way, right.

1:07:34.400 --> 1:07:36.880
 So it was very, I was a polarizing figure in the department.

1:07:36.880 --> 1:07:39.000
 It went all the way up to the university president.

1:07:39.000 --> 1:07:44.400
 Ultimately, my department chair had this way, and they didn't say no, they said, come back

1:07:44.400 --> 1:07:46.400
 in two years and do it again.

1:07:46.400 --> 1:07:53.400
 And I went, at that point, I was like, I had this interest in entrepreneurship, this interest

1:07:53.400 --> 1:07:59.760
 in not the academic circles, not the, like, how do we make industry work?

1:07:59.760 --> 1:08:05.600
 So I do have to give credit to that exploration of economics, because that led me, oh, I had

1:08:05.600 --> 1:08:09.680
 a lot of opinions, I was actually very libertarian at the time.

1:08:09.680 --> 1:08:14.560
 And I still have some libertarian trends, but I'm more of a, I'm more of a collectivist

1:08:14.560 --> 1:08:15.560
 libertarian.

1:08:15.560 --> 1:08:19.240
 So you value broadly, philosophically, freedom?

1:08:19.240 --> 1:08:23.520
 Value broadly, philosophically, freedom, but I also understand the power of communities,

1:08:23.520 --> 1:08:26.440
 like the power of collective behavior.

1:08:26.440 --> 1:08:29.920
 And so what's that balance, right, that makes sense?

1:08:29.920 --> 1:08:33.440
 So by the time I was just, I got to go out and explore this entrepreneurial world.

1:08:33.440 --> 1:08:39.040
 When I left academia, I said, no thanks, called my friend, Eric, here, who had, his company

1:08:39.040 --> 1:08:43.280
 was going, I said, hey, could I join you and start this trend?

1:08:43.280 --> 1:08:46.800
 And he, at that time, they were usually inspired by a lot, they were trying to get clients,

1:08:46.800 --> 1:08:48.800
 and so I came down to Texas.

1:08:48.800 --> 1:08:53.360
 And in Texas is where I sort of, it's my entrepreneur world, right?

1:08:53.360 --> 1:08:57.400
 I left academia and went to entrepreneur world in 2007.

1:08:57.400 --> 1:09:01.880
 So moved here in 2007, kind of took a leap, knew nothing really about business, knew nothing

1:09:01.880 --> 1:09:05.240
 about a lot of stuff there.

1:09:05.240 --> 1:09:09.200
 There's, you know, for a long time, I've kept some connections to a lot of academics, because

1:09:09.200 --> 1:09:10.200
 I still value it.

1:09:10.200 --> 1:09:15.160
 I still love the scientific tradition, I still value the essence and the soul and the heart

1:09:15.160 --> 1:09:17.680
 of what is possible.

1:09:17.680 --> 1:09:23.840
 Don't like a lot of the administration and the kind of, we can go into detail about why

1:09:23.840 --> 1:09:26.320
 and where and how this happens, what are the challenges?

1:09:26.320 --> 1:09:32.640
 I mean, I don't know, but I'm with you, so I'm still affiliated with MIT, I still love

1:09:32.640 --> 1:09:40.600
 MIT, because there's magic there, and there's people I talk to, like researchers, faculty,

1:09:40.600 --> 1:09:46.320
 in those conversations and the white board and just the conversation, that's magic there.

1:09:46.320 --> 1:09:52.960
 All the other stuff, the administration, all that kind of stuff, seems to, you don't want

1:09:52.960 --> 1:09:59.160
 to say too harshly criticized sort of bureaucracies, but there's a lag that seems to get in the

1:09:59.160 --> 1:10:01.080
 way of the magic.

1:10:01.080 --> 1:10:07.920
 And I don't, I'm still have a lot of hope that that can change, because I don't often

1:10:07.920 --> 1:10:12.920
 see that particular type of magic elsewhere in the industry.

1:10:12.920 --> 1:10:18.600
 So like we need that, and we need that flame going, and it's the same thing as exactly

1:10:18.600 --> 1:10:23.840
 as you said, it has the same kind of elements like the open source community does.

1:10:23.840 --> 1:10:29.200
 But then if you, like the reason I stepped away, the reason I'm here, just like you did

1:10:29.200 --> 1:10:33.840
 in Austin is like, if I want to build one robot, I'll stay at MIT, but if I want to

1:10:33.840 --> 1:10:41.120
 build millions and make money enough to work and explore the magic of that, then you can't.

1:10:41.120 --> 1:10:43.520
 And I think that dance is...

1:10:43.520 --> 1:10:48.800
 The translational dance has been lost a bit, and there's a lot of reasons for that.

1:10:48.800 --> 1:10:53.960
 I'm certainly not an expert on this stuff, I can opine like anybody else, but I realized

1:10:53.960 --> 1:10:58.600
 that I wanted to explore entrepreneurship, and really figure out, and it's been a driving

1:10:58.600 --> 1:11:06.600
 passion for 20 years, 20, 25 years, how do we connect capital markets and company, because

1:11:06.600 --> 1:11:11.240
 again, I fell in love with the notion, oh, profit seeking on its own is not a bad thing.

1:11:11.240 --> 1:11:18.000
 It's actually a coordination mechanism for allocating resources that in an emergent way,

1:11:18.000 --> 1:11:20.760
 that respects everybody's opinions.

1:11:20.760 --> 1:11:22.400
 So this is actually powerful.

1:11:22.400 --> 1:11:27.360
 So I say all the time, when I make a company and we do something that makes profit, what

1:11:27.360 --> 1:11:30.640
 we're saying is, hey, we're collecting of the world's resources and voluntarily people

1:11:30.640 --> 1:11:34.080
 are asking us to do something that they like, and that's a huge deal.

1:11:34.080 --> 1:11:37.840
 And so I really liked that energy, so that's what I came to do and to learn and to try

1:11:37.840 --> 1:11:38.840
 to figure out.

1:11:38.840 --> 1:11:41.560
 I've been kind of stumbling through for the past 14 years.

1:11:41.560 --> 1:11:42.560
 And that's 2007.

1:11:42.560 --> 1:11:43.560
 2007, yeah.

1:11:43.560 --> 1:11:45.040
 And so you were still working on an opine.

1:11:45.040 --> 1:11:46.760
 So no pie was just emerging, right?

1:11:46.760 --> 1:11:47.760
 Just emerging.

1:11:47.760 --> 1:11:52.400
 One of the things I'd done, it's worth mentioning because it emphasized the exploratory nature

1:11:52.400 --> 1:11:53.400
 of my thinking at the time.

1:11:53.400 --> 1:11:55.200
 I said, well, I don't know how to fund this thing.

1:11:55.200 --> 1:11:58.000
 I've got a graduate student I'm paying for, and I've got no funding for him.

1:11:58.000 --> 1:12:02.800
 And I had done some fundraising from the public to try to get public fundraising from my lab.

1:12:02.800 --> 1:12:06.280
 I didn't really want to go out and just do the fundraising circuit the way it's traditionally

1:12:06.280 --> 1:12:07.280
 done.

1:12:07.280 --> 1:12:10.800
 So I wrote a book, and I said, I'm going to write a book, and I'm going to charge for

1:12:10.800 --> 1:12:11.800
 it.

1:12:11.800 --> 1:12:12.800
 It was called Guide to NumPy.

1:12:12.800 --> 1:12:16.720
 And so ultimately NumPy became documentation driven development because I basically wrote

1:12:16.720 --> 1:12:19.880
 the book and made sure the stuff worked, so the book would work.

1:12:19.880 --> 1:12:23.160
 So it really helped actually make NumPy become a thing.

1:12:23.160 --> 1:12:29.400
 So writing that book, and it was not a page turner, Guide to NumPy is not a book you pick

1:12:29.400 --> 1:12:31.640
 up and go, oh, this is great, over the fire.

1:12:31.640 --> 1:12:34.840
 But it's where you could find the details, like how did all this work?

1:12:34.840 --> 1:12:36.600
 And a lot of people love that book.

1:12:36.600 --> 1:12:40.800
 And so a lot of people ended up, but I said, look, I need to, so I'm going to charge for

1:12:40.800 --> 1:12:41.800
 it.

1:12:41.800 --> 1:12:43.880
 And I got some flak for that, not that much.

1:12:43.880 --> 1:12:50.880
 Just probably five angry messages, people yelling at me saying I was a bad guy for charging

1:12:50.880 --> 1:12:51.880
 for this book.

1:12:51.880 --> 1:12:52.880
 It was one of them which is dumb.

1:12:52.880 --> 1:12:53.880
 I'm just kidding.

1:12:53.880 --> 1:12:58.640
 No, I haven't really had any interaction with him personally, like I said.

1:12:58.640 --> 1:13:02.320
 But there were a few, but I'm just surprisingly not, there were actually a lot of people

1:13:02.320 --> 1:13:03.320
 like, no, it's fine.

1:13:03.320 --> 1:13:04.320
 You can charge for a book.

1:13:04.320 --> 1:13:05.320
 That's no big deal.

1:13:05.320 --> 1:13:08.600
 That's the way you can try to make money around open source.

1:13:08.600 --> 1:13:12.360
 So what I did, what I did in an interesting way, I said, well, you know, kind of my idea

1:13:12.360 --> 1:13:14.280
 is around IP law and stuff.

1:13:14.280 --> 1:13:15.280
 I love the idea.

1:13:15.280 --> 1:13:16.280
 You can share something.

1:13:16.280 --> 1:13:17.280
 You can spread it.

1:13:17.280 --> 1:13:20.920
 Like once it's, the fact that you have a thing and copying is free, but the creation

1:13:20.920 --> 1:13:21.920
 is not free.

1:13:21.920 --> 1:13:25.400
 So how do we, how do you fund the creation and allow the copying, right?

1:13:25.400 --> 1:13:28.560
 And the software is a little more complicated than that because creation is actually a continuous

1:13:28.560 --> 1:13:29.560
 thing.

1:13:29.560 --> 1:13:32.600
 You know, it's not like you build a widget that's done, it's sort of a process of emerging

1:13:32.600 --> 1:13:34.760
 and continuing to create.

1:13:34.760 --> 1:13:37.480
 But I wrote the book and had this market determined price thing.

1:13:37.480 --> 1:13:39.600
 I said, look, I need, I think I said 250,000.

1:13:39.600 --> 1:13:44.440
 If I make 250,000 from this book, it's, it'll, I'll make it free.

1:13:44.440 --> 1:13:48.160
 So as soon as I get that much money, or I said five years, right?

1:13:48.160 --> 1:13:49.160
 So there's a time limit.

1:13:49.160 --> 1:13:50.160
 Like forever.

1:13:50.160 --> 1:13:51.160
 Cool.

1:13:51.160 --> 1:13:52.160
 I didn't know this story.

1:13:52.160 --> 1:13:53.160
 Yeah.

1:13:53.160 --> 1:13:54.160
 So I released it on this.

1:13:54.160 --> 1:13:56.960
 And it's actually interesting because one of the people who also thought that was interesting

1:13:56.960 --> 1:14:01.960
 ended up being Chris White, who was the director of DARPA project that we got funding

1:14:01.960 --> 1:14:05.360
 through at Anaconda, and the reason he even called us back is because he remembered my

1:14:05.360 --> 1:14:08.240
 name from this book and he thought that was interesting.

1:14:08.240 --> 1:14:12.760
 And so even though we hadn't gone to the demo days, we applied and the people said, yeah,

1:14:12.760 --> 1:14:15.160
 nobody ever gets this without coming to the demo day first.

1:14:15.160 --> 1:14:18.840
 It's the first time I've seen it, but it's because I knew, you know, Chris had done this

1:14:18.840 --> 1:14:19.840
 and had this interaction.

1:14:19.840 --> 1:14:21.680
 So it did have impact.

1:14:21.680 --> 1:14:23.880
 I was actually really, really pleased by the result.

1:14:23.880 --> 1:14:27.480
 I mean, I ended up, I ended up in three years, I mean, 90,000.

1:14:27.480 --> 1:14:29.480
 So sold 30,000 copies by myself.

1:14:29.480 --> 1:14:33.120
 I just put it up on, you know, used PayPal and sold it.

1:14:33.120 --> 1:14:38.480
 And those are my first tastes of kind of, okay, this can work to some degree.

1:14:38.480 --> 1:14:40.520
 And I, you know, all over the world, right?

1:14:40.520 --> 1:14:44.600
 From Germany to Japan to, it was actually, it did work.

1:14:44.600 --> 1:14:49.200
 And so I appreciated the fact that PayPal existed and had a way to make, to get the money.

1:14:49.200 --> 1:14:51.280
 The distribution was simple.

1:14:51.280 --> 1:14:53.600
 This is pre Amazon book stuff.

1:14:53.600 --> 1:14:55.320
 So it was just publishing a website.

1:14:55.320 --> 1:14:58.920
 It was the popularity of sci fi emerging and getting company usage.

1:14:58.920 --> 1:15:03.400
 I ended up not letting it go the five years and not trying to make the full amount because,

1:15:03.400 --> 1:15:05.280
 you know, a year and a half later, I was at Enthought.

1:15:05.280 --> 1:15:07.840
 I had left academia as an Enthought and I kind of had a full time job.

1:15:07.840 --> 1:15:10.880
 And then actually what happened is the documentation people, there's a group that said, hey, we

1:15:10.880 --> 1:15:13.840
 want to do documentation for sci fi as a collective.

1:15:13.840 --> 1:15:18.080
 And they were essentially needing the stuff in the book.

1:15:18.080 --> 1:15:19.080
 Right.

1:15:19.080 --> 1:15:21.840
 And so they kind of asked, hey, can we just use the stuff in your book?

1:15:21.840 --> 1:15:24.240
 And at that point I said, yeah, I'll just open it up.

1:15:24.240 --> 1:15:27.360
 So that's, but it has served its purpose.

1:15:27.360 --> 1:15:31.040
 And the money that I made actually funded my grad student.

1:15:31.040 --> 1:15:35.280
 Like it was actually, you know, I paid him $25,000 a year out of that money.

1:15:35.280 --> 1:15:39.640
 The funny thing is if you do a very similar kind of experiment now with NumPy or something

1:15:39.640 --> 1:15:42.440
 like it, you could probably make a lot more.

1:15:42.440 --> 1:15:44.000
 It's probably true.

1:15:44.000 --> 1:15:46.200
 Because of the tooling and the community building.

1:15:46.200 --> 1:15:47.200
 Yeah, I agree.

1:15:47.200 --> 1:15:51.400
 Like the, and social media, there's just a virality to that kind of idea.

1:15:51.400 --> 1:15:52.400
 I agree.

1:15:52.400 --> 1:15:53.400
 There'd be things to do.

1:15:53.400 --> 1:15:54.400
 I've thought about that.

1:15:54.400 --> 1:15:57.480
 I really had thought about a couple of books or a couple of things that could be done there.

1:15:57.480 --> 1:15:59.120
 And I just haven't, right?

1:15:59.120 --> 1:16:03.640
 I even, I tried to hire a ghostwriter this year too to speak if I could help, but it

1:16:03.640 --> 1:16:04.640
 didn't.

1:16:04.640 --> 1:16:08.480
 Part of my problem is this, I've been so excited by a number of things that stemmed

1:16:08.480 --> 1:16:09.480
 in from that.

1:16:09.480 --> 1:16:14.000
 Like, so I came here, worked at and thought for four years, graciously, you know, Eric

1:16:14.000 --> 1:16:16.320
 made me president and we started to work closely together.

1:16:16.320 --> 1:16:19.520
 We actually helped him buy out his partner.

1:16:19.520 --> 1:16:20.800
 It didn't end great.

1:16:20.800 --> 1:16:24.520
 Like unfortunately Eric and I aren't friends now.

1:16:24.520 --> 1:16:25.520
 I still respect him.

1:16:25.520 --> 1:16:30.120
 I have a lot, you know, I wish we were, but he didn't like the fact that Peter and I

1:16:30.120 --> 1:16:31.120
 started Anaconda.

1:16:31.120 --> 1:16:32.120
 Right?

1:16:32.120 --> 1:16:36.840
 That was not, I mean, so there's two sides of that story, so I'm not going to go into

1:16:36.840 --> 1:16:37.840
 it, right?

1:16:37.840 --> 1:16:38.840
 Sure.

1:16:38.840 --> 1:16:42.320
 But you, as human beings and you wish you still could be friends.

1:16:42.320 --> 1:16:43.320
 I do.

1:16:43.320 --> 1:16:44.320
 I do.

1:16:44.320 --> 1:16:45.320
 It saddens me.

1:16:45.320 --> 1:16:51.600
 I mean, that's a story of great minds building great companies.

1:16:51.600 --> 1:16:55.240
 Somehow it's sad that when there's that kind of...

1:16:55.240 --> 1:16:57.360
 And I hold him in esteem.

1:16:57.360 --> 1:16:58.360
 I'm grateful for him.

1:16:58.360 --> 1:17:00.360
 I think they're doing, you know, their thoughts still exist.

1:17:00.360 --> 1:17:02.560
 They're doing great work helping scientists.

1:17:02.560 --> 1:17:05.160
 They still run the SciPy conference.

1:17:05.160 --> 1:17:08.760
 They're in the, they have an R&D platform they're selling now that's a tool that you

1:17:08.760 --> 1:17:10.200
 can go get today, right?

1:17:10.200 --> 1:17:16.440
 So they've been, Enthought has played a role in the SciPy, in supporting the community

1:17:16.440 --> 1:17:18.320
 around SciPy, I would say.

1:17:18.320 --> 1:17:24.200
 They ended up not being able to, they ended up building a tool suite to write GUI applications.

1:17:24.200 --> 1:17:26.840
 Like that's where they could actually make that the business could work.

1:17:26.840 --> 1:17:30.680
 And so the supporting SciPy and NumPy itself wasn't as possible.

1:17:30.680 --> 1:17:31.680
 Like they didn't, they try.

1:17:31.680 --> 1:17:34.560
 I mean, it was not just because, it was just because the business aspect.

1:17:34.560 --> 1:17:38.240
 So, and then I wanted to build a company that could do, that could get venture funding,

1:17:38.240 --> 1:17:39.240
 right?

1:17:39.240 --> 1:17:40.240
 Better for worse.

1:17:40.240 --> 1:17:41.240
 I mean, that's a longer story.

1:17:41.240 --> 1:17:42.520
 We could talk a lot about that, but.

1:17:42.520 --> 1:17:44.320
 And that's, that's where Anaconda came to be.

1:17:44.320 --> 1:17:45.320
 That's where Anaconda came to be.

1:17:45.320 --> 1:17:50.240
 So let me, let me ask you, it's a little bit for fun because you built this amazing thing.

1:17:50.240 --> 1:17:56.560
 And so let's, let's talk about like an old warrior looking over old battles.

1:17:56.560 --> 1:18:04.280
 You've, you know, there's a sad letter in 2012 that you wrote to the NumPy mailing list

1:18:04.280 --> 1:18:09.320
 the knowledge that you're leaving NumPy and some of the things you've listed and some,

1:18:09.320 --> 1:18:14.560
 some of the things you regret or not regret necessarily, but some things to think about.

1:18:14.560 --> 1:18:20.320
 If you could go back and you could fix stuff about NumPy or both sort of in a personal

1:18:20.320 --> 1:18:24.640
 level, but also like looking forward, what kind of things would you like to see changed?

1:18:24.640 --> 1:18:25.640
 Good questions.

1:18:25.640 --> 1:18:29.920
 So I think there's technical questions and social questions right there.

1:18:29.920 --> 1:18:34.920
 First of all, you know, I wrote NumPy as a service and I spent a lot of time doing it

1:18:34.920 --> 1:18:37.000
 and then other people came help make it happen.

1:18:37.000 --> 1:18:39.920
 NumPy succeeded because of the work of a lot of people, right?

1:18:39.920 --> 1:18:43.920
 So it's, it's important to be able to understand that I'm grateful for the opportunity at the

1:18:43.920 --> 1:18:47.880
 role I had, I could play and grateful that things I did had an impact, but they only

1:18:47.880 --> 1:18:52.280
 had the impact they had because the other people that came to the, to the story.

1:18:52.280 --> 1:18:56.480
 And so they were essential, but the way data types were handled, the way data types we

1:18:56.480 --> 1:19:04.080
 had array scalars, for example, that are really just a substitute for a type concept, right?

1:19:04.080 --> 1:19:09.480
 So we had array scalars or actual Python objects so that there's for every, for a 32 bit float

1:19:09.480 --> 1:19:15.760
 or a 16 bit float or a 16 bit integer, Python doesn't have a natural, it's just a one integer

1:19:15.760 --> 1:19:16.760
 has one float.

1:19:16.760 --> 1:19:21.680
 Well, what about these lower precision types, these larger precision types?

1:19:21.680 --> 1:19:26.160
 So we had them in NumPy so that you could have a collection of them, but then have an object

1:19:26.160 --> 1:19:28.880
 in Python that was one of them.

1:19:28.880 --> 1:19:33.240
 And there's questions about like in retrospect, I wouldn't have created those of an improved

1:19:33.240 --> 1:19:38.400
 the type system and like made the type system actually a Python type system, as opposed

1:19:38.400 --> 1:19:41.200
 to currently it's a Python one level type system.

1:19:41.200 --> 1:19:44.200
 I don't know if you know the difference between Python one, Python two, it's kind of technical

1:19:44.200 --> 1:19:48.080
 kind of depth, but Python two, one of its big things that Guido did, it was really brilliant.

1:19:48.080 --> 1:19:55.040
 It was he actually Python one, all classes, new objects were, were one.

1:19:55.040 --> 1:19:56.920
 So he was a user wrote a class.

1:19:56.920 --> 1:20:02.080
 It was an instance of a single Python type called the, called the class type, right?

1:20:02.080 --> 1:20:08.280
 In Python two, he used a meta typing hook to actually go, oh, we can extend this and have

1:20:08.280 --> 1:20:10.360
 users write classes that are new types.

1:20:10.360 --> 1:20:14.480
 So he was able to have your user classes be actual types and the Python type system got

1:20:14.480 --> 1:20:16.440
 a lot more rich.

1:20:16.440 --> 1:20:19.200
 I barely understood that at the time that NumPy was written.

1:20:19.200 --> 1:20:24.480
 And so I essentially in Python and NumPy created a type system that was Python one era.

1:20:24.480 --> 1:20:30.560
 It was every, every D type is an instance of the same type, as opposed to having new

1:20:30.560 --> 1:20:34.040
 D types be really just Python types with additional metadata.

1:20:34.040 --> 1:20:35.520
 What's the cost of that?

1:20:35.520 --> 1:20:37.240
 Is it efficiencies or usability?

1:20:37.240 --> 1:20:39.000
 It's usability primarily.

1:20:39.000 --> 1:20:41.400
 The cost isn't really efficiency.

1:20:41.400 --> 1:20:45.200
 It's the fact that it's clumsy to create new types.

1:20:45.200 --> 1:20:46.200
 It's hard.

1:20:46.200 --> 1:20:49.440
 And then one of the challenges you want to create new types, you want to quaternion type

1:20:49.440 --> 1:20:54.280
 or you want to add a new, you know, posit type or you want to.

1:20:54.280 --> 1:20:55.280
 So it's hard.

1:20:55.280 --> 1:21:00.640
 Now in the, and now if we had done that well, when NumPy came on the scene where we could

1:21:00.640 --> 1:21:05.240
 actually compile Python code, it would integrate with that type system much cleaner.

1:21:05.240 --> 1:21:08.520
 And now all of a sudden you could do gradual typing more easily.

1:21:08.520 --> 1:21:12.480
 You could actually have Python when you add NumPy plus better typing, could actually be

1:21:12.480 --> 1:21:16.800
 a, you'd smooth out a lot of rough edges.

1:21:16.800 --> 1:21:20.960
 But there's already, there's like, but are you talking about from the perspective of

1:21:20.960 --> 1:21:24.040
 developers within NumPy or users of NumPy?

1:21:24.040 --> 1:21:27.200
 Developers of new, not really users of NumPy so much.

1:21:27.200 --> 1:21:28.640
 It's the development of NumPy.

1:21:28.640 --> 1:21:33.480
 So you're thinking about like how to design NumPy so that it's contributors.

1:21:33.480 --> 1:21:34.480
 Yeah.

1:21:34.480 --> 1:21:36.480
 The contributors, it's easier.

1:21:36.480 --> 1:21:37.480
 It's easier.

1:21:37.480 --> 1:21:39.920
 It's less work to make it better and to keep it maintained.

1:21:39.920 --> 1:21:44.600
 And where that's impacted things, for example, is the GPU, like all of a sudden GPUs start

1:21:44.600 --> 1:21:48.440
 getting added and we don't have them in NumPy.

1:21:48.440 --> 1:21:50.600
 Like NumPy should just work on GPUs.

1:21:50.600 --> 1:21:54.080
 The fact that we have to, you'd have to download a whole other object called Koopi to have arrays

1:21:54.080 --> 1:21:57.080
 on GPUs is just an artifact of history.

1:21:57.080 --> 1:21:59.280
 Like there's no, there's no fundamental reason for it.

1:21:59.280 --> 1:22:04.400
 Well, that's really interesting if we could sort of go on that tangent briefly is you have

1:22:04.400 --> 1:22:10.840
 PyTorch and other library like TensorFlow that basically tried to mimic NumPy.

1:22:10.840 --> 1:22:11.840
 Yeah.

1:22:11.840 --> 1:22:16.520
 Like you've created a sort of platonic form of multi dimension.

1:22:16.520 --> 1:22:17.520
 Yeah.

1:22:17.520 --> 1:22:18.520
 Yeah.

1:22:18.520 --> 1:22:19.520
 Exactly.

1:22:19.520 --> 1:22:20.520
 Well, and the problem was they didn't realize that.

1:22:20.520 --> 1:22:21.520
 There were a lot of edges.

1:22:21.520 --> 1:22:24.280
 They were like, well, we should cut those out before we present it.

1:22:24.280 --> 1:22:29.480
 So I mean, I wonder if you can comment, is there like a difference between their implementations?

1:22:29.480 --> 1:22:34.360
 Do you wish that they were all using NumPy over, like in this abstraction on GPU?

1:22:34.360 --> 1:22:38.400
 And sorry to interrupt it, that there's GPUs, ASICs.

1:22:38.400 --> 1:22:40.200
 There might be other neuromorphic computing.

1:22:40.200 --> 1:22:44.120
 There might be other kind of, or the aliens will come with a new kind of computer, like

1:22:44.120 --> 1:22:50.160
 an abstraction that NumPy should just operate nicely over the things that are more and more

1:22:50.160 --> 1:22:54.360
 and smarter and smarter with this multi dimensional arrays.

1:22:54.360 --> 1:22:55.360
 Yeah.

1:22:55.360 --> 1:22:56.360
 Yeah.

1:22:56.360 --> 1:22:57.360
 There's several comments there.

1:22:57.360 --> 1:23:01.560
 We are working on something now called data dash apis.org, data dash api.org.

1:23:01.560 --> 1:23:02.720
 You can go there today.

1:23:02.720 --> 1:23:04.560
 And it's our answer.

1:23:04.560 --> 1:23:05.560
 It's my answer.

1:23:05.560 --> 1:23:06.560
 You know, it's not just me.

1:23:06.560 --> 1:23:11.520
 It's me and Rolf and Athen and Aaron and a lot of companies are helping us at Quonsite

1:23:11.520 --> 1:23:12.520
 Labs.

1:23:12.520 --> 1:23:17.320
 It's not unifying all the arrays, it's creating an API that is unified.

1:23:17.320 --> 1:23:20.840
 So we do care about this and we're trying to work through it.

1:23:20.840 --> 1:23:25.560
 I actually had the chance to go and meet with the TensorFlow team and the PyTorch team and

1:23:25.560 --> 1:23:31.640
 talk to them after exiting Anaconda, just talking about, because the first year after

1:23:31.640 --> 1:23:36.840
 leaving Anaconda in 2018, I became deeply aware of this and realized that, oh, the split

1:23:36.840 --> 1:23:41.920
 in the array community that exists today makes what I was concerned about in 2005 pretty

1:23:41.920 --> 1:23:44.440
 parochial.

1:23:44.440 --> 1:23:45.440
 It's a lot worse.

1:23:45.440 --> 1:23:46.440
 Right?

1:23:46.440 --> 1:23:50.960
 It's a lot worse than people, so perhaps the industry can sustain more stacks, right?

1:23:50.960 --> 1:23:54.160
 There's a lot of money, but it makes it a lot less efficient.

1:23:54.160 --> 1:23:58.920
 I mean, I've also learned to appreciate, it's okay to have some competitions, okay to have

1:23:58.920 --> 1:24:03.640
 different implementations, but it's better if you can at least refactor some parts.

1:24:03.640 --> 1:24:07.160
 I mean, you're going to have more efficient if you can refactor parts.

1:24:07.160 --> 1:24:11.440
 It's nice to have competition over things, over what it's nice to have competition.

1:24:11.440 --> 1:24:12.440
 They're innovative.

1:24:12.440 --> 1:24:13.440
 Yeah, innovative.

1:24:13.440 --> 1:24:19.720
 And then maybe on the infrastructure, whatever, however you define infrastructure, maybe it's

1:24:19.720 --> 1:24:21.440
 nice to have competition together.

1:24:21.440 --> 1:24:22.440
 Exactly.

1:24:22.440 --> 1:24:23.440
 I agree.

1:24:23.440 --> 1:24:24.600
 And I think, but it was interesting to hear the stories.

1:24:24.600 --> 1:24:29.160
 I mean, TensorFlow came out of the C++ library.

1:24:29.160 --> 1:24:33.640
 Jeff Dean wrote, I think, that was basically how they were doing inference, right?

1:24:33.640 --> 1:24:36.600
 And then they realized, oh, we could do this TensorFlow thing.

1:24:36.600 --> 1:24:42.120
 That C++ library, then what was interesting to me was the fact that both Google and Facebook

1:24:42.120 --> 1:24:45.880
 did not, it's not like they supported Python or NumPy initially, they just realized they

1:24:45.880 --> 1:24:46.880
 had to.

1:24:46.880 --> 1:24:50.560
 They came to this world and then all the users were like, hey, where's the NumPy interface?

1:24:50.560 --> 1:24:54.920
 Oh, and then they kind of came late to it and then they had these bolt ons.

1:24:54.920 --> 1:24:59.160
 TensorFlow's bolt on, I don't mean to offend, but it was so bad.

1:24:59.160 --> 1:25:04.840
 It's the first time that I'm usually, I mean, one of the challenges I have is I don't criticize

1:25:04.840 --> 1:25:10.000
 enough because in the sense that I don't give people input enough.

1:25:10.000 --> 1:25:13.600
 I think it's universally agreed upon that the bolt ons on TensorFlow work.

1:25:13.600 --> 1:25:14.600
 But I went to it.

1:25:14.600 --> 1:25:15.640
 It was a talk given at a Py...

1:25:15.640 --> 1:25:20.360
 My Orca in Spain and a guy, great guy, came and gave a talk and I said, you should never

1:25:20.360 --> 1:25:23.320
 show that IPI again at a PyData conference.

1:25:23.320 --> 1:25:25.640
 That was terrible.

1:25:25.640 --> 1:25:28.360
 You're taking this beautiful system we've created and you're corrupting all these poor

1:25:28.360 --> 1:25:32.880
 Python people, forcing them to write code like that or thinking they should.

1:25:32.880 --> 1:25:36.920
 Fortunately, they adopted Keras as their, and Keras is better.

1:25:36.920 --> 1:25:43.000
 And so Keras, TensorFlow is fine, is reasonable, but they bolted it on.

1:25:43.000 --> 1:25:44.000
 Facebook did too.

1:25:44.000 --> 1:25:50.120
 Facebook had their own C++ library for doing inference and they also had the same reaction.

1:25:50.120 --> 1:25:51.320
 They had to do this.

1:25:51.320 --> 1:25:55.360
 One big difference is Facebook, maybe because of the way it's situated in part of FAIR, part

1:25:55.360 --> 1:26:00.720
 of their research library, TensorFlow is definitely used and they couldn't just open it up and

1:26:00.720 --> 1:26:05.240
 let the community change what that is because I guess they were worried about disrupting

1:26:05.240 --> 1:26:07.160
 their operations.

1:26:07.160 --> 1:26:13.440
 Facebook's been much more open to having community input on the structure itself, whereas Google

1:26:13.440 --> 1:26:16.160
 and TensorFlow, they're really eager to have community users.

1:26:16.160 --> 1:26:19.240
 People use it and build the infrastructure, but it's much more walled.

1:26:19.240 --> 1:26:21.760
 It's harder to become a contributor to TensorFlow itself.

1:26:21.760 --> 1:26:26.440
 And it's also, this is a very difficult question to answer and don't mean to be throwing shade

1:26:26.440 --> 1:26:31.720
 at anybody, but you have to wonder, it's the Microsoft question of when you have a tool

1:26:31.720 --> 1:26:36.920
 like PyTorch or TensorFlow, how much are you tending to the hackers and how much are you

1:26:36.920 --> 1:26:39.280
 tending to the big corporate clients?

1:26:39.280 --> 1:26:40.280
 Correct.

1:26:40.280 --> 1:26:41.280
 Correct.

1:26:41.280 --> 1:26:46.920
 Do you tend to the millions of people that are giving you almost no money, or do you tend

1:26:46.920 --> 1:26:50.320
 to the few that are giving you a ton of money?

1:26:50.320 --> 1:26:54.480
 I tend to stand with the people.

1:26:54.480 --> 1:26:59.760
 I feel like if you nurture the hackers, you will make the right decisions in the long

1:26:59.760 --> 1:27:02.000
 term that will make the companies happy.

1:27:02.000 --> 1:27:03.000
 I lean that way too.

1:27:03.000 --> 1:27:04.000
 I totally agree.

1:27:04.000 --> 1:27:05.640
 But then you have to find the right dance.

1:27:05.640 --> 1:27:09.160
 But it's a balance, because you can lean to the hackers and run out of money.

1:27:09.160 --> 1:27:10.160
 Yeah, exactly.

1:27:10.160 --> 1:27:11.160
 Exactly.

1:27:11.160 --> 1:27:16.360
 Which has been some of the challenge I've faced in the sense that I would look at some

1:27:16.360 --> 1:27:20.520
 of the experiments, like NumPy, the fact that we have this split is a factor of I wasn't

1:27:20.520 --> 1:27:23.560
 able to collect more money towards NumPy development, right?

1:27:23.560 --> 1:27:29.120
 I mean, it didn't succeed in the early days of getting enough financial contribution to

1:27:29.120 --> 1:27:31.240
 NumPy, so they didn't really work on it, right?

1:27:31.240 --> 1:27:32.440
 I couldn't work on it full time.

1:27:32.440 --> 1:27:38.160
 I had to just catch an hour here, an hour there, and I basically not like that.

1:27:38.160 --> 1:27:41.280
 I've wanted to be able to do something about that for a long time and try to figure out

1:27:41.280 --> 1:27:45.480
 how, well, there's lots of ways, I mean, possibly one could say, you know, we had an offer from

1:27:45.480 --> 1:27:51.240
 Microsoft at early days of Anaconda, 2014, they offered to come buy us, right?

1:27:51.240 --> 1:27:55.320
 The problem was the right people at Microsoft didn't offer to buy us, and they were still,

1:27:55.320 --> 1:27:59.760
 it was really, we were like a second, they had really bought, they had just bought R,

1:27:59.760 --> 1:28:05.960
 the R company called, it was not R Studio, but it was another R company that was emergent,

1:28:05.960 --> 1:28:10.400
 and it was kind of a, well, we should also get a Python play, but they were really double

1:28:10.400 --> 1:28:11.840
 it down on R, right?

1:28:11.840 --> 1:28:12.840
 And so it was like...

1:28:12.840 --> 1:28:17.560
 It was where you would go to die, so it wasn't, it was before Saatcha was there.

1:28:17.560 --> 1:28:18.560
 Saatcha had just started.

1:28:18.560 --> 1:28:19.560
 Just started.

1:28:19.560 --> 1:28:20.560
 Right?

1:28:20.560 --> 1:28:23.200
 And the offer was coming from someone two levels down from him.

1:28:23.200 --> 1:28:24.200
 Got you.

1:28:24.200 --> 1:28:28.520
 So it would come from Scott Guthrie, so I got a chance to meet Scott Guthrie, great

1:28:28.520 --> 1:28:29.920
 guy, I like him.

1:28:29.920 --> 1:28:33.360
 If it offered to come from him, probably would be at Microsoft right now.

1:28:33.360 --> 1:28:34.360
 That'd be fascinating.

1:28:34.360 --> 1:28:38.960
 And that would be really nice, actually, especially given what Microsoft has since done for the

1:28:38.960 --> 1:28:40.440
 open source community and all those things.

1:28:40.440 --> 1:28:41.680
 Yes, I think they're doing well.

1:28:41.680 --> 1:28:43.920
 I really like some of the stuff they've been doing.

1:28:43.920 --> 1:28:47.920
 They're still working, and they've hired Guido now, and they've hired a lot of Python developers.

1:28:47.920 --> 1:28:49.920
 Wait, Guido's not at Microsoft?

1:28:49.920 --> 1:28:50.920
 Yeah.

1:28:50.920 --> 1:28:51.920
 I need to...

1:28:51.920 --> 1:28:55.520
 He retired, then he came out of retirement, and he's working on...

1:28:55.520 --> 1:28:58.040
 I was just talking to him, and he didn't mention this part.

1:28:58.040 --> 1:28:59.040
 Well...

1:28:59.040 --> 1:29:03.120
 I should have better to get this further, because I know he loved Dropbox, but I wasn't

1:29:03.120 --> 1:29:05.240
 sure what he was doing, or what he was up to.

1:29:05.240 --> 1:29:10.640
 Well, he was kind of saying he'd retire, but it's literally been five years since I last

1:29:10.640 --> 1:29:13.880
 sat down and really talked to Guido, right?

1:29:13.880 --> 1:29:16.760
 Guido's a technology expert, right?

1:29:16.760 --> 1:29:20.720
 So I came, I was excited because I'd finally figured out the type system for NumPy.

1:29:20.720 --> 1:29:23.680
 I wanted to kind of talk about that with him, and I kind of overwhelmed him.

1:29:23.680 --> 1:29:25.320
 Could you stay in that...

1:29:25.320 --> 1:29:29.520
 Just for a brief moment, because you're a fascinating person in the history of programming.

1:29:29.520 --> 1:29:31.440
 He is a fascinating person.

1:29:31.440 --> 1:29:37.440
 What have you learned from Guido about programming, about life?

1:29:37.440 --> 1:29:38.440
 Yeah, yeah.

1:29:38.440 --> 1:29:39.440
 A lot, actually.

1:29:39.440 --> 1:29:41.360
 I've been a fan of Guido's.

1:29:41.360 --> 1:29:42.560
 We have a chance to talk.

1:29:42.560 --> 1:29:47.240
 Some, I wouldn't say we talk all the time, not really at all, but we've talked enough

1:29:47.240 --> 1:29:48.240
 to...

1:29:48.240 --> 1:29:52.080
 In fact, when I first started NumPy, one of the first things I did was I asked Guido

1:29:52.080 --> 1:29:57.280
 for a meeting with him and Paul de Bois in San Mateo, and I went and met him for lunch.

1:29:57.280 --> 1:29:59.400
 Basically, to say, maybe we can actually...

1:29:59.400 --> 1:30:04.240
 Part of the strategy for NumPy was to get it into Python 3, and maybe be part of Python.

1:30:04.240 --> 1:30:06.880
 So we talked about that, and about that approach, right?

1:30:06.880 --> 1:30:07.880
 That's a cool conversation.

1:30:07.880 --> 1:30:09.280
 I would have loved to be a fly in the water.

1:30:09.280 --> 1:30:10.280
 That was good.

1:30:10.280 --> 1:30:13.720
 Over the years for Guido, I learned...

1:30:13.720 --> 1:30:15.680
 So he was open.

1:30:15.680 --> 1:30:19.840
 He was willing to listen to people's ideas, right, and over the years.

1:30:19.840 --> 1:30:24.160
 Now, generally, I'm not saying universally that's been true, but generally that's been

1:30:24.160 --> 1:30:25.160
 true.

1:30:25.160 --> 1:30:26.160
 So he's willing to listen.

1:30:26.160 --> 1:30:27.400
 He's willing to defer.

1:30:27.400 --> 1:30:29.120
 Like on the scientific side, he would just defer.

1:30:29.120 --> 1:30:33.000
 He didn't really always understand what we were doing, and he'd defer.

1:30:33.000 --> 1:30:37.880
 One place where he didn't enough was we missed a matrix multiply operator.

1:30:37.880 --> 1:30:42.360
 Like that finally got added to Python, but about 10 years later than it should have.

1:30:42.360 --> 1:30:46.960
 The reason was because nobody... it takes a lot of effort, and I learned this while

1:30:46.960 --> 1:30:48.120
 I was writing NumPy.

1:30:48.120 --> 1:30:49.120
 I also wrote tools to...

1:30:49.120 --> 1:30:53.400
 I became a Python dev, and I added some pieces to Python, like the memory view object.

1:30:53.400 --> 1:30:55.800
 I wanted the structure of NumPy into Python.

1:30:55.800 --> 1:30:59.880
 So we didn't get NumPy into Python, but we got the basic structure of it into Python,

1:30:59.880 --> 1:31:01.240
 so you could build on it.

1:31:01.240 --> 1:31:05.840
 Nobody did for a while, but eventually, database authors started to, and it's a lot better.

1:31:05.840 --> 1:31:06.840
 They did.

1:31:06.840 --> 1:31:11.480
 And also, Antoine Petrot and Stefan Krau actually fixed the memory view object, because I wrote

1:31:11.480 --> 1:31:16.000
 the underlying infrastructure in C, but the Python exposure was terrible until they came

1:31:16.000 --> 1:31:19.920
 in and fixed it, partly because I was writing NumPy, and NumPy was the Python exposure.

1:31:19.920 --> 1:31:22.840
 I didn't really care about if you didn't have NumPy installed.

1:31:22.840 --> 1:31:26.920
 Anyway, Guido opened up ideas, technologically brilliant.

1:31:26.920 --> 1:31:33.160
 I really got a lot of respect from when I saw what he did with this type class merger

1:31:33.160 --> 1:31:34.160
 thing.

1:31:34.160 --> 1:31:37.200
 It was actually tricky, and then willing to share.

1:31:37.200 --> 1:31:38.600
 Willing to share his ideas.

1:31:38.600 --> 1:31:42.320
 So the other thing, early on in 1998, I said I start wrote my first extension module.

1:31:42.320 --> 1:31:47.480
 The reason I could is because he wrote this blog post on how to do reference counting.

1:31:47.480 --> 1:31:50.120
 And without it, I would have been lost.

1:31:50.120 --> 1:31:53.320
 But he was willing to at least try to write this post.

1:31:53.320 --> 1:31:57.800
 And so he's been motivated, early on with Python, there's a computer science for everybody.

1:31:57.800 --> 1:32:01.480
 We're going to have this early on desire to, oh, maybe we should be pushing programming

1:32:01.480 --> 1:32:02.480
 to more people.

1:32:02.480 --> 1:32:05.800
 So he had this populist notion, I guess, or populist sense.

1:32:05.800 --> 1:32:12.040
 So there's a certain skill, and I've seen it in other people, too, of engaging with

1:32:12.040 --> 1:32:16.200
 contributors sufficiently to, because when somebody engages with you and wants to contribute

1:32:16.200 --> 1:32:18.480
 to you, if you ignore them, they go away.

1:32:18.480 --> 1:32:23.480
 So building that early contributor base requires real engagement with other people, and he

1:32:23.480 --> 1:32:24.480
 would do that.

1:32:24.480 --> 1:32:31.080
 Can you also comment on this tragic stepping down from his position as the benevolent

1:32:31.080 --> 1:32:38.080
 dictator for life over the war's, you know, the walrus operator, the walrus operator was

1:32:38.080 --> 1:32:39.080
 the last battle.

1:32:39.080 --> 1:32:43.720
 I don't know if that's the cause of it, but there's this, for people who don't know,

1:32:43.720 --> 1:32:49.600
 you can look up, there's the walrus operator, which is, looks like a colon and equal sign.

1:32:49.600 --> 1:32:51.120
 Yeah, colon, equal sign.

1:32:51.120 --> 1:32:57.640
 And it actually does maybe the thing that you, that an equal sign should be doing.

1:32:57.640 --> 1:32:58.640
 Yeah.

1:32:58.640 --> 1:32:59.640
 Maybe.

1:32:59.640 --> 1:33:00.640
 Right.

1:33:00.640 --> 1:33:05.440
 It's just historically, an equal sign means something else, it just means a Simon.

1:33:05.440 --> 1:33:09.760
 So he stepped down over this, what do you think about the pressure of leadership?

1:33:09.760 --> 1:33:14.000
 It's something that you mentioned, the letter I wrote in Empire of the Time, that was a

1:33:14.000 --> 1:33:19.720
 hard time actually, I mean, you know, there's been really hard times, it was hard, you know,

1:33:19.720 --> 1:33:20.960
 you get criticized, right?

1:33:20.960 --> 1:33:25.000
 And you get pushed, and you get, not everybody loves what you do, like anytime you do anything

1:33:25.000 --> 1:33:28.640
 that has impact at all, you're not universally loved, right?

1:33:28.640 --> 1:33:34.280
 You get some real critics, and that's an important energy because it's impossible for you to

1:33:34.280 --> 1:33:35.280
 do everything right.

1:33:35.280 --> 1:33:39.560
 You need people to be pushing, but sometimes people can get mean, right?

1:33:39.560 --> 1:33:44.040
 People can, I prefer to give people the benefit of the doubt, I don't immediately assume they

1:33:44.040 --> 1:33:46.000
 have bad intentions.

1:33:46.000 --> 1:33:49.360
 And maybe for other, you know, maybe that doesn't happen for everybody, they, for whatever

1:33:49.360 --> 1:33:53.280
 reason, their past, their experience of people, they sometimes have bad intentions, so they

1:33:53.280 --> 1:33:56.240
 immediately attribute to you bad intentions, they're like, where did this come from?

1:33:56.240 --> 1:34:00.680
 And I definitely open to criticism, but I think you're misinterpreting the whole point.

1:34:00.680 --> 1:34:06.000
 Because I would get that, you know, sort of when I started Anaconda, you know, I've been,

1:34:06.000 --> 1:34:10.160
 sometimes I say to people, I know I'm, I care enough about entrepreneurship to make some

1:34:10.160 --> 1:34:14.400
 open source people uncomfortable, and I care enough about open source to make investors

1:34:14.400 --> 1:34:15.400
 uncomfortable.

1:34:15.400 --> 1:34:20.040
 So I sort of, you know, create, you create kind of doubters on both sides.

1:34:20.040 --> 1:34:26.640
 So when you have, and this is just a plea to the listener and the public, I've noticed

1:34:26.640 --> 1:34:33.560
 this too, that there's a tendency in social media makes this worse, when you don't have

1:34:33.560 --> 1:34:39.400
 perfect information about the situation, you tend to fill the gaps with the worst possible,

1:34:39.400 --> 1:34:43.480
 or at least a bad story that fills those gaps.

1:34:43.480 --> 1:34:49.720
 And I think it's good to live life, maybe not fully naively, but filling in the gaps

1:34:49.720 --> 1:34:56.400
 with the, with the good, with the best, with the positive, with the hopeful explanation

1:34:56.400 --> 1:34:57.400
 of why you see this.

1:34:57.400 --> 1:35:02.400
 So if you see somebody like you trying to make money on a book about NumPy, there's

1:35:02.400 --> 1:35:05.040
 a million stories around that that are positive.

1:35:05.040 --> 1:35:10.880
 And those are good to think about, to project positive intent on the people.

1:35:10.880 --> 1:35:15.680
 Because for many reasons, usually because people are good, and they do have good intent.

1:35:15.680 --> 1:35:18.840
 And also when you project that positive intent, people will step up to that.

1:35:18.840 --> 1:35:19.840
 It's a great point.

1:35:19.840 --> 1:35:24.440
 It has this kind of viral nature to it.

1:35:24.440 --> 1:35:29.400
 And of course, what Twitter early on figured out on Facebook is that they can make a lot

1:35:29.400 --> 1:35:32.360
 of money and engagement from the negative.

1:35:32.360 --> 1:35:33.360
 Yes.

1:35:33.360 --> 1:35:36.560
 And so like there's this, we're fighting this mechanism, which is challenging.

1:35:36.560 --> 1:35:37.680
 It's like easier.

1:35:37.680 --> 1:35:38.760
 It's just easier to be.

1:35:38.760 --> 1:35:39.760
 To be negative.

1:35:39.760 --> 1:35:44.240
 And then for some reason, something in our mind really enjoys sharing that and getting,

1:35:44.240 --> 1:35:46.280
 getting all excited about the negativity.

1:35:46.280 --> 1:35:47.280
 We do.

1:35:47.280 --> 1:35:48.280
 Yeah.

1:35:48.280 --> 1:35:51.000
 It's a great mechanism perhaps that we're, we're going to eat and if we don't.

1:35:51.000 --> 1:35:52.000
 Yeah.

1:35:52.000 --> 1:35:53.000
 Exactly.

1:35:53.000 --> 1:35:54.720
 For us to be effective as a group of people in a software engineering project, you have

1:35:54.720 --> 1:35:56.840
 to project positive intent, I think.

1:35:56.840 --> 1:35:57.840
 I totally agree.

1:35:57.840 --> 1:35:58.840
 Totally agree.

1:35:58.840 --> 1:36:02.640
 And I think that's very, and so that happens in this, in the space, but Python has done

1:36:02.640 --> 1:36:05.840
 a reasonable job in the past, but here's a situation where I think it's, it started

1:36:05.840 --> 1:36:07.840
 to get this pressure where it didn't.

1:36:07.840 --> 1:36:10.440
 I was, I really didn't, I didn't know enough about what happened.

1:36:10.440 --> 1:36:12.160
 I've, you know, talked to several people about it.

1:36:12.160 --> 1:36:17.160
 And I know most of the steering committee members today, one, one person nominated me

1:36:17.160 --> 1:36:20.880
 for that role, but it's the wrong role for me right now, right?

1:36:20.880 --> 1:36:25.440
 I have a lot of respect for the Python developer space and the Python developers.

1:36:25.440 --> 1:36:30.000
 I also understand the gap between computer science Python developers and array programming

1:36:30.000 --> 1:36:31.280
 developers or science developers.

1:36:31.280 --> 1:36:34.640
 And in fact, Python succeeds in the array space.

1:36:34.640 --> 1:36:38.560
 The more it has people in that boundary and there's often very few, like I was playing

1:36:38.560 --> 1:36:43.760
 a role in that boundary and, you know, working like everything to try to keep up with the,

1:36:43.760 --> 1:36:45.600
 with the, what, even what Gita was saying.

1:36:45.600 --> 1:36:51.280
 Like I'm a C programmer, but not a computer scientist, like I was a engineer and physicist

1:36:51.280 --> 1:36:56.520
 and mathematician and I don't, I didn't always understand what they were talking about and

1:36:56.520 --> 1:36:58.480
 why they would have opinions the way they did.

1:36:58.480 --> 1:37:01.400
 So you know, you have to listen and try to understand, then you also have to explain

1:37:01.400 --> 1:37:03.640
 your point of view in a way they can understand.

1:37:03.640 --> 1:37:07.960
 And that takes a lot of work and that, that communication is always the challenge.

1:37:07.960 --> 1:37:10.640
 And it's just what we're describing here about the negativity is just another form

1:37:10.640 --> 1:37:11.640
 of that.

1:37:11.640 --> 1:37:12.640
 Like how do we come together?

1:37:12.640 --> 1:37:16.680
 And it does appear we were wired anyway to at least have a, there's a part of us that

1:37:16.680 --> 1:37:21.920
 will enemy, you know, friend, enemy and, and we see, yeah, it's like, why are we wiring

1:37:21.920 --> 1:37:22.920
 on the enemy front?

1:37:22.920 --> 1:37:23.920
 Yeah.

1:37:23.920 --> 1:37:24.920
 So, so why are we pushing that?

1:37:24.920 --> 1:37:26.960
 Why are we promoting that so deeply?

1:37:26.960 --> 1:37:28.760
 Assume friend until proven otherwise.

1:37:28.760 --> 1:37:29.760
 Yes.

1:37:29.760 --> 1:37:30.760
 Yes.

1:37:30.760 --> 1:37:34.120
 So because you have such a fascinating mind and all this, let me just ask you these questions.

1:37:34.120 --> 1:37:41.040
 So one interesting side on the Python history is the move from Python two to Python three.

1:37:41.040 --> 1:37:46.440
 You mentioned move from Python one to Python two, but the move from Python two to Python

1:37:46.440 --> 1:37:50.720
 three is a little bit interesting because it took a very long time.

1:37:50.720 --> 1:37:56.920
 It broke in quite a small way, backward compatibility, but even that small way seemed to have been

1:37:56.920 --> 1:37:58.760
 very painful for people.

1:37:58.760 --> 1:38:05.240
 Is there a lessons you draw from, from how long it took and how painful it seemed to

1:38:05.240 --> 1:38:06.240
 be?

1:38:06.240 --> 1:38:07.240
 Yeah, tons of lessons.

1:38:07.240 --> 1:38:11.920
 I mentioned here earlier that NumPy was written in 2005.

1:38:11.920 --> 1:38:17.320
 It was in 2005 that I actually went to Guido to talk about getting NumPy into Python three.

1:38:17.320 --> 1:38:20.120
 Like my strategy was to, oh, we were moving to Python three.

1:38:20.120 --> 1:38:21.120
 Let's have that be.

1:38:21.120 --> 1:38:25.520
 And it seems funny in retrospect because like, wait, Python three, that was in 2020, right,

1:38:25.520 --> 1:38:29.080
 when we finally ended support for Python two or at least 2017.

1:38:29.080 --> 1:38:33.240
 The reason it took a long time, a lot of time, I think it was because one of the things is

1:38:33.240 --> 1:38:40.440
 there wasn't much to like about Python three, 3.0, 3.1, it really wasn't until 3.3, like

1:38:40.440 --> 1:38:45.240
 I consider Python 3.3 to be Python 3.0, but it wasn't until Python 3.3 that I felt there's

1:38:45.240 --> 1:38:49.840
 enough stuff in it to make it worth anybody using it, right?

1:38:49.840 --> 1:38:52.640
 And then 3.4 started to be, oh, yeah, I want that.

1:38:52.640 --> 1:38:56.680
 And then 3.5 as the matrix move play operator, and now it's like, okay, we got to use that.

1:38:56.680 --> 1:39:00.120
 Plus the libraries that started leveraging some of the features of Python three.

1:39:00.120 --> 1:39:01.120
 Exactly.

1:39:01.120 --> 1:39:02.120
 Yeah.

1:39:02.120 --> 1:39:07.760
 And then there was, it was, but it also illustrated a truism that, you know, it's, when you have

1:39:07.760 --> 1:39:11.480
 inertia, when you have a group of people using something, it's really hard to move them away

1:39:11.480 --> 1:39:12.480
 from it.

1:39:12.480 --> 1:39:14.040
 You can't just change the world on them.

1:39:14.040 --> 1:39:16.840
 And Python three, you know, it made some, I think it fixed some things, Guido had always

1:39:16.840 --> 1:39:17.840
 hated it.

1:39:17.840 --> 1:39:18.840
 I don't think he didn't like the fact that print was a statement.

1:39:18.840 --> 1:39:19.840
 He wanted to make it a function.

1:39:19.840 --> 1:39:24.240
 But in some sense, that's a bit of gratuitous change to the language.

1:39:24.240 --> 1:39:30.240
 And you could argue, and there's people have, but there was, one of the challenges was there

1:39:30.240 --> 1:39:35.240
 wasn't enough features and too many just changes without features.

1:39:35.240 --> 1:39:40.440
 And so the empathy for the end user as to why they would switch wasn't, wasn't there.

1:39:40.440 --> 1:39:43.080
 I think also it illustrated just the funding realities.

1:39:43.080 --> 1:39:44.560
 Like Python wasn't funded.

1:39:44.560 --> 1:39:47.760
 Like it was also a project with a bunch of volunteer labor, right?

1:39:47.760 --> 1:39:52.240
 It had more people, so more volunteer labor, but it was still, it was fun to the sense

1:39:52.240 --> 1:39:53.520
 that at least Guido had a job.

1:39:53.520 --> 1:39:57.440
 And I've learned some of the behind the scenes on that now since talking to people who have

1:39:57.440 --> 1:40:02.120
 put through it, and maybe not on air, we can talk about some of that, but it's interesting

1:40:02.120 --> 1:40:07.200
 to see, but Guido had a job, but his full time job wasn't just work on Python.

1:40:07.200 --> 1:40:08.440
 Like he had other things to do.

1:40:08.440 --> 1:40:09.440
 It's just wild.

1:40:09.440 --> 1:40:11.000
 It is wild, isn't it?

1:40:11.000 --> 1:40:16.440
 As wild as how few people are funded, and how much impact they have.

1:40:16.440 --> 1:40:17.440
 Maybe that's a feature in our bug.

1:40:17.440 --> 1:40:18.440
 I don't know.

1:40:18.440 --> 1:40:19.440
 Maybe, yes, exactly.

1:40:19.440 --> 1:40:20.440
 At least early on.

1:40:20.440 --> 1:40:21.440
 It's sort of, I know.

1:40:21.440 --> 1:40:22.440
 Yeah.

1:40:22.440 --> 1:40:26.240
 It's like Olympic athletes are often severely underfunded, but maybe that's what brings

1:40:26.240 --> 1:40:27.240
 out the greatness.

1:40:27.240 --> 1:40:28.240
 Correct.

1:40:28.240 --> 1:40:29.240
 Yes, correct.

1:40:29.240 --> 1:40:30.240
 No, exactly.

1:40:30.240 --> 1:40:34.080
 Maybe this is the essential part of it, because I do think about that in terms of, I currently

1:40:34.080 --> 1:40:36.440
 have an incubator for open source startups.

1:40:36.440 --> 1:40:41.440
 What I'm trying to do right now is create the environment I wished it existed when I was

1:40:41.440 --> 1:40:43.840
 leaving academia with NumPy and trying to figure out what to do.

1:40:43.840 --> 1:40:47.480
 I'm trying to create those opportunities and environments.

1:40:47.480 --> 1:40:51.320
 And that's what drives me still, is how do I make the world easier for the open source

1:40:51.320 --> 1:40:52.320
 entrepreneur?

1:40:52.320 --> 1:41:01.080
 Let me stay, I could probably stay in NumPy for a long time, but this is a fun question.

1:41:01.080 --> 1:41:09.360
 So Andre Capati leads the Tesla autopilot team, and he's also one of the most legit programmers.

1:41:09.360 --> 1:41:11.360
 I know.

1:41:11.360 --> 1:41:16.000
 He builds stuff from scratch a lot, and that's how he builds intuition about how a problem

1:41:16.000 --> 1:41:17.000
 works.

1:41:17.000 --> 1:41:18.480
 He builds it from scratch, and I always love that.

1:41:18.480 --> 1:41:23.240
 And the primary language he uses is Python for the intuition building.

1:41:23.240 --> 1:41:31.880
 But he posted something on Twitter saying that they got a significant improvement on

1:41:31.880 --> 1:41:40.120
 some aspect of their data loading, I think, by switching away from NP.square root, so the

1:41:40.120 --> 1:41:44.600
 NumPy's implementation of square root to math.square root, and then somebody else commented that

1:41:44.600 --> 1:41:51.760
 you can get even a much greater improvement by using the vanilla Python square root,

1:41:51.760 --> 1:41:52.760
 which is like...

1:41:52.760 --> 1:41:53.760
 Power 0.5.

1:41:53.760 --> 1:41:55.480
 Power 0.5.

1:41:55.480 --> 1:41:58.760
 And it's fascinating to me, I just wanted to...

1:41:58.760 --> 1:42:02.120
 So that was some shade throwing at some...

1:42:02.120 --> 1:42:03.120
 No, no.

1:42:03.120 --> 1:42:04.840
 And yes, we're talking about...

1:42:04.840 --> 1:42:12.160
 It's a good way to ask the trade off between usability and efficiency broadly in NumPy,

1:42:12.160 --> 1:42:17.080
 but also in these specific weird quirks of a single function.

1:42:17.080 --> 1:42:24.960
 So on that point, if you use a NumPy math function on a scaler, it's going to be slower

1:42:24.960 --> 1:42:29.280
 than using a Python function on that scaler.

1:42:29.280 --> 1:42:34.640
 Because the math object in NumPy is more complicated, because you can also call that

1:42:34.640 --> 1:42:36.840
 math object on an array.

1:42:36.840 --> 1:42:41.200
 And so effectively, it goes through a similar machine where there aren't enough of the...

1:42:41.200 --> 1:42:46.080
 Which you could do, like checks and fast paths.

1:42:46.080 --> 1:42:51.160
 So yeah, if you're basically doing a list, if you run over a list, in fact, for problems

1:42:51.160 --> 1:42:55.520
 that are less than 1,000, even maybe 10,000 is probably the...

1:42:55.520 --> 1:42:58.640
 If you're going more than 10,000, that's where you definitely need to be using arrays.

1:42:58.640 --> 1:43:03.600
 But if you're less than that, and for reading, if you're doing a reading process, and essentially

1:43:03.600 --> 1:43:07.960
 it's not compute bound, it's IO bound, and so you're really taking lists of 1,000 at

1:43:07.960 --> 1:43:11.160
 a time and then doing work on it, yeah, you could be faster just using Python.

1:43:11.160 --> 1:43:12.160
 Straight up Python.

1:43:12.160 --> 1:43:21.360
 See, but also, this is the fundamental questions when you look at the long arc of history.

1:43:21.360 --> 1:43:25.640
 It's very possible that np.square root is much faster.

1:43:25.640 --> 1:43:26.640
 It could be.

1:43:26.640 --> 1:43:32.520
 So in terms of don't worry about it, it's the evils of over optimization or whatever,

1:43:32.520 --> 1:43:39.440
 all the different quotes around that is sometimes obsessing about this particular little quirk

1:43:39.440 --> 1:43:41.760
 is not sufficient.

1:43:41.760 --> 1:43:47.600
 For somebody like, if you're trying to optimize your path, I agree, premature optimization

1:43:47.600 --> 1:43:51.800
 creates all kinds of challenges, right, because now, but you may have to do it.

1:43:51.800 --> 1:43:54.000
 I believe the quote is the root of all evils.

1:43:54.000 --> 1:43:55.000
 The root of all evils, right?

1:43:55.000 --> 1:43:59.160
 I mean, let's give Don Knuth, I think, or let's give Don Knuth somebody else.

1:43:59.160 --> 1:44:02.760
 Well, Don Knuth is kind of like Mark Twain, people just attribute stuff to him, I don't

1:44:02.760 --> 1:44:03.760
 know.

1:44:03.760 --> 1:44:04.760
 And it's fine because he's brilliant.

1:44:04.760 --> 1:44:10.200
 No, I was a latech user myself, and so I have a lot of respect, and he did more than

1:44:10.200 --> 1:44:15.360
 that, of course, but yeah, someone I really appreciate in the computer science space.

1:44:15.360 --> 1:44:17.120
 Yeah, I think that's appropriate.

1:44:17.120 --> 1:44:20.200
 There's a lot of little things like that where people, actually, if you understood it, you

1:44:20.200 --> 1:44:22.720
 go, yeah, of course, that's the case.

1:44:22.720 --> 1:44:28.240
 And the other part I didn't mention, and Numba was a thing we wrote early on, and I was really

1:44:28.240 --> 1:44:32.080
 excited by Numba because it's something we wanted, it was a compiler for Python syntax.

1:44:32.080 --> 1:44:38.480
 I wanted it from the beginning of writing NumPy because of this function question, like

1:44:38.480 --> 1:44:45.360
 taking, the power of arrays is really that you can write functions using all of it.

1:44:45.360 --> 1:44:46.360
 It has implicit looping.

1:44:46.360 --> 1:44:47.360
 Right?

1:44:47.360 --> 1:44:51.240
 So you don't worry about, I write this n dimensional for loop with four loops for four statements.

1:44:51.240 --> 1:44:55.320
 You just say, oh, big four dimensional array, I'm going to do this operation, this plus,

1:44:55.320 --> 1:44:57.120
 this minus, this reduction.

1:44:57.120 --> 1:45:00.720
 And you get this, it's called vectorization in other areas, but you can basically think

1:45:00.720 --> 1:45:03.760
 at a high level and get massive amounts of computation done.

1:45:03.760 --> 1:45:09.160
 With the added benefit of, oh, it can be paralyzed easily, it can be put in parallel, you don't

1:45:09.160 --> 1:45:10.160
 have to think about that.

1:45:10.160 --> 1:45:15.040
 In fact, it's worse to go decompose your, you write the four loops and then try to infer

1:45:15.040 --> 1:45:16.320
 parallelism from four loops.

1:45:16.320 --> 1:45:21.200
 That's actually harder problem than to take the array problem and just automatically parallelize

1:45:21.200 --> 1:45:22.200
 that problem.

1:45:22.200 --> 1:45:27.120
 That's what, and so functions in NumPy are called universal functions, ufunc.

1:45:27.120 --> 1:45:29.040
 So square root is an example of a ufunc.

1:45:29.040 --> 1:45:32.440
 There are others, sine, cosine, add, subtract.

1:45:32.440 --> 1:45:35.880
 In fact, one of those first libraries to PsiPy was something called special where I added

1:45:35.880 --> 1:45:40.880
 vessel functions and all these special functions that come up in physics and I added them as

1:45:40.880 --> 1:45:43.040
 ufunc so they could work on arrays.

1:45:43.040 --> 1:45:45.840
 So I understood ufuncs very, very well from day one inside of numeric.

1:45:45.840 --> 1:45:49.240
 That was one of the things we tried to make better in NumPy was how do they work?

1:45:49.240 --> 1:45:50.440
 Can they do broadcasting?

1:45:50.440 --> 1:45:52.120
 What does broadcasting mean?

1:45:52.120 --> 1:45:57.400
 But one of the problems is, okay, what do I do with a Python scalar?

1:45:57.400 --> 1:46:01.720
 So what happens, the Python scalar gets broadcast to a zero dimensional array and then it goes

1:46:01.720 --> 1:46:06.400
 through the whole same machinery as if it were a 10,000 dimensional array and then it

1:46:06.400 --> 1:46:10.040
 kind of unpacks the element and then does the addition.

1:46:10.040 --> 1:46:14.560
 That's not to mention the function it calls in the case of square root is just the C lab

1:46:14.560 --> 1:46:16.000
 square root, right?

1:46:16.000 --> 1:46:20.880
 In some cases, like Python's power, there's some optimizations they're doing that can

1:46:20.880 --> 1:46:23.840
 be faster than just calling this the C lab square root.

1:46:23.840 --> 1:46:25.440
 In the interpreter or in the C code?

1:46:25.440 --> 1:46:26.480
 No, in the C code.

1:46:26.480 --> 1:46:27.720
 In the Python runtime.

1:46:27.720 --> 1:46:28.720
 In the Python.

1:46:28.720 --> 1:46:32.480
 So they really optimize it and they have the freedom to do that because they don't have

1:46:32.480 --> 1:46:33.480
 to worry about it.

1:46:33.480 --> 1:46:34.480
 It's just a scalar.

1:46:34.480 --> 1:46:35.480
 It's just a scalar, right?

1:46:35.480 --> 1:46:39.440
 They don't have to worry about the fact that, oh, this could be an object with many pieces.

1:46:39.440 --> 1:46:45.040
 The ufunc machine is also generic in sense that typecasting and broadcasting.

1:46:45.040 --> 1:46:47.840
 Broadcasting's idea of I'm going to go, I have a zero dimensional array, I have a scalar

1:46:47.840 --> 1:46:50.400
 with a four dimensional array and I add them.

1:46:50.400 --> 1:46:55.880
 Oh, I have to kind of coerce the shape of this guy to make it work against the whole

1:46:55.880 --> 1:46:56.880
 four dimensional array.

1:46:56.880 --> 1:47:01.080
 So it's the idea of I can do a one dimensional array against a two dimensional array and

1:47:01.080 --> 1:47:02.080
 have it make sense.

1:47:02.080 --> 1:47:07.240
 Well, that's what NumPy does is it challenges you to reformulate, rethink your problem as

1:47:07.240 --> 1:47:12.600
 a multi dimensional array problem versus like move away from scalars completely.

1:47:12.600 --> 1:47:13.600
 Right, exactly.

1:47:13.600 --> 1:47:14.600
 Yeah.

1:47:14.600 --> 1:47:15.600
 Exactly.

1:47:15.600 --> 1:47:17.960
 In fact, that's where some of the edge cases boundaries are is that, well, they're still

1:47:17.960 --> 1:47:21.120
 there and this is where array scalars are particular.

1:47:21.120 --> 1:47:24.760
 So array scalars are particularly bad in the sense that they were written so that you

1:47:24.760 --> 1:47:29.200
 could optimize the math on them, but that hasn't happened, right?

1:47:29.200 --> 1:47:33.640
 And so their default is to you is to coerce the array scalar to a zero dimensional array

1:47:33.640 --> 1:47:36.240
 and then use the NumPy machinery.

1:47:36.240 --> 1:47:40.080
 That's what you could specialize, but it doesn't happen all the time.

1:47:40.080 --> 1:47:43.880
 So in fact, when we first wrote Numba, we do comparisons and say, look, it's a thousand

1:47:43.880 --> 1:47:45.880
 X speed up.

1:47:45.880 --> 1:47:50.520
 We're lying a little bit in the sense that, well, first do the 40 X slowdown of using the

1:47:50.520 --> 1:47:55.160
 array scalars inside of a loop because if you used to use Python scalars, you'd already

1:47:55.160 --> 1:47:56.160
 be 10 times faster.

1:47:56.160 --> 1:47:57.160
 Yeah.

1:47:57.160 --> 1:48:00.400
 But then we would get a hundred times faster over that using just compilation.

1:48:00.400 --> 1:48:04.120
 And what we do is compile the loop from out of the interpreter to machine code.

1:48:04.120 --> 1:48:08.520
 And then that's always been the power of Python is this extensibility so you can, could people

1:48:08.520 --> 1:48:09.720
 say, oh, Python's so slow?

1:48:09.720 --> 1:48:10.720
 Well, sure.

1:48:10.720 --> 1:48:14.040
 If you do all your logic in the runtime of the Python interpreter, yeah.

1:48:14.040 --> 1:48:16.080
 But the power is that you don't have to.

1:48:16.080 --> 1:48:19.960
 You write all the logic which you do in the high level is just high level logic.

1:48:19.960 --> 1:48:24.480
 And the actual calls you're making could be on gigabyte arrays of data.

1:48:24.480 --> 1:48:27.000
 And that's all done at compiled speeds.

1:48:27.000 --> 1:48:32.560
 And the fact that integration is one can happen, but two is separable.

1:48:32.560 --> 1:48:36.440
 That's one of the, the language like Julia says, we're going to be all in one.

1:48:36.440 --> 1:48:37.440
 You can do all of it together.

1:48:37.440 --> 1:48:39.200
 And then there's, the jury's out.

1:48:39.200 --> 1:48:40.200
 Is that possible?

1:48:40.200 --> 1:48:43.440
 I tend to think that you're going to, there's separate concerns there.

1:48:43.440 --> 1:48:44.440
 You want to precompile.

1:48:44.440 --> 1:48:48.480
 In fact, generally you will want to precompile your, some of your loops.

1:48:48.480 --> 1:48:51.260
 Like scipy is a compilation step to install scipy.

1:48:51.260 --> 1:48:52.760
 It takes about two hours.

1:48:52.760 --> 1:48:56.080
 If you have many machines, maybe you can get it down to one hour, but to compile all those

1:48:56.080 --> 1:48:57.960
 libraries takes about, takes a while.

1:48:57.960 --> 1:48:59.960
 You don't want to do that at runtime.

1:48:59.960 --> 1:49:00.960
 You don't want to do that all the time.

1:49:00.960 --> 1:49:04.480
 You want to have this precompiled binary available that you're then just linking into.

1:49:04.480 --> 1:49:10.520
 So there's real questions about the whole, you know, source code code is running binary

1:49:10.520 --> 1:49:11.960
 code is more than source code.

1:49:11.960 --> 1:49:13.200
 It's create an object code.

1:49:13.200 --> 1:49:14.200
 It's the linker.

1:49:14.200 --> 1:49:15.200
 It's the loader.

1:49:15.200 --> 1:49:17.680
 It's the, how does that interpret it inside of a virtual memory space?

1:49:17.680 --> 1:49:20.680
 There's a lot of details there that actually I didn't understand for a long time until

1:49:20.680 --> 1:49:25.720
 I, you know, read books on the topic and it, and it led to the more you know, the better

1:49:25.720 --> 1:49:31.440
 off you are and you can do more details, but sometimes it helps with abstractions too.

1:49:31.440 --> 1:49:35.800
 Well the problem, as we mentioned earlier with abstractions is you kind of sometimes

1:49:35.800 --> 1:49:43.920
 assume that whoever implemented this thing had your case in mind and found the optimal

1:49:43.920 --> 1:49:44.920
 solution.

1:49:44.920 --> 1:49:45.920
 Yes.

1:49:45.920 --> 1:49:49.920
 Or like you assume certain things, I mean, there's a lot of, one of the really powerful

1:49:49.920 --> 1:49:56.120
 things to me early on, I mean, it sounds silly to say, but with Python probably one

1:49:56.120 --> 1:49:59.840
 of the reasons I fell in love with it is dictionaries.

1:49:59.840 --> 1:50:01.040
 Yes.

1:50:01.040 --> 1:50:06.560
 So obviously probably most languages have some mapping concept, some mapping concept,

1:50:06.560 --> 1:50:10.840
 but it felt like it was a first class citizen and it was just my brain was able to think

1:50:10.840 --> 1:50:11.840
 in dictionaries.

1:50:11.840 --> 1:50:17.360
 But then there's the thing that I guess I still use to this day is order dictionaries

1:50:17.360 --> 1:50:22.840
 because that seems like a more natural way to construct dictionaries and from a computer

1:50:22.840 --> 1:50:26.520
 science perspective, the running time cost is not that significant, but there's a lot

1:50:26.520 --> 1:50:34.800
 of things to understand about dictionaries that the abstraction kind of doesn't necessarily

1:50:34.800 --> 1:50:36.760
 incentivize you to understand.

1:50:36.760 --> 1:50:37.760
 Right.

1:50:37.760 --> 1:50:41.160
 You really understand the notion of a hash map and how the dictionary is implemented,

1:50:41.160 --> 1:50:42.440
 but you're right.

1:50:42.440 --> 1:50:46.880
 Dictionaries are a good example of an abstraction that's powerful and I agree with you, I love

1:50:46.880 --> 1:50:47.880
 dictionaries too.

1:50:47.880 --> 1:50:50.280
 It took me a while to understand that once you do you realize, oh, they're everywhere

1:50:50.280 --> 1:50:53.120
 and Python uses them everywhere too.

1:50:53.120 --> 1:50:56.240
 It's actually constructed one of the foundational things as dictionaries and it does everything

1:50:56.240 --> 1:50:57.240
 with dictionaries.

1:50:57.240 --> 1:50:58.240
 Yes.

1:50:58.240 --> 1:50:59.240
 So it is, it's powerful.

1:50:59.240 --> 1:51:02.280
 Order dictionaries came later, but it is very, very powerful.

1:51:02.280 --> 1:51:06.560
 It took me a little while coming from just the array programming entirely to understand

1:51:06.560 --> 1:51:11.400
 these other objects like dictionaries and lists and tuples and binary trees.

1:51:11.400 --> 1:51:15.840
 Like I said, I wasn't a computer scientist, but I studied arrays first and so I was very

1:51:15.840 --> 1:51:20.560
 array centric and you realize, oh, these others don't have purposes and value actually.

1:51:20.560 --> 1:51:22.120
 I agree.

1:51:22.120 --> 1:51:30.040
 There's a friendliness about like one way to think about arrays is arrays are just like

1:51:30.040 --> 1:51:37.280
 full of numbers, but to make them accessible to humans and make them less error prone to

1:51:37.280 --> 1:51:43.480
 human users, sometimes you want to attach names, human interpretable names that are

1:51:43.480 --> 1:51:44.760
 sticky to those arrays.

1:51:44.760 --> 1:51:50.960
 So that's how you start to think about dictionaries is you start to convert numbers into something

1:51:50.960 --> 1:51:56.800
 that's human interpretable and that's actually the tension I've had with NumPy because I've

1:51:56.800 --> 1:52:05.600
 built so much tooling around human interpretability and also protecting me from a year later

1:52:05.600 --> 1:52:11.280
 not making the mistakes by being, I wanted to force myself to use English versus numbers.

1:52:11.280 --> 1:52:12.280
 Yes.

1:52:12.280 --> 1:52:15.760
 So there's a, there's a project called label arrays.

1:52:15.760 --> 1:52:21.400
 Like very early, it was recognized that, oh, we need, we're indexing NumPy with just numbers,

1:52:21.400 --> 1:52:23.640
 all the columns and particularly the dimensions.

1:52:23.640 --> 1:52:27.960
 I mean, if you have an image, you don't necessarily need to label each column a row, but if you

1:52:27.960 --> 1:52:31.600
 have a lot of images or you have another dimension, you'd at least like to label the dimension

1:52:31.600 --> 1:52:35.440
 as this is X, this is Y, this is Z or this is, give us some human meaning or some domain

1:52:35.440 --> 1:52:37.000
 sort of meaning.

1:52:37.000 --> 1:52:43.000
 That was one of the impetuses for pandas actually was just, oh, we do need to label these things

1:52:43.000 --> 1:52:47.680
 and label, label array was an attempt to add that like a lighter weight version of that.

1:52:47.680 --> 1:52:51.280
 And there's been, like that's an example of something I think NumPy could add, could

1:52:51.280 --> 1:52:55.160
 be added to NumPy, but one of the challenges again, how do you fund this?

1:52:55.160 --> 1:53:00.200
 Like, like I said, one of the tragedies I think is that, so I never had the chance to,

1:53:00.200 --> 1:53:02.440
 I was never paid to work on NumPy, right?

1:53:02.440 --> 1:53:06.480
 So I've always just done it my spare time, always taken from one thing, taken from another

1:53:06.480 --> 1:53:08.000
 thing to do it.

1:53:08.000 --> 1:53:11.440
 And at the time, I mean, today, it would be the wrong day of today, like paying me to

1:53:11.440 --> 1:53:16.000
 work on NumPy now would not be a good use of effort, but, but we are finally at Quonsite

1:53:16.000 --> 1:53:17.000
 Labs.

1:53:17.000 --> 1:53:20.480
 I'm actually paying people to work on NumPy and SciPy, which is I'm thrilled with, I'm

1:53:20.480 --> 1:53:21.480
 excited by.

1:53:21.480 --> 1:53:24.560
 I've wanted to do that, that's why I always wanted to do it from day one, it just took

1:53:24.560 --> 1:53:27.920
 me a while to figure out a mechanism to do that.

1:53:27.920 --> 1:53:34.600
 Even like in the university setting, respecting that, like pushing students, young minds, the

1:53:34.600 --> 1:53:41.600
 young graduate students to contribute and then figuring out financial mechanisms that

1:53:41.600 --> 1:53:47.520
 enable them to contribute and then sort of reward them for their innovative scientific

1:53:47.520 --> 1:53:52.320
 journey that that would be nice, but then also there's just a better allocation of resources.

1:53:52.320 --> 1:53:55.880
 Well, you know, it's 20 year anniversary since 9 11.

1:53:55.880 --> 1:54:03.480
 And I was just looking, we spent over $6 trillion in the Middle East after 9 11 in the various

1:54:03.480 --> 1:54:09.120
 efforts there and sort of to put politics and all that aside is just, you think about

1:54:09.120 --> 1:54:14.400
 the education system, all the other ways we could have possibly allocated that money.

1:54:14.400 --> 1:54:22.560
 To me, to take it back, the amount of impact you would have by allocating a little bit

1:54:22.560 --> 1:54:30.080
 of money to the programmers that build the tools that run the world is fascinating.

1:54:30.080 --> 1:54:38.960
 I mean, I don't know, I think again, there is some aspect to being broke as somewhat

1:54:38.960 --> 1:54:43.200
 of a feature, not a bug, that you make sure that you manage that.

1:54:43.200 --> 1:54:45.560
 Right. No, I know.

1:54:45.560 --> 1:54:47.120
 But I don't think that's a big part.

1:54:47.120 --> 1:54:52.720
 So it's like, I think you can have enough money and actually be wealthy while maintaining

1:54:52.720 --> 1:54:53.720
 your values.

1:54:53.720 --> 1:54:54.720
 Agreed.

1:54:54.720 --> 1:54:55.720
 I think.

1:54:55.720 --> 1:54:56.720
 Agreed.

1:54:56.720 --> 1:54:59.440
 There's an old adage that nations that trade together don't go to war together.

1:54:59.440 --> 1:55:04.120
 I've often thought about nations that code together.

1:55:04.120 --> 1:55:08.080
 Because one of the things I love about open source is it's global, it's multinational.

1:55:08.080 --> 1:55:09.080
 There aren't national boundaries.

1:55:09.080 --> 1:55:12.920
 One of the challenges with business and open source is the fact that business is national.

1:55:12.920 --> 1:55:17.080
 Like businesses are entities that are recognized in legal jurisdictions and have laws that

1:55:17.080 --> 1:55:22.960
 are respected in those jurisdictions and hiring and yet the open source ecosystem is not there.

1:55:22.960 --> 1:55:27.320
 Currently, one of the problems we're solving is hiring people all over the world.

1:55:27.320 --> 1:55:31.920
 Because it's a global effort and I've had the chance to work and I've loved the chance.

1:55:31.920 --> 1:55:37.720
 I've never been to Iran, but I once had a conference where I was able to talk to people

1:55:37.720 --> 1:55:44.520
 there and talk to folks in Pakistan and we've been there, but we had a call where there

1:55:44.520 --> 1:55:48.480
 are people there, like just scientists and normal people.

1:55:48.480 --> 1:55:54.560
 There's a certain amount of humanizing that gets away from the...

1:55:54.560 --> 1:55:59.640
 We often get the memes of society that bubble up and get discussed, but the memes are not

1:55:59.640 --> 1:56:02.800
 even an accurate reflection of the reality of what people are.

1:56:02.800 --> 1:56:08.320
 If you look at the major power centers that are leading to something like cyber war in

1:56:08.320 --> 1:56:14.440
 the next few decades, it's the United States, it's Russia and China.

1:56:14.440 --> 1:56:18.680
 Those three countries in particular have incredible developers.

1:56:18.680 --> 1:56:23.480
 If they work together, I think that's one way the politicians can do their stupid bickering,

1:56:23.480 --> 1:56:27.440
 but there's a layer of infrastructure, of humanity.

1:56:27.440 --> 1:56:34.720
 If they collaborate together, that I think can prevent major conflict, which would,

1:56:34.720 --> 1:56:39.920
 I think, most likely happen at the cyber level versus the actual hot war level.

1:56:39.920 --> 1:56:40.920
 You're right.

1:56:40.920 --> 1:56:43.680
 I think that's good prediction.

1:56:43.680 --> 1:56:48.000
 Nations that code together don't go to war together.

1:56:48.000 --> 1:56:49.000
 That's a hope.

1:56:49.000 --> 1:56:52.600
 That's one of the philosophical hopes.

1:56:52.600 --> 1:56:58.880
 You mentioned the project of Numba, which is fascinating.

1:56:58.880 --> 1:57:05.600
 From the early days, there was a pushback on Python that it's not fast.

1:57:05.600 --> 1:57:07.840
 If you want to write something that's fast, you use CC++.

1:57:07.840 --> 1:57:14.720
 If you want to write something that's usable and friendly, but slow, you use Python.

1:57:14.720 --> 1:57:15.960
 What is Numba?

1:57:15.960 --> 1:57:16.960
 What is its goal?

1:57:16.960 --> 1:57:17.960
 How does it work?

1:57:17.960 --> 1:57:18.960
 Great.

1:57:18.960 --> 1:57:19.960
 Yes, that's what the argument.

1:57:19.960 --> 1:57:23.920
 The reality was people would write high level code and use compiled code, but there's still

1:57:23.920 --> 1:57:28.920
 user stories, cases where you want to write Python, but then have it still be fast.

1:57:28.920 --> 1:57:31.160
 You still need to write a for loop.

1:57:31.160 --> 1:57:34.360
 Before Numba, it was always don't write a for loop.

1:57:34.360 --> 1:57:39.280
 Write it in a vectorized way, put it in an array, and often that can make a memory trade

1:57:39.280 --> 1:57:40.280
 off.

1:57:40.280 --> 1:57:43.520
 Quite often you can do it, but then you may use more memory because you have to build

1:57:43.520 --> 1:57:47.920
 this array of data that you don't necessarily need all the time.

1:57:47.920 --> 1:57:52.760
 Numba was, it started from a desire to have a vectorized that worked.

1:57:52.760 --> 1:57:58.120
 A vectorized was a tool in NumPy, it was released, you give it a Python function, and it gave

1:57:58.120 --> 1:58:00.840
 you a universal function, a UFUNC, so it would work on arrays.

1:58:00.840 --> 1:58:06.280
 So you get a function that just worked on a scalar, like the classic case was a simple

1:58:06.280 --> 1:58:12.200
 function that an if then statement in it, so sine x over x function, sync function.

1:58:12.200 --> 1:58:16.120
 If x equals 0, return 1, otherwise do sine x over x.

1:58:16.120 --> 1:58:19.720
 The challenge is you don't want that loop going in Python, so you want a compiled version

1:58:19.720 --> 1:58:21.600
 of that.

1:58:21.600 --> 1:58:24.920
 But the vectorized in NumPy would just give you a Python function.

1:58:24.920 --> 1:58:29.640
 So it would take the array of numbers and at every call do a loop back into Python.

1:58:29.640 --> 1:58:30.640
 So it was very slow.

1:58:30.640 --> 1:58:32.920
 It gave you the appearance of a UFUNC, but it was very slow.

1:58:32.920 --> 1:58:36.560
 So I always wanted a vectorized that would take that Python scalar function and produce

1:58:36.560 --> 1:58:39.560
 a UFUNC working on binary native code.

1:58:39.560 --> 1:58:44.240
 So in fact, I had somebody work on that with PyPy and see if PyPy could be used to produce

1:58:44.240 --> 1:58:50.600
 a UFUNC like that early on in 2009 or something like that, 2010.

1:58:50.600 --> 1:58:51.600
 They didn't work that well.

1:58:51.600 --> 1:58:52.600
 It was kind of pretty bulky.

1:58:52.600 --> 1:58:57.120
 But in 2012, Peter and I had just started Anaconda.

1:58:57.120 --> 1:59:00.880
 We had, I had just, I'd learned to raise money.

1:59:00.880 --> 1:59:05.160
 That's a different topic, but I'd learned to raise money from friends, family, and fools,

1:59:05.160 --> 1:59:06.160
 as they say.

1:59:06.160 --> 1:59:07.160
 That's a good line.

1:59:07.160 --> 1:59:10.160
 Oh, that's a good line.

1:59:10.160 --> 1:59:13.800
 So we were trying to do something.

1:59:13.800 --> 1:59:14.800
 We were trying to change the world.

1:59:14.800 --> 1:59:15.800
 Peter and I are super ambitious.

1:59:15.800 --> 1:59:19.720
 We wanted to make array computing and we had ideas for really what's still, it's still

1:59:19.720 --> 1:59:20.720
 the energy right now.

1:59:20.720 --> 1:59:23.600
 How do you do at scale data science?

1:59:23.600 --> 1:59:27.800
 We had a bunch of ideas there, but one of them, I had just talked to people by LLVM

1:59:27.800 --> 1:59:29.960
 and I was like, there's a way to do this.

1:59:29.960 --> 1:59:34.000
 I just, I went, I heard about my friend Dave Beasley at a compiler course.

1:59:34.000 --> 1:59:37.720
 So I was looking at compilers like, and I realized, oh, this is what you do.

1:59:37.720 --> 1:59:45.000
 And so I wrote a version of Numba that just basically mapped Python bytecode to LLVM.

1:59:45.000 --> 1:59:46.000
 Nice.

1:59:46.000 --> 1:59:47.000
 Right?

1:59:47.000 --> 1:59:50.880
 So, and the first version is like, this works and it produces code that's fast.

1:59:50.880 --> 1:59:53.360
 This is cool for, you know, obviously a reduced subset of Python.

1:59:53.360 --> 1:59:55.440
 I didn't support all of the Python language.

1:59:55.440 --> 1:59:59.000
 There had been efforts to speed up Python in the past, but those efforts were, I would

1:59:59.000 --> 2:00:02.040
 say not from the array computing perspective, not from the perspective of wanting to produce

2:00:02.040 --> 2:00:03.600
 a vectorize improvement.

2:00:03.600 --> 2:00:07.000
 They were from a perspective of speeding up the runtime of Python, which is fundamentally

2:00:07.000 --> 2:00:12.720
 hard because Python allows for some constructs that aren't, you can't speed up.

2:00:12.720 --> 2:00:15.680
 It's generic, you know, when it does this variable.

2:00:15.680 --> 2:00:20.320
 So I, from the start, did not try to replicate Python's semantics entirely.

2:00:20.320 --> 2:00:24.480
 I said, I'm going to take a subset of the Python syntax and let people write syntax

2:00:24.480 --> 2:00:27.120
 in Python, but it's kind of a new language, really.

2:00:27.120 --> 2:00:34.080
 So it's almost like for loops, like focusing on for loops, scalar arithmetic, you know,

2:00:34.080 --> 2:00:38.320
 typed, you know, really typed language, a type subset.

2:00:38.320 --> 2:00:39.320
 That was the key.

2:00:39.320 --> 2:00:43.080
 So, but we wanted to add inference of types, so you didn't have to spell all the types

2:00:43.080 --> 2:00:48.120
 out because when you call a function, so Python is typed, it's just dynamically typed.

2:00:48.120 --> 2:00:52.200
 You don't tell it what the types are, but when it runs, every time an object runs, there's

2:00:52.200 --> 2:00:54.640
 a type for the variables, you know what it is.

2:00:54.640 --> 2:00:59.200
 And so that was the design goals of Numba were to make it possible to write functions that

2:00:59.200 --> 2:01:05.600
 could be compiled and have them use for NumPyRays, like the need to support NumPyRays.

2:01:05.600 --> 2:01:07.080
 And so how does it work?

2:01:07.080 --> 2:01:11.760
 Do you add a comment within Python that tells it to do, like, how do you help out a compiler

2:01:11.760 --> 2:01:14.320
 to know what to do?

2:01:14.320 --> 2:01:15.920
 There isn't much, actually.

2:01:15.920 --> 2:01:16.920
 You don't.

2:01:16.920 --> 2:01:17.920
 It's kind of magical in a sense.

2:01:17.920 --> 2:01:21.400
 It just looks at the type of the objects and then does type inference to determine any

2:01:21.400 --> 2:01:23.560
 of the other variables it needs.

2:01:23.560 --> 2:01:28.920
 And then it was also because we had a use case that could work early, like one of the challenges

2:01:28.920 --> 2:01:32.680
 of any kind of new development is if you have something that to make it work, it was going

2:01:32.680 --> 2:01:35.720
 to take you a long time, it's really hard to get out off the ground.

2:01:35.720 --> 2:01:41.120
 If you have a project where there's some incremental story that can start working today and solve

2:01:41.120 --> 2:01:44.840
 a problem, then you can start getting it out there, getting feedback.

2:01:44.840 --> 2:01:48.200
 Because Numba today, now Numba is nine years old today, right?

2:01:48.200 --> 2:01:52.200
 The first two, three versions were not great, right?

2:01:52.200 --> 2:01:54.960
 But they solved a problem and some people could try it and we could get some feedback

2:01:54.960 --> 2:01:55.960
 on it.

2:01:55.960 --> 2:01:56.960
 Not great.

2:01:56.960 --> 2:01:57.960
 And it was very focused.

2:01:57.960 --> 2:01:58.960
 Very fragile.

2:01:58.960 --> 2:01:59.960
 Oh, the fragility.

2:01:59.960 --> 2:02:03.120
 The subset it would actually compile was small.

2:02:03.120 --> 2:02:06.760
 And so if you wrote Python code and said, so the way it worked is you write a function

2:02:06.760 --> 2:02:08.320
 and you say atJit.

2:02:08.320 --> 2:02:09.320
 Use decorators.

2:02:09.320 --> 2:02:13.760
 So decorator is just these little constructs that you decorate code with an app and then

2:02:13.760 --> 2:02:15.080
 a name.

2:02:15.080 --> 2:02:19.800
 The atJit would take your Python function and actually just compile it and replace the Python

2:02:19.800 --> 2:02:24.200
 function with another function that interacts with this compile function.

2:02:24.200 --> 2:02:25.200
 Got it.

2:02:25.200 --> 2:02:29.960
 So you could do that and we went from Python byte code, then we went to AST.

2:02:29.960 --> 2:02:33.280
 Writing compiler is actually, I learned a lot about why computer science is taught the

2:02:33.280 --> 2:02:36.640
 way it is because compilers can be hard to write.

2:02:36.640 --> 2:02:37.640
 They use tree structures.

2:02:37.640 --> 2:02:42.800
 They use all the concepts of computer science that are needed and it's actually hard to,

2:02:42.800 --> 2:02:46.240
 it's easy to write a compiler and then have it be spaghetti code.

2:02:46.240 --> 2:02:50.120
 The passes become challenging and we ended up with three versions of Numba, right?

2:02:50.120 --> 2:02:53.760
 Numba got written three times.

2:02:53.760 --> 2:02:55.880
 The programming language is number written in.

2:02:55.880 --> 2:02:56.880
 Python.

2:02:56.880 --> 2:02:57.880
 Wait.

2:02:57.880 --> 2:02:58.880
 Okay.

2:02:58.880 --> 2:02:59.880
 Yeah, Python.

2:02:59.880 --> 2:03:00.880
 Really?

2:03:00.880 --> 2:03:01.880
 That's fascinating.

2:03:01.880 --> 2:03:05.840
 Yeah, so Python, but then the whole goal of Numba is to translate Python byte code to

2:03:05.840 --> 2:03:07.560
 LLVM.

2:03:07.560 --> 2:03:09.160
 And so LLVM actually does the code generation.

2:03:09.160 --> 2:03:13.080
 In fact, a lot of times they'd say, yeah, it's super easy to write a compiler if you're

2:03:13.080 --> 2:03:16.720
 not writing the parser, nor the code generator, right?

2:03:16.720 --> 2:03:20.760
 For people who don't know, LLVM is the compiler itself, so you're compiling it.

2:03:20.760 --> 2:03:24.520
 It's really badly named low level virtual machine, which that part of it is not used.

2:03:24.520 --> 2:03:25.520
 It's really low level.

2:03:25.520 --> 2:03:27.520
 First, he doesn't mean that.

2:03:27.520 --> 2:03:28.520
 Yeah.

2:03:28.520 --> 2:03:29.520
 Love, Chris.

2:03:29.520 --> 2:03:32.320
 But the name makes you imply that the virtual machine is what it's all about.

2:03:32.320 --> 2:03:37.240
 It's actually the IR and the library that the code generation, that's the real beauty

2:03:37.240 --> 2:03:38.240
 of it.

2:03:38.240 --> 2:03:42.240
 The fact that what I love about LLVM was the fact that it was a plateau you could collaborate

2:03:42.240 --> 2:03:43.800
 on, right?

2:03:43.800 --> 2:03:49.280
 Instead of the internals of GCC or the internals of the Intel compiler, how do I extend that?

2:03:49.280 --> 2:03:51.800
 It was a place you could collaborate.

2:03:51.800 --> 2:03:52.800
 We were early.

2:03:52.800 --> 2:03:54.080
 I mean, people had started before.

2:03:54.080 --> 2:03:55.680
 It's a slow compiler.

2:03:55.680 --> 2:03:57.760
 It's not a fast compiler.

2:03:57.760 --> 2:04:03.520
 For some kind of JITs, JITs are common in the language because, one, every browser has

2:04:03.520 --> 2:04:04.800
 a JavaScript JIT.

2:04:04.800 --> 2:04:09.160
 It does real time compilation of the JavaScript to machine code.

2:04:09.160 --> 2:04:11.640
 For people who don't know, JIT is just in time compilation.

2:04:11.640 --> 2:04:12.640
 Thank you.

2:04:12.640 --> 2:04:13.640
 Yeah, just in time compilation.

2:04:13.640 --> 2:04:14.640
 They're actually really sophisticated.

2:04:14.640 --> 2:04:18.560
 In fact, I got jealous of how much effort was put into the JavaScript JITs.

2:04:18.560 --> 2:04:19.560
 Yes.

2:04:19.560 --> 2:04:22.000
 Well, it's kind of incredible what they've done with JavaScript JITs.

2:04:22.000 --> 2:04:23.000
 I completely agree.

2:04:23.000 --> 2:04:25.400
 I'm very impressed.

2:04:25.400 --> 2:04:30.200
 Number was an effort to make that happen with Python.

2:04:30.200 --> 2:04:34.080
 We used some of the money we raised from Anaconda to do it, and then we also applied for this

2:04:34.080 --> 2:04:38.040
 DARPA grant and used some of that money to continue the development, and then we used

2:04:38.040 --> 2:04:40.720
 proceeds from service projects we would do.

2:04:40.720 --> 2:04:45.520
 We get consulting projects that we would then use some of the profits to invest in number.

2:04:45.520 --> 2:04:48.960
 We ended up with a team of two or three people working on number.

2:04:48.960 --> 2:04:53.480
 It was a fits and starts, and ultimately, the fact that we had a commercial version

2:04:53.480 --> 2:04:55.320
 of it, also we were writing.

2:04:55.320 --> 2:04:58.720
 Part of the way I was trying to fund numbers, say, let's do the free number, and then we'll

2:04:58.720 --> 2:05:00.600
 have a commercial version of number called number pro.

2:05:00.600 --> 2:05:03.400
 Then what number pro did is it targeted GPUs.

2:05:03.400 --> 2:05:11.080
 We had the very first CUDA JIT and the very first at JIT compiler that in 2013, you could

2:05:11.080 --> 2:05:17.200
 run not just a viewfunk on CPU, but a viewfunk on GPUs, and it would automatically parallelize

2:05:17.200 --> 2:05:19.440
 it and get 1,000 x speed on it.

2:05:19.440 --> 2:05:27.920
 That's an interesting funding mechanism because large companies or larger companies care about

2:05:27.920 --> 2:05:32.960
 speed in just this way, so it's exactly a really good way to fund it.

2:05:32.960 --> 2:05:35.320
 Yeah, there's been a couple of things you know people will pay for.

2:05:35.320 --> 2:05:39.920
 One, they'll pay for really good user interfaces, and so I'm always looking for what are the

2:05:39.920 --> 2:05:43.400
 other things people will pay for that you could actually adapt to the open source infrastructure.

2:05:43.400 --> 2:05:45.600
 One is definitely user interfaces.

2:05:45.600 --> 2:05:49.200
 The second is speed, like a better runtime, faster runtime.

2:05:49.200 --> 2:05:52.360
 And then when you say people, you mean like a small number of people pay a lot of money,

2:05:52.360 --> 2:05:57.840
 but then there's also this other mechanism that a ton of people pay a little bit.

2:05:57.840 --> 2:06:05.680
 First, we mentioned Anaconda, we mentioned friends, family, and fools, so Anaconda is

2:06:05.680 --> 2:06:13.320
 yet another, so there's a company, but there's also a project that is exceptionally impactful

2:06:13.320 --> 2:06:21.520
 in terms of for many reasons, but one of which is bringing a lot more people into the community

2:06:21.520 --> 2:06:23.720
 of folks who use Python.

2:06:23.720 --> 2:06:27.200
 So what is Anaconda?

2:06:27.200 --> 2:06:29.040
 What is its goals?

2:06:29.040 --> 2:06:31.200
 Maybe what is Kanda versus Anaconda?

2:06:31.200 --> 2:06:35.200
 Yeah, I'll tell you a little bit of the history of that, because Anaconda, we wanted to do,

2:06:35.200 --> 2:06:39.640
 we wanted to scale Python, because we, you know, Peter and I had the goal of when we

2:06:39.640 --> 2:06:43.640
 started Anaconda, we actually started as Continuum Analytics was the name of the company that

2:06:43.640 --> 2:06:44.640
 started.

2:06:44.640 --> 2:06:49.960
 It got renamed to Anaconda in 2015, but we said we want to scale analytics.

2:06:49.960 --> 2:06:55.040
 NumPy is great, Pan is emerging, but these need to run at scale with lots of machines.

2:06:55.040 --> 2:06:59.800
 The other thing we wanted to do was make user interfaces that were web, we wanted to make

2:06:59.800 --> 2:07:04.640
 sure the web did not pass by the Python community, that we had a ways to translate your data

2:07:04.640 --> 2:07:06.080
 science to the web.

2:07:06.080 --> 2:07:09.200
 So those are the two kind of technical areas and we thought, oh, we'll build products in

2:07:09.200 --> 2:07:10.200
 this space.

2:07:10.200 --> 2:07:12.640
 And that was the idea.

2:07:12.640 --> 2:07:15.960
 Very quickly in, but of course, the thing I knew how to do was to do consulting to make

2:07:15.960 --> 2:07:20.960
 money and to make sure my family and friends and the whole city invested didn't lose their

2:07:20.960 --> 2:07:21.960
 money.

2:07:21.960 --> 2:07:24.640
 So it's a little different than if you take money from a venture fund, you take money

2:07:24.640 --> 2:07:25.640
 from a venture fund.

2:07:25.640 --> 2:07:27.760
 The venture fund, they want you to go big or go home.

2:07:27.760 --> 2:07:33.200
 They're kind of like expecting 9 out of 10 to fail or 99 out of 100 to fail.

2:07:33.200 --> 2:07:37.040
 It's different, I was at a barbell strategy, I was like, I can't fail.

2:07:37.040 --> 2:07:40.520
 I mean, I may not do super well, but I cannot lose their money.

2:07:40.520 --> 2:07:45.360
 So I'm going to do something I know can return a profit, but I want to have exposure to an

2:07:45.360 --> 2:07:46.360
 upside.

2:07:46.360 --> 2:07:48.000
 So that's what happened in Anaconda.

2:07:48.000 --> 2:07:51.460
 We didn't, there was lots of things we did not well in terms of that structure and I've

2:07:51.460 --> 2:07:53.920
 learned from since to have it better.

2:07:53.920 --> 2:07:59.960
 But we did a really good job of kind of attracting the interest around the area to get good people

2:07:59.960 --> 2:08:03.440
 working and then get funneled some money on some interesting projects.

2:08:03.440 --> 2:08:05.280
 Super excited about what came out of our energy there.

2:08:05.280 --> 2:08:06.280
 Like a lot did.

2:08:06.280 --> 2:08:08.360
 So what are some of the interesting projects?

2:08:08.360 --> 2:08:16.280
 So Dask, Numba, Bokeh, Kanda, there was a data shader, Panel, Holoviz.

2:08:16.280 --> 2:08:21.560
 These are all tools that are extremely relevant in terms of helping you build applications,

2:08:21.560 --> 2:08:23.680
 build tools, build faster code.

2:08:23.680 --> 2:08:25.680
 The Bokeh is applauding.

2:08:25.680 --> 2:08:26.680
 There's a couple I'm beginning.

2:08:26.680 --> 2:08:27.680
 Oh, JupiterLab.

2:08:27.680 --> 2:08:28.680
 JupiterLab came out of this too.

2:08:28.680 --> 2:08:29.680
 That's fascinating.

2:08:29.680 --> 2:08:30.680
 Yeah.

2:08:30.680 --> 2:08:31.680
 Okay.

2:08:31.680 --> 2:08:32.680
 So Bokeh does plotting.

2:08:32.680 --> 2:08:33.960
 Bokeh does plotting.

2:08:33.960 --> 2:08:37.600
 So Bokeh was one of the foundational things to say, I want to do plot in Python, but have

2:08:37.600 --> 2:08:39.000
 the things show up in a web.

2:08:39.000 --> 2:08:40.000
 Right.

2:08:40.000 --> 2:08:41.000
 That's right.

2:08:41.000 --> 2:08:42.000
 That's right.

2:08:42.000 --> 2:08:43.000
 That's right.

2:08:43.000 --> 2:08:47.760
 And plotting to me still, with all due respect to Matplotlib and Bokeh, it feels like still

2:08:47.760 --> 2:08:48.760
 an unsolved problem.

2:08:48.760 --> 2:08:49.760
 Oh, it is.

2:08:49.760 --> 2:08:50.760
 Not a solved problem.

2:08:50.760 --> 2:08:51.760
 It is.

2:08:51.760 --> 2:08:52.760
 It's a big problem.

2:08:52.760 --> 2:08:53.760
 Right.

2:08:53.760 --> 2:08:57.760
 Because you're, I mean, I don't know, it's visualization broadly, right?

2:08:57.760 --> 2:08:58.760
 Yes.

2:08:58.760 --> 2:08:59.760
 So important.

2:08:59.760 --> 2:09:03.520
 I think we've got a pretty good API story around certain use cases of plotting.

2:09:03.520 --> 2:09:07.480
 But there's a difference between static plots versus interactive plots versus, I'm an end

2:09:07.480 --> 2:09:11.480
 user, I just want to write a simple, for, you know, pandas started the idea of here's

2:09:11.480 --> 2:09:16.480
 a data frame on a dot plot, I'm just going to attach plot as a method to my object, which

2:09:16.480 --> 2:09:18.400
 was a little bit controversial, right?

2:09:18.400 --> 2:09:23.720
 But works pretty well actually, because there's a lot less you have to pass in, right?

2:09:23.720 --> 2:09:28.000
 You can just say, here's my object, you know what you are, you tell the visualization what

2:09:28.000 --> 2:09:29.120
 to do.

2:09:29.120 --> 2:09:33.200
 So that, and there's things like that that have not been, you know, super well developed

2:09:33.200 --> 2:09:36.400
 entirely, but Bokeh was focused on interactive plotting.

2:09:36.400 --> 2:09:42.800
 So you could, it's a short path between interactive plotting and application, dashboard application.

2:09:42.800 --> 2:09:44.760
 And there's some incredible work that got done there, right?

2:09:44.760 --> 2:09:49.520
 And it was a hard project because then you're basically doing JavaScript and Python.

2:09:49.520 --> 2:09:53.440
 So we wanted to tackle some of these hard problems and try to just go after them.

2:09:53.440 --> 2:09:55.880
 We got some DARPA funding to help, and it was super helpful.

2:09:55.880 --> 2:09:59.080
 It's a funny story there, we actually did two DARPA proposals, but one we were five

2:09:59.080 --> 2:10:03.120
 minutes late for, and DARPA has a very strict cutoff window.

2:10:03.120 --> 2:10:08.120
 And so I, we had two proposals, one for the Bokeh and one for actually Numba and the other

2:10:08.120 --> 2:10:09.120
 work.

2:10:09.120 --> 2:10:10.960
 Which one were you late for?

2:10:10.960 --> 2:10:13.000
 The foundation on the miracle work.

2:10:13.000 --> 2:10:14.000
 So Bokeh got funded.

2:10:14.000 --> 2:10:15.000
 Oh no.

2:10:15.000 --> 2:10:18.200
 Fortunately, Chris let us use some of the money to fund still some of the other foundational

2:10:18.200 --> 2:10:23.960
 work, but it wasn't as, yeah, his hands were tied, he couldn't do anything about it.

2:10:23.960 --> 2:10:25.960
 That was a whole interesting story.

2:10:25.960 --> 2:10:29.320
 So one of the incredible projects that you worked on is Conda.

2:10:29.320 --> 2:10:30.320
 Yes.

2:10:30.320 --> 2:10:31.320
 So what is Conda?

2:10:31.320 --> 2:10:32.320
 So how that came about?

2:10:32.320 --> 2:10:35.760
 Yeah, Conda, it was early on, like I said, was SciPy.

2:10:35.760 --> 2:10:38.040
 SciPy was a distribution masqueraderies in a library.

2:10:38.040 --> 2:10:41.400
 And you said, you heard me talking about compiler issues and trying to get the stuff shipped

2:10:41.400 --> 2:10:44.760
 and the fact that people can use your libraries if they have it.

2:10:44.760 --> 2:10:48.000
 So for a long time, we'd understood the packaging problem in Python.

2:10:48.000 --> 2:10:52.960
 And one of the first things we did at Continue Analytics, we came out of Conda, was organize

2:10:52.960 --> 2:10:56.220
 the PyData ecosystem in conjunction with NumFocus.

2:10:56.220 --> 2:11:01.440
 We actually started NumFocus with some other folks in the community the same year we started

2:11:01.440 --> 2:11:02.440
 in a content.

2:11:02.440 --> 2:11:06.960
 I said, we're going to build a corporation, but we also got to reify the community aspect

2:11:06.960 --> 2:11:07.960
 and build a nonprofit.

2:11:07.960 --> 2:11:08.960
 So we did both of those.

2:11:08.960 --> 2:11:15.000
 Can we pause real quick and can you say what is PyPy, the Python package index, like this

2:11:15.000 --> 2:11:19.000
 whole story of packaging in Python?

2:11:19.000 --> 2:11:20.960
 Yeah, that's what I'm going to get to actually.

2:11:20.960 --> 2:11:22.240
 This is exactly the journey I'm on.

2:11:22.240 --> 2:11:24.160
 This is sort of explain packaging in Python.

2:11:24.160 --> 2:11:28.640
 I think it's best expressed to the conversation I had with Gito at a conference where I said,

2:11:28.640 --> 2:11:31.240
 so packaging is kind of a problem.

2:11:31.240 --> 2:11:33.800
 And Gito said, I don't ever care about packaging.

2:11:33.800 --> 2:11:34.800
 I don't use it.

2:11:34.800 --> 2:11:36.280
 I don't install new libraries.

2:11:36.280 --> 2:11:39.000
 I'm like, I guess if you're the language creator and if you need something, you just

2:11:39.000 --> 2:11:40.640
 put it in the distribution.

2:11:40.640 --> 2:11:42.600
 Maybe you don't worry about packaging.

2:11:42.600 --> 2:11:45.400
 But Gito has never really cared about packaging, right?

2:11:45.400 --> 2:11:47.640
 And never really cared about the problem of distribution.

2:11:47.640 --> 2:11:48.640
 Somebody else's problem.

2:11:48.640 --> 2:11:51.120
 And that's a fair position to take, I think, as a language creator.

2:11:51.120 --> 2:11:55.400
 In fact, there's a philosophical question about should you have different development

2:11:55.400 --> 2:11:56.400
 packaging managers?

2:11:56.400 --> 2:11:58.400
 Should you have a package manager per language?

2:11:58.400 --> 2:11:59.760
 Is that really the right approach?

2:11:59.760 --> 2:12:04.320
 I think there are some answers of it is appropriate to have development tools.

2:12:04.320 --> 2:12:07.760
 And there's an aspect of development tool that is related to packaging.

2:12:07.760 --> 2:12:12.200
 And every language should have some story there to help their developers create.

2:12:12.200 --> 2:12:17.160
 So you should have language specific development tools that relate to package managers.

2:12:17.160 --> 2:12:21.320
 But then there's a very specific user story around package management that those language

2:12:21.320 --> 2:12:25.000
 specific package managers have to interact with and currently aren't doing a good job

2:12:25.000 --> 2:12:26.000
 of that.

2:12:26.000 --> 2:12:31.360
 That was one of the challenges of not seeing that difference and still exists in the difference

2:12:31.360 --> 2:12:32.360
 today.

2:12:32.360 --> 2:12:36.400
 Kanda always was a user, I'm going to use Python to do data science.

2:12:36.400 --> 2:12:38.480
 I'm going to use Python to do something.

2:12:38.480 --> 2:12:39.480
 How do I get this installed?

2:12:39.480 --> 2:12:41.240
 It was always focused on that.

2:12:41.240 --> 2:12:44.160
 So it didn't have a develop.

2:12:44.160 --> 2:12:46.080
 Classic example is PIP has a PIP develop.

2:12:46.080 --> 2:12:49.680
 It's like, I want to install this into my current development environment today.

2:12:49.680 --> 2:12:52.920
 Now, Kanda doesn't have that concept because it's not part of the story.

2:12:52.920 --> 2:13:03.200
 For people who don't know, PIP is a Python specific package manager.

2:13:03.200 --> 2:13:04.760
 That's exceptionally popular.

2:13:04.760 --> 2:13:06.720
 That's probably like the default thing you learn.

2:13:06.720 --> 2:13:07.720
 It's the default user.

2:13:07.720 --> 2:13:13.360
 So the story there emerged because what happened is in 2012, we had this meeting at the Google

2:13:13.360 --> 2:13:16.200
 Plex and Guido was there to come talk about what we're going to do, how we're going to

2:13:16.200 --> 2:13:21.320
 make things work better, and Wes McKinney, me, Peter, Peter has a great photo of me talking

2:13:21.320 --> 2:13:23.840
 to Guido and he pretends we're talking about this story.

2:13:23.840 --> 2:13:24.840
 Maybe we were.

2:13:24.840 --> 2:13:29.720
 But we did at that meeting talk about it and asked Guido, we need to fix packaging in Python.

2:13:29.720 --> 2:13:30.840
 I'm like, people can't get this stuff.

2:13:30.840 --> 2:13:32.320
 And he said, go fix it yourself.

2:13:32.320 --> 2:13:35.040
 I don't think we're going to do it.

2:13:35.040 --> 2:13:36.040
 All right.

2:13:36.040 --> 2:13:37.040
 The origin story right there.

2:13:37.040 --> 2:13:38.040
 All right.

2:13:38.040 --> 2:13:39.040
 You said, okay.

2:13:39.040 --> 2:13:40.040
 You said to do this ourselves.

2:13:40.040 --> 2:13:44.680
 At the same time, people did start to work on the packaging story in Python.

2:13:44.680 --> 2:13:45.680
 It just took a little longer.

2:13:45.680 --> 2:13:50.640
 So in 2012, kind of motivated by our training courses we were teaching, like very similar

2:13:50.640 --> 2:13:53.960
 to what you just mentioned about your mother, like it was motivated by the same purpose.

2:13:53.960 --> 2:13:57.400
 Like, how do we get this into people's hands and it's this big, long process that takes

2:13:57.400 --> 2:13:58.400
 too expensive?

2:13:58.400 --> 2:14:02.640
 It was actually hurting NumPy development because I would hear people were saying, don't make

2:14:02.640 --> 2:14:05.560
 that change to NumPy because I just spent a week getting my Python environment.

2:14:05.560 --> 2:14:10.600
 And if you change NumPy, you have to reinstall everything and reinstalling such a pain, don't

2:14:10.600 --> 2:14:11.600
 do it.

2:14:11.600 --> 2:14:12.600
 I'm like, wait.

2:14:12.600 --> 2:14:13.600
 Okay.

2:14:13.600 --> 2:14:16.160
 So now we're not making changes to a library because of the installation problem that will

2:14:16.160 --> 2:14:17.160
 cause for end users.

2:14:17.160 --> 2:14:18.160
 Okay.

2:14:18.160 --> 2:14:19.160
 There's a problem with pack.

2:14:19.160 --> 2:14:20.160
 There's a problem with installation.

2:14:20.160 --> 2:14:21.160
 We got to fix this.

2:14:21.160 --> 2:14:25.080
 So we said, we're going to make a distribution of Python and we'd previously done that, previously

2:14:25.080 --> 2:14:26.880
 done that at end thought.

2:14:26.880 --> 2:14:30.600
 I wanted to make one that would give away for free that one could just get like those critical

2:14:30.600 --> 2:14:34.560
 that we just get it, you know, it wasn't tied to a product, it was just you could get

2:14:34.560 --> 2:14:35.560
 it.

2:14:35.560 --> 2:14:39.280
 And then we had constantly thought about, well, do we just leverage RPM?

2:14:39.280 --> 2:14:42.400
 But the challenge had always been, we want a package manager that works on Windows, Mac

2:14:42.400 --> 2:14:45.200
 OS X and Linux the same, right?

2:14:45.200 --> 2:14:46.640
 And it wasn't there.

2:14:46.640 --> 2:14:48.040
 Like you don't have anything like that.

2:14:48.040 --> 2:14:54.560
 And for people who don't know, RPM is operating system specific package.

2:14:54.560 --> 2:14:55.560
 Correct.

2:14:55.560 --> 2:14:56.560
 It's an operating specific.

2:14:56.560 --> 2:14:57.560
 Yes.

2:14:57.560 --> 2:15:02.160
 So do you create the design that question is, do you create an umbrella package manager

2:15:02.160 --> 2:15:08.160
 that cross operating system, yes, that was the decision and a neighboring design questions.

2:15:08.160 --> 2:15:12.080
 Do you also create a package manager that spans multiple programming languages?

2:15:12.080 --> 2:15:13.080
 Correct.

2:15:13.080 --> 2:15:14.080
 Exactly.

2:15:14.080 --> 2:15:15.080
 That was the world we faced.

2:15:15.080 --> 2:15:19.160
 And we decided to go multiple operating systems, multiple and programming language independent

2:15:19.160 --> 2:15:23.640
 because even Python and particularly what was important was sci pi has a bunch of 4chan

2:15:23.640 --> 2:15:24.640
 in it.

2:15:24.640 --> 2:15:25.640
 Right.

2:15:25.640 --> 2:15:27.840
 And scikit learn has links to a bunch of C plus plus.

2:15:27.840 --> 2:15:30.040
 There's a lot of compiled code.

2:15:30.040 --> 2:15:34.440
 And the Python package manager, especially early on, didn't even support that.

2:15:34.440 --> 2:15:40.040
 So in 2000, so we released anaconda, which was just a distribution of libraries, but

2:15:40.040 --> 2:15:42.680
 we started to work on conda in 2012.

2:15:42.680 --> 2:15:46.760
 First version of conda came out in early 2013, summer of 2013.

2:15:46.760 --> 2:15:47.760
 And it was a package manager.

2:15:47.760 --> 2:15:49.520
 So you could say conda install scikit learn.

2:15:49.520 --> 2:15:54.200
 In fact, that was the scikit learn was a fantastic project that emerged.

2:15:54.200 --> 2:15:56.720
 Kind of it was the classic example of the sidekits.

2:15:56.720 --> 2:16:00.920
 I told, talked to me earlier about scipy being too big to be a single library.

2:16:00.920 --> 2:16:04.960
 Well, what the community had done is said, let's make scikits and there's scikit image

2:16:04.960 --> 2:16:05.960
 or scikit learn.

2:16:05.960 --> 2:16:07.720
 There's a lot of scikits.

2:16:07.720 --> 2:16:10.160
 And it was a fantastic move, you know, that the community did.

2:16:10.160 --> 2:16:11.160
 I didn't do it.

2:16:11.160 --> 2:16:12.560
 I was like, okay, that's good idea.

2:16:12.560 --> 2:16:13.560
 I didn't like the name.

2:16:13.560 --> 2:16:15.480
 I didn't like the fact you type scikit image.

2:16:15.480 --> 2:16:17.480
 I was like, that's going to be simpler.

2:16:17.480 --> 2:16:18.480
 SK learn.

2:16:18.480 --> 2:16:19.480
 We got to make that smaller.

2:16:19.480 --> 2:16:22.000
 I like typing all this stuff from imports.

2:16:22.000 --> 2:16:25.320
 So I was kind of a pressure that way, but I love the energy and love the fact that they

2:16:25.320 --> 2:16:29.640
 went out and they did it and DOS people, Jared Milman, and then of course, Gael, and there's

2:16:29.640 --> 2:16:34.720
 people I'm not even naming that scikit learn really emerged this fantastic project.

2:16:34.720 --> 2:16:36.720
 And the documentation around that is also incredible.

2:16:36.720 --> 2:16:37.720
 It was incredible.

2:16:37.720 --> 2:16:38.720
 Exactly.

2:16:38.720 --> 2:16:39.720
 I don't know who did that.

2:16:39.720 --> 2:16:40.720
 But they did a great job.

2:16:40.720 --> 2:16:45.240
 A lot of people in Inria, a lot of people, a lot of European contributors, Andreas, there's

2:16:45.240 --> 2:16:48.880
 some Andreas in the U.S. There's a lot of just people I just adore.

2:16:48.880 --> 2:16:51.480
 I think are amazing people.

2:16:51.480 --> 2:16:52.480
 Awesome use of scipy.

2:16:52.480 --> 2:16:55.680
 I love the fact that they were using scipy effectively because of my love, which is machine

2:16:55.680 --> 2:17:02.240
 learning, but couldn't install it because there's so many, so many dependencies, right?

2:17:02.240 --> 2:17:06.640
 So our use case of condo was cond install scikit learn, right?

2:17:06.640 --> 2:17:16.040
 And it was the best way to install scikit learn in 2013 to really 2018, 17, 18, pip finally

2:17:16.040 --> 2:17:17.040
 caught up.

2:17:17.040 --> 2:17:20.520
 I still think you should cond install scikit learn for the pip install scikit learn, but

2:17:20.520 --> 2:17:22.560
 you can pip install scikit learn.

2:17:22.560 --> 2:17:26.960
 The issue is the package they created was wheels, and pip does not handle the multi vendor

2:17:26.960 --> 2:17:27.960
 approach.

2:17:27.960 --> 2:17:30.600
 They don't handle the fact you have C++ libraries you're depending on.

2:17:30.600 --> 2:17:32.320
 They just stop at the Python boundary.

2:17:32.320 --> 2:17:36.240
 And so what you have to do in the wheel world is you have to vendor.

2:17:36.240 --> 2:17:38.600
 You have to take all of the binary and vendor it.

2:17:38.600 --> 2:17:43.280
 Now if your change happens in early dependency, you have to redo the whole wheel.

2:17:43.280 --> 2:17:47.040
 So TensorFlow is a good example, but you should not pip install TensorFlow.

2:17:47.040 --> 2:17:52.000
 It's a terrible idea if people do it because the popularity of pip, many people think,

2:17:52.000 --> 2:17:54.720
 of course, that's how I install everything in Python.

2:17:54.720 --> 2:17:56.920
 This is one of the big challenges.

2:17:56.920 --> 2:18:00.800
 You take a GitHub repository or just a basic blog post.

2:18:00.800 --> 2:18:05.720
 The number of time pip is mentioned over conda is like 100x to one.

2:18:05.720 --> 2:18:06.720
 Correct.

2:18:06.720 --> 2:18:07.720
 Correct.

2:18:07.720 --> 2:18:08.720
 And that was increasing.

2:18:08.720 --> 2:18:10.280
 It wasn't true early because pip didn't exist.

2:18:10.280 --> 2:18:11.280
 Right.

2:18:11.280 --> 2:18:12.280
 Conda came first.

2:18:12.280 --> 2:18:17.720
 Like the long tail of the internet documentation user generated, so that you think, how do

2:18:17.720 --> 2:18:22.080
 I install, Google, how do I install TensorFlow, you're just not going to see conda in that

2:18:22.080 --> 2:18:23.080
 first page.

2:18:23.080 --> 2:18:24.080
 Correct.

2:18:24.080 --> 2:18:25.080
 Exactly.

2:18:25.080 --> 2:18:29.520
 And today you would have in 2016, 2017.

2:18:29.520 --> 2:18:34.280
 And it's sad because conda solves a lot of usability issues.

2:18:34.280 --> 2:18:35.280
 Correct.

2:18:35.280 --> 2:18:36.480
 Especially super challenging thing.

2:18:36.480 --> 2:18:37.480
 I don't know.

2:18:37.480 --> 2:18:43.520
 One of the big pain points for me was just on the computer vision side, OpenCV installation

2:18:43.520 --> 2:18:44.520
 that...

2:18:44.520 --> 2:18:45.520
 Perfect example.

2:18:45.520 --> 2:18:46.520
 I think conda...

2:18:46.520 --> 2:18:47.520
 I don't know if conda solved that one.

2:18:47.520 --> 2:18:49.000
 Conda has an OpenCV package.

2:18:49.000 --> 2:18:50.000
 I don't know.

2:18:50.000 --> 2:18:53.480
 I certainly know pip has not solved...

2:18:53.480 --> 2:18:55.680
 I mean, there's complexities there because...

2:18:55.680 --> 2:18:56.680
 Right.

2:18:56.680 --> 2:18:57.680
 I actually don't know.

2:18:57.680 --> 2:19:03.720
 I should probably know a good answer for this, but if you compile OpenCV with certain

2:19:03.720 --> 2:19:07.600
 dependencies, you'll be able to do certain things.

2:19:07.600 --> 2:19:13.280
 So there's this kind of flexibility of what options you compile with.

2:19:13.280 --> 2:19:17.880
 And I don't think it's trivial to do that with conda or with...

2:19:17.880 --> 2:19:20.600
 So conda has a notion of variance of a package.

2:19:20.600 --> 2:19:23.680
 You can actually have different compilation versions of a package.

2:19:23.680 --> 2:19:26.240
 So not just the versions different, but oh, this is compiled with these optimizations

2:19:26.240 --> 2:19:27.240
 on.

2:19:27.240 --> 2:19:28.240
 So conda does have an answer.

2:19:28.240 --> 2:19:29.240
 Has those flavors.

2:19:29.240 --> 2:19:30.240
 Has flavors, basically.

2:19:30.240 --> 2:19:32.960
 Well, pip, as far as I know, does not have flavors.

2:19:32.960 --> 2:19:38.840
 You know, pip generally hasn't thought deeply about the binary dependency problem, right?

2:19:38.840 --> 2:19:43.760
 That's why, fundamentally, it doesn't work for the scipy ecosystem.

2:19:43.760 --> 2:19:44.760
 It barely...

2:19:44.760 --> 2:19:48.000
 You can sort of paper over it and duct tape it and it kind of works until it doesn't

2:19:48.000 --> 2:19:49.680
 and it falls apart entirely.

2:19:49.680 --> 2:19:51.680
 So it's been a mixed bag.

2:19:51.680 --> 2:19:52.680
 Like...

2:19:52.680 --> 2:19:56.200
 And I've been having lots of conversations with people over the years because, again,

2:19:56.200 --> 2:19:59.480
 it's an area where if you understand some things, but not all the things, but they've

2:19:59.480 --> 2:20:02.280
 done a great job of community appeal.

2:20:02.280 --> 2:20:07.320
 This is an area where, I think, and a conda, as a company, need to do some things in order

2:20:07.320 --> 2:20:10.560
 to make conda more community centric, right?

2:20:10.560 --> 2:20:11.560
 And this is a...

2:20:11.560 --> 2:20:13.400
 I talk about this all the time.

2:20:13.400 --> 2:20:15.160
 There's a balance between...

2:20:15.160 --> 2:20:16.160
 You have...

2:20:16.160 --> 2:20:18.400
 Every project starts with what I call company backed open source.

2:20:18.400 --> 2:20:23.520
 Even if the company is yourself, this is one person, just doing business as.

2:20:23.520 --> 2:20:28.600
 But ultimately for products to succeed virally and become massive influencers, they have

2:20:28.600 --> 2:20:29.600
 to create...

2:20:29.600 --> 2:20:30.600
 They have to get community people on board.

2:20:30.600 --> 2:20:32.240
 They have to get other people on board.

2:20:32.240 --> 2:20:35.240
 So it has to become community driven and a big part of that is engagement with those

2:20:35.240 --> 2:20:38.800
 people, empowering people, governance around it.

2:20:38.800 --> 2:20:39.800
 And there was...

2:20:39.800 --> 2:20:43.320
 And what happened with conda in the early days, pip emerged, and we did do some good

2:20:43.320 --> 2:20:44.320
 things.

2:20:44.320 --> 2:20:45.320
 Conda Forge.

2:20:45.320 --> 2:20:50.000
 Conda Forge community is sort of the community recipe creation community.

2:20:50.000 --> 2:20:55.080
 But conda itself, I still believe, and Peter is CEO of Anaconda, he's my cofounder.

2:20:55.080 --> 2:20:58.240
 I ran Anaconda until 2017, 2018.

2:20:58.240 --> 2:20:59.240
 Is Peter still in Anaconda?

2:20:59.240 --> 2:21:00.240
 Peter still in Anaconda, right?

2:21:00.240 --> 2:21:01.240
 We're still great friends.

2:21:01.240 --> 2:21:02.240
 We talk all the time.

2:21:02.240 --> 2:21:03.240
 I love him to death.

2:21:03.240 --> 2:21:08.040
 There's a long story there about why and how, and we can cover in some other podcasts,

2:21:08.040 --> 2:21:09.040
 perhaps.

2:21:09.040 --> 2:21:12.200
 It's sort of a more, maybe a more business focused one.

2:21:12.200 --> 2:21:17.880
 But this is one area where I think conda should be more community driven.

2:21:17.880 --> 2:21:21.320
 He should be pushing more to get more community contributors to conda.

2:21:21.320 --> 2:21:26.760
 And Anaconda shouldn't be fighting this battle.

2:21:26.760 --> 2:21:27.760
 It's actually a...

2:21:27.760 --> 2:21:28.760
 It's really a developer.

2:21:28.760 --> 2:21:32.120
 You said help the developers, and then they'll actually move us the right direction.

2:21:32.120 --> 2:21:36.640
 Well, that was the problem I have as many of the cool kids I know don't use conda.

2:21:36.640 --> 2:21:38.920
 And that, to me, is confusing.

2:21:38.920 --> 2:21:39.920
 It is confusing.

2:21:39.920 --> 2:21:43.120
 It's really a matter of, conda has some challenges, first of all.

2:21:43.120 --> 2:21:44.120
 Conda still needs to be improved.

2:21:44.120 --> 2:21:45.520
 There's lots of improvements to be made.

2:21:45.520 --> 2:21:47.680
 And it's that aspect of, wait, who's doing this?

2:21:47.680 --> 2:21:51.400
 And the fact that then the PiPA really stepped up.

2:21:51.400 --> 2:21:53.440
 They were not solving the problem at all.

2:21:53.440 --> 2:21:56.560
 And now they kind of got to where they're solving it for the most part.

2:21:56.560 --> 2:22:00.280
 And then, effectively, you could get conda solved a problem that was there.

2:22:00.280 --> 2:22:01.280
 And it still does.

2:22:01.280 --> 2:22:02.280
 And it's still...

2:22:02.280 --> 2:22:04.080
 There's still great things it can do.

2:22:04.080 --> 2:22:05.080
 But...

2:22:05.080 --> 2:22:08.040
 And we still use it all the time at QuantSite and with other clients.

2:22:08.040 --> 2:22:12.840
 But you can kind of do similar things with Pippin Docker, right?

2:22:12.840 --> 2:22:18.520
 So especially with the web development community, part of it, again, is there's a lot of different

2:22:18.520 --> 2:22:20.400
 kind of developers in the Python ecosystem.

2:22:20.400 --> 2:22:23.720
 And there's still a lack of some clear understanding.

2:22:23.720 --> 2:22:27.160
 I go to the Python conference all the time and there's only a few people in the PiPA

2:22:27.160 --> 2:22:28.360
 who get it.

2:22:28.360 --> 2:22:32.440
 And then others who are just massively trumpeting the power of PIP but just do not understand

2:22:32.440 --> 2:22:33.440
 the problem.

2:22:33.440 --> 2:22:34.440
 Yeah.

2:22:34.440 --> 2:22:38.360
 So one of the obvious things to me from a mom, from a non programmer perspective is the

2:22:38.360 --> 2:22:42.760
 across operating system usability that's much more natural.

2:22:42.760 --> 2:22:48.840
 So they use Windows and just it seems much easier to recommend conda there.

2:22:48.840 --> 2:22:51.880
 But then you should also recommend it across the board.

2:22:51.880 --> 2:22:53.880
 So I'll definitely...

2:22:53.880 --> 2:22:55.280
 But what I recommend now is a hybrid.

2:22:55.280 --> 2:22:56.280
 I do.

2:22:56.280 --> 2:22:57.280
 I mean, I have no problem with PIP.

2:22:57.280 --> 2:22:58.280
 Is it possible to use...

2:22:58.280 --> 2:22:59.280
 Oh, it is.

2:22:59.280 --> 2:23:00.280
 It is.

2:23:00.280 --> 2:23:03.400
 Like build the environment with PIP with conda, build an environment with conda.

2:23:03.400 --> 2:23:04.720
 And then PIP install on top of that.

2:23:04.720 --> 2:23:05.720
 That's fine.

2:23:05.720 --> 2:23:10.000
 Be careful about PIP installing OpenCV or TensorFlow or...

2:23:10.000 --> 2:23:13.720
 Because if somebody's allowed that, it's going to be most surely done in a way that can't

2:23:13.720 --> 2:23:15.200
 be updated that easily.

2:23:15.200 --> 2:23:21.840
 So install like the big packages, the infrastructure with conda and then the weirdos that like

2:23:21.840 --> 2:23:29.560
 the weird like implementation for some head of there's a cool library I used that based

2:23:29.560 --> 2:23:36.040
 on your location and time of day and date tells you the exact position of the sun relative

2:23:36.040 --> 2:23:37.040
 to the earth.

2:23:37.040 --> 2:23:38.040
 Oh, very cool.

2:23:38.040 --> 2:23:39.040
 Yeah.

2:23:39.040 --> 2:23:40.040
 And it's just like a simple library.

2:23:40.040 --> 2:23:41.040
 But it's very precise.

2:23:41.040 --> 2:23:42.040
 And I was like, all right.

2:23:42.040 --> 2:23:43.040
 But that was...

2:23:43.040 --> 2:23:44.040
 That was...

2:23:44.040 --> 2:23:45.040
 And it's PIP...

2:23:45.040 --> 2:23:50.680
 Well, the thing they did really well is Python developers who want to get their stuff published,

2:23:50.680 --> 2:23:52.080
 you have to have a PIP recipe.

2:23:52.080 --> 2:23:53.080
 Yeah.

2:23:53.080 --> 2:23:54.080
 Right?

2:23:54.080 --> 2:23:55.400
 I mean, even if it's...

2:23:55.400 --> 2:23:56.400
 The challenge is...

2:23:56.400 --> 2:23:59.000
 And there's a key thing that needs to be added to PIP.

2:23:59.000 --> 2:24:04.880
 Just simply add to PIP the ability to defer to a system package manager because it's recognized

2:24:04.880 --> 2:24:07.400
 you're not going to solve all the dependency problem.

2:24:07.400 --> 2:24:12.520
 So let like give up and allow the system package to work.

2:24:12.520 --> 2:24:15.200
 That way, Anaconda is installed and it has PIP.

2:24:15.200 --> 2:24:17.080
 It would default to conda to install and stuff.

2:24:17.080 --> 2:24:20.520
 But Red Hat RPM would default to RPM to install more things.

2:24:20.520 --> 2:24:24.200
 Like that's a key, not difficult, but somewhat work.

2:24:24.200 --> 2:24:26.080
 Some work feature needs to be added.

2:24:26.080 --> 2:24:28.720
 That's an example of something like I've known we need to root and do it.

2:24:28.720 --> 2:24:30.920
 I mean, it's where I wish I had more money.

2:24:30.920 --> 2:24:34.200
 I wish I was more successful in the business side, trying to get there.

2:24:34.200 --> 2:24:37.320
 But I wish my family, friends and full community that I know...

2:24:37.320 --> 2:24:38.320
 Was larger.

2:24:38.320 --> 2:24:43.000
...was larger and had more money because I know tons of things to do effectively with

2:24:43.000 --> 2:24:44.760
 more resources.

2:24:44.760 --> 2:24:48.920
 But I have not yet been successful a channel.

2:24:48.920 --> 2:24:49.920
 Tons of it.

2:24:49.920 --> 2:24:52.040
 I'm happy with what we've done.

2:24:52.040 --> 2:24:56.480
 We've created again at Quonsite what we created to get Anaconda started.

2:24:56.480 --> 2:24:59.480
 We created community to get Anaconda started, done it again with Quonsite.

2:24:59.480 --> 2:25:00.480
 Super excited by that.

2:25:00.480 --> 2:25:01.480
 By the way.

2:25:01.480 --> 2:25:02.480
 It took three years to do it.

2:25:02.480 --> 2:25:03.480
 What is Quonsite?

2:25:03.480 --> 2:25:04.480
 What is its mission?

2:25:04.480 --> 2:25:08.200
 We've talked a few times about different, fascinating aspects of it, but it's like

2:25:08.200 --> 2:25:09.200
 big picture.

2:25:09.200 --> 2:25:10.200
 What is Quonsite?

2:25:10.200 --> 2:25:11.200
 Big picture of Quonsite.

2:25:11.200 --> 2:25:14.600
 Quonsite is it's mission is to connect data to an open economy.

2:25:14.600 --> 2:25:17.800
 So it's basically consulting the pie data ecosystem.

2:25:17.800 --> 2:25:21.600
 It's a consulting company and what I've said when I started it was we're trying to create

2:25:21.600 --> 2:25:24.800
 products, people and technology.

2:25:24.800 --> 2:25:28.360
 So it's divided into two groups and a third one as well.

2:25:28.360 --> 2:25:32.040
 The two groups are a consulting services company that just helps people do data science and

2:25:32.040 --> 2:25:35.560
 data engineering and data management better and more efficiently.

2:25:35.560 --> 2:25:36.560
 Like full stack.

2:25:36.560 --> 2:25:37.560
 Like full stack.

2:25:37.560 --> 2:25:38.560
 Get a science.

2:25:38.560 --> 2:25:39.560
 Full thing.

2:25:39.560 --> 2:25:41.560
 We'll help you build a infrastructure if you're using Jupiter.

2:25:41.560 --> 2:25:45.280
 We do staff augmentation, need more programmers, help you use DAS more effectively, help you

2:25:45.280 --> 2:25:46.680
 use GPUs more effectively.

2:25:46.680 --> 2:25:48.480
 Basically, a lot of people need help.

2:25:48.480 --> 2:25:53.560
 So we do training as well to help people, you know, both immediate help and then get

2:25:53.560 --> 2:25:55.960
 learned from somebody.

2:25:55.960 --> 2:25:57.160
 We've added a bunch of stuff too.

2:25:57.160 --> 2:26:00.040
 We kind of separated some of these other things into another company called Open Teams

2:26:00.040 --> 2:26:01.280
 that we currently started.

2:26:01.280 --> 2:26:04.640
 One of the things I loved about what we did at Anaconda was creating a community innovation

2:26:04.640 --> 2:26:05.640
 team.

2:26:05.640 --> 2:26:06.800
 So I wanted to replicate that.

2:26:06.800 --> 2:26:09.360
 This time, we did a lot of innovation at Anaconda.

2:26:09.360 --> 2:26:13.800
 I wanted to do innovation, but also contribute to the projects that existed.

2:26:13.800 --> 2:26:19.160
 Like create a place where maintainers, so that SciPy and NumPy and all these projects

2:26:19.160 --> 2:26:22.800
 we already started can pay people to work on them and keep them going.

2:26:22.800 --> 2:26:23.800
 So that's labs.

2:26:23.800 --> 2:26:26.080
 QuantSite Labs is a separate organization.

2:26:26.080 --> 2:26:28.160
 It's a nonprofit mission.

2:26:28.160 --> 2:26:29.800
 The profits of QuantSite help fund it.

2:26:29.800 --> 2:26:35.200
 And in fact, every project that we have at QuantSite, a portion of the money, goes directly

2:26:35.200 --> 2:26:37.120
 to QuantSite Labs to help keep it funded.

2:26:37.120 --> 2:26:39.760
 So we've gotten several mechanisms that we keep QuantSite Labs funded.

2:26:39.760 --> 2:26:43.920
 And currently, I'm really excited about labs because it's been a mission for a long time.

2:26:43.920 --> 2:26:45.320
 What kind of projects are within labs?

2:26:45.320 --> 2:26:50.440
 So labs is working to make the software better, like make NumPy better, make SciPy better.

2:26:50.440 --> 2:26:52.440
 It only works on open source.

2:26:52.440 --> 2:26:56.920
 So if somebody wants to, so companies do, we have a thing called a community work order,

2:26:56.920 --> 2:26:57.920
 we call it.

2:26:57.920 --> 2:27:01.720
 If a company says, I want to make Spyder better, okay, cool.

2:27:01.720 --> 2:27:08.400
 You can pay for a month of a developer of Spyder or developer of NumPy or developer of SciPy.

2:27:08.400 --> 2:27:09.840
 You can't tell them what you want them to do.

2:27:09.840 --> 2:27:13.000
 You can give them your priorities and things you wish existed.

2:27:13.000 --> 2:27:17.400
 And they'll work on those priorities with the community to get what the community wants

2:27:17.400 --> 2:27:18.840
 and what emerges with the community wants.

2:27:18.840 --> 2:27:24.080
 Is there some aspect on the consulting side that is helping as we were talking about morphology

2:27:24.080 --> 2:27:25.080
 and so on?

2:27:25.080 --> 2:27:31.080
 Is there a specific application that are particularly like driving, sort of inspiring the need for

2:27:31.080 --> 2:27:32.080
 updates to SciPy?

2:27:32.080 --> 2:27:33.080
 Correct.

2:27:33.080 --> 2:27:34.080
 Absolutely.

2:27:34.080 --> 2:27:35.080
 Absolutely.

2:27:35.080 --> 2:27:36.080
 GPUs are absolutely one of them.

2:27:36.080 --> 2:27:37.080
 GPUs.

2:27:37.080 --> 2:27:38.080
 And new hardware beyond GPUs.

2:27:38.080 --> 2:27:39.080
 Dojo chip.

2:27:39.080 --> 2:27:42.480
 I'm hoping we'll have a chance to work on that perhaps.

2:27:42.480 --> 2:27:43.800
 Things like that are definitely driving it.

2:27:43.800 --> 2:27:47.760
 The other thing is driving is scalable, like speed and scale.

2:27:47.760 --> 2:27:52.040
 How do I write NumPy code or NumPy Lite code if I want it to run across a cluster?

2:27:52.040 --> 2:27:54.160
 Oh, that's Dask or maybe it's Ray.

2:27:54.160 --> 2:27:59.840
 I mean, there's sort of ways to do that now or there's Modin and there's, so pandas code,

2:27:59.840 --> 2:28:03.000
 NumPy code, SciPy code, second learn code that I want to scale.

2:28:03.000 --> 2:28:04.920
 So that's one big area.

2:28:04.920 --> 2:28:09.880
 Have you gotten a chance to chat with Andre and Elon about, because like...

2:28:09.880 --> 2:28:10.880
 No, I would love to, by the way.

2:28:10.880 --> 2:28:11.880
 Okay, great.

2:28:11.880 --> 2:28:12.880
 I'm not very loved to.

2:28:12.880 --> 2:28:14.920
 I just saw their Tesla AI days video.

2:28:14.920 --> 2:28:15.920
 Yeah.

2:28:15.920 --> 2:28:16.920
 Super exciting.

2:28:16.920 --> 2:28:19.880
 So this one of the, you know, I love great engineering, software engineering teams and

2:28:19.880 --> 2:28:23.040
 engineering teams in general and they're doing a lot of incredible stuff with Python.

2:28:23.040 --> 2:28:24.040
 They're like...

2:28:24.040 --> 2:28:25.040
 They are.

2:28:25.040 --> 2:28:26.040
 Revolutionary.

2:28:26.040 --> 2:28:28.360
 So many aspects of the machine learning pipeline.

2:28:28.360 --> 2:28:29.360
 I agree.

2:28:29.360 --> 2:28:31.920
 That's operating in the real world and so much of that is Python.

2:28:31.920 --> 2:28:37.240
 Like you said, the guy running, you know, Andre Kapathi, running autopilot is tweeting

2:28:37.240 --> 2:28:41.080
 about optimization of NumPy versus...

2:28:41.080 --> 2:28:42.880
 I'd love to talk to him.

2:28:42.880 --> 2:28:46.240
 In fact, we have at QuantSite, we've been fortunate enough to work with Facebook on

2:28:46.240 --> 2:28:47.240
 PyTorch directly.

2:28:47.240 --> 2:28:50.040
 So we have about 13 developers at QuantSite.

2:28:50.040 --> 2:28:52.600
 Some of them are in labs working directly on PyTorch.

2:28:52.600 --> 2:28:53.600
 On PyTorch.

2:28:53.600 --> 2:28:54.600
 That's great.

2:28:54.600 --> 2:28:55.600
 So I basically started QuantSite.

2:28:55.600 --> 2:28:59.520
 I went to both TensorFlow and PyTorch and said, hey, I want to help connect what you're

2:28:59.520 --> 2:29:03.240
 doing to the broader SciPy ecosystem because I see what you're doing.

2:29:03.240 --> 2:29:08.040
 We have this bigger mission that we want to make sure we don't lose energy here.

2:29:08.040 --> 2:29:12.240
 And Facebook responded really positively and I didn't get the same reaction.

2:29:12.240 --> 2:29:13.240
 Not yet.

2:29:13.240 --> 2:29:14.240
 Not yet.

2:29:14.240 --> 2:29:15.880
 I love the folks in TensorFlow.

2:29:15.880 --> 2:29:17.560
 I really love the folks in TensorFlow too.

2:29:17.560 --> 2:29:18.560
 They're fantastic.

2:29:18.560 --> 2:29:22.160
 I think it's just how it integrates with their business.

2:29:22.160 --> 2:29:23.880
 Like I said, there's a lot of reasons.

2:29:23.880 --> 2:29:27.200
 Just the timing, the integration with their business, what they're looking for.

2:29:27.200 --> 2:29:31.040
 They're probably looking for more users and I was looking to kind of kept some development

2:29:31.040 --> 2:29:33.920
 effort and they couldn't receive that as easily, I think.

2:29:33.920 --> 2:29:34.920
 So I'm hoping.

2:29:34.920 --> 2:29:37.800
 I'm really hopeful and love the people there.

2:29:37.800 --> 2:29:39.840
 What's the idea behind Open Teams?

2:29:39.840 --> 2:29:43.920
 So Open Teams, I'm super excited about Open Teams because it's one of the, I mentioned

2:29:43.920 --> 2:29:46.840
 my idea for investing directly in open source.

2:29:46.840 --> 2:29:48.920
 So that's a concept called FaroSS.

2:29:48.920 --> 2:29:52.720
 But one of the things we, when we started QuantSite, we knew we would do is we develop

2:29:52.720 --> 2:29:55.080
 products and ideas and new companies might come out.

2:29:55.080 --> 2:29:57.720
 At Anaconda, this was clear, right?

2:29:57.720 --> 2:30:02.080
 At Anaconda, we did so much innovation that like five or six companies could have come

2:30:02.080 --> 2:30:03.080
 out of that.

2:30:03.080 --> 2:30:04.880
 And we just didn't structure it so they could.

2:30:04.880 --> 2:30:05.880
 But in fact, they have.

2:30:05.880 --> 2:30:10.120
 You look at BASC, there's two companies coming out of BASC, Bokeh could be a company.

2:30:10.120 --> 2:30:13.240
 There's like lots of companies that could exist off the work we did there.

2:30:13.240 --> 2:30:18.160
 And so I thought, oh, here's a recipe for an incubation, a concept that we could actually

2:30:18.160 --> 2:30:20.520
 spawn new companies and new innovations.

2:30:20.520 --> 2:30:25.760
 And then the idea has always been, well, money they earn should come back to fund the open

2:30:25.760 --> 2:30:27.260
 source project.

2:30:27.260 --> 2:30:30.720
 So Labs is, I think there should be a lot of things like QuantSite Labs.

2:30:30.720 --> 2:30:32.600
 I think this concept is one that scales.

2:30:32.600 --> 2:30:35.360
 You could have a lot of open source research labs.

2:30:35.360 --> 2:30:38.440
 Along the way, so in 2018, when the bigger idea came how to make open source investor,

2:30:38.440 --> 2:30:39.600
 I said, oh, I need to write it.

2:30:39.600 --> 2:30:40.600
 I need to create a venture fund.

2:30:40.600 --> 2:30:44.560
 So we created a venture fund called QuantSite Initiate at the same time.

2:30:44.560 --> 2:30:46.600
 It's an angel fund, really.

2:30:46.600 --> 2:30:47.920
 We started to learn that process.

2:30:47.920 --> 2:30:48.920
 How do we actually do this?

2:30:48.920 --> 2:30:49.920
 How do we get LPs?

2:30:49.920 --> 2:30:52.560
 How do we go in this direction and build a fund?

2:30:52.560 --> 2:30:55.840
 And I'm like, every venture fund should have an associated open source research lab.

2:30:55.840 --> 2:30:56.840
 There's just no reason.

2:30:56.840 --> 2:31:01.960
 Like our venture fund, the carried interest portion of it goes to the lab.

2:31:01.960 --> 2:31:03.360
 It directly will fund the lab.

2:31:03.360 --> 2:31:04.360
 That's fascinating by the way.

2:31:04.360 --> 2:31:08.600
 So you use the power of the organic formation of teams in the open source community and

2:31:08.600 --> 2:31:15.440
 then naturally that leads to a business that can make a lot of money and then it always

2:31:15.440 --> 2:31:17.360
 maintains and loops back to the open source.

2:31:17.360 --> 2:31:18.360
 Loops back to open source.

2:31:18.360 --> 2:31:19.360
 Exactly.

2:31:19.360 --> 2:31:20.360
 There's a lot of fit.

2:31:20.360 --> 2:31:22.560
 There's absolutely a repeatable pattern there.

2:31:22.560 --> 2:31:27.360
 And it's also beneficial because, oh, I have natural connections to the open source.

2:31:27.360 --> 2:31:32.040
 If I have an open source research lab, they'll all be out there talking to people.

2:31:32.040 --> 2:31:37.040
 And so we've had a chance to talk to a lot of early stage companies and our fund focused

2:31:37.040 --> 2:31:38.040
 on the early stage.

2:31:38.040 --> 2:31:42.000
 So QuantSite has the services, the lab, the fund.

2:31:42.000 --> 2:31:44.160
 In that process, a lot of stuff started to happen.

2:31:44.160 --> 2:31:48.160
 They're like, oh, we started to do recruiting and support and training.

2:31:48.160 --> 2:31:51.680
 And I was starting to build a bigger sales team and marketing team and people besides

2:31:51.680 --> 2:31:52.680
 just developers.

2:31:52.680 --> 2:31:56.920
 And one of the challenges with that is you end up with different cultural aspects.

2:31:56.920 --> 2:32:02.320
 Developers, in any company you go to, you can go look, is this a business led company,

2:32:02.320 --> 2:32:03.320
 developer led company?

2:32:03.320 --> 2:32:04.320
 Do they coexist?

2:32:04.320 --> 2:32:05.960
 Are they, what's the interface between them?

2:32:05.960 --> 2:32:09.080
 There's always a bit of a tension there, like we were talking about before.

2:32:09.080 --> 2:32:10.320
 What is the tension there?

2:32:10.320 --> 2:32:11.400
 With open teams, I thought, wait a minute.

2:32:11.400 --> 2:32:15.720
 We can actually just create this concept of QuantSite plus labs.

2:32:15.720 --> 2:32:20.920
 While it's specific to the Piedata ecosystem, the concept is general for all open source.

2:32:20.920 --> 2:32:26.440
 So open teams emerged as a, oh, we can create a business development company for many, many

2:32:26.440 --> 2:32:28.520
 QuantSites, like thousands of QuantSites.

2:32:28.520 --> 2:32:33.560
 And it can be a marketplace to connect, essentially be the enterprise software company of the

2:32:33.560 --> 2:32:34.560
 future.

2:32:34.560 --> 2:32:38.560
 If you look at what enterprise software wants from the customer side, and during this journey

2:32:38.560 --> 2:32:44.600
 I've had the chance to work and sell to lots of companies, Exxon and Shell and Davey Morgan

2:32:44.600 --> 2:32:48.400
 of America, like the Fortune 100, and talk to a lot of people in procurement and see

2:32:48.400 --> 2:32:50.520
 what are they buying and why are they buying?

2:32:50.520 --> 2:32:53.600
 So I don't know everything, but I've learned a lot about, oh, what are they really looking

2:32:53.600 --> 2:32:54.600
 for?

2:32:54.600 --> 2:32:56.520
 And they're looking for solutions.

2:32:56.520 --> 2:33:01.280
 They're constantly given products from enterprise software.

2:33:01.280 --> 2:33:03.680
 Here's open source, these enterprise software, now I buy it, and then they have to stitch

2:33:03.680 --> 2:33:06.080
 it together into a solution.

2:33:06.080 --> 2:33:08.920
 Open source is fantastic for gluing those solutions together.

2:33:08.920 --> 2:33:13.320
 So whereas they keep getting new platforms they're trying to buy, but most open source,

2:33:13.320 --> 2:33:18.480
 most enterprises want is tools that they can customize that are as inexpensive as they

2:33:18.480 --> 2:33:19.480
 can.

2:33:19.480 --> 2:33:20.480
 Yeah.

2:33:20.480 --> 2:33:22.480
 And so you almost want to maintain the connection to the open source because that's going to

2:33:22.480 --> 2:33:23.480
 be the tools.

2:33:23.480 --> 2:33:24.480
 Yes.

2:33:24.480 --> 2:33:26.320
 So open teams is about solving enterprise software problems.

2:33:26.320 --> 2:33:27.320
 Brilliant.

2:33:27.320 --> 2:33:28.320
 Brilliant idea, by the way.

2:33:28.320 --> 2:33:31.000
 With a connect, but we do it honoring the topology.

2:33:31.000 --> 2:33:32.560
 We don't hire all the people.

2:33:32.560 --> 2:33:37.240
 We are a network connecting the sales energy and the procurement energy, and we were on

2:33:37.240 --> 2:33:41.400
 the business side, get the deals closed, and then have a network of partners like QuantSite

2:33:41.400 --> 2:33:45.960
 and others, who we hand the deals to, right, to actually do the work, and then we have

2:33:45.960 --> 2:33:49.360
 to maintain, I feel like we have to maintain some level of quality control so that the

2:33:49.360 --> 2:33:52.200
 client can rely on open teams to ensure their deliveries.

2:33:52.200 --> 2:33:55.480
 It's not just, here's a lead, go figure that out, but no, we're going to make sure you

2:33:55.480 --> 2:33:56.480
 get what you need.

2:33:56.480 --> 2:33:57.480
 Yeah.

2:33:57.480 --> 2:34:01.200
 By the way, it's such a skill, and I don't know if I have the patience, I will have the

2:34:01.200 --> 2:34:06.280
 patience to talk to the business people, or more specifically, I mean, there's all kinds

2:34:06.280 --> 2:34:10.880
 of flavors of business people, or like marketing people.

2:34:10.880 --> 2:34:11.880
 There's a challenge.

2:34:11.880 --> 2:34:15.720
 I hear what you're saying, because I've had the same challenge, and it's true.

2:34:15.720 --> 2:34:18.400
 There's some times you think, okay, this is way over a lot.

2:34:18.400 --> 2:34:19.400
 Yeah.

2:34:19.400 --> 2:34:22.360
 You have to become an adult, and you have to, because the companies have needs.

2:34:22.360 --> 2:34:27.040
 They have ways to make money, and they also want to learn and grow, and yet it's your

2:34:27.040 --> 2:34:31.080
 job to kind of educate them in the best way, like the value of open source, for example.

2:34:31.080 --> 2:34:32.080
 Right.

2:34:32.080 --> 2:34:35.120
 And I'm really grateful for all my experiences over the past 14 years, understanding that

2:34:35.120 --> 2:34:38.560
 side of it, and still learning, for sure, but not just understanding from companies,

2:34:38.560 --> 2:34:42.440
 but also dealing with marketing professionals, and sales professionals, and people that make

2:34:42.440 --> 2:34:45.160
 a career out of that, and understanding what they're thinking about, and also understanding,

2:34:45.160 --> 2:34:46.880
 well, let's make this better.

2:34:46.880 --> 2:34:51.840
 We can really make a place, like open teams I see as the transmission layer between companies

2:34:51.840 --> 2:34:55.880
 and open source communities, producing enterprise software solutions.

2:34:55.880 --> 2:35:00.320
 Eventually we want to, like today, we're taking on SaaS, and MATLAB, and tools that we know

2:35:00.320 --> 2:35:01.880
 we can replace for folks.

2:35:01.880 --> 2:35:05.400
 Really anytime you have a software tool at an organization where you have to do a lot

2:35:05.400 --> 2:35:08.540
 of customization or make it work for you, like it's not just buying this thing off

2:35:08.540 --> 2:35:09.540
 the shelf and it works.

2:35:09.540 --> 2:35:13.120
 It's like, okay, you buy this system, and then you customize it a lot, usually with

2:35:13.120 --> 2:35:17.280
 expensive consultants, to actually make it work for you.

2:35:17.280 --> 2:35:20.600
 All of those should be replaced by open source foundations, with the same customization.

2:35:20.600 --> 2:35:25.360
 Really, you're doing such important work, such important work in these giant organizations

2:35:25.360 --> 2:35:30.440
 that are doing exactly that, taking some proprietary software and hiring a huge team of consultants

2:35:30.440 --> 2:35:34.040
 that customize it, and then that whole thing gets outdated quick.

2:35:34.040 --> 2:35:35.040
 Correct.

2:35:35.040 --> 2:35:36.040
 Right.

2:35:36.040 --> 2:35:37.040
 I mean, that's brilliant.

2:35:37.040 --> 2:35:38.040
 Right.

2:35:38.040 --> 2:35:44.560
 The solution to that is kind of what Tesla is doing a little bit of, which is basically

2:35:44.560 --> 2:35:48.200
 build up a software engineering team, like build a team from scratch.

2:35:48.200 --> 2:35:50.000
 Build a team from scratch, and companies are doing it well.

2:35:50.000 --> 2:35:51.000
 That's what they're doing right now.

2:35:51.000 --> 2:35:52.000
 Yeah.

2:35:52.000 --> 2:35:53.000
 Right?

2:35:53.000 --> 2:35:54.000
 Exactly.

2:35:54.000 --> 2:35:55.000
 That's okay.

2:35:55.000 --> 2:35:56.000
 And you're creating a pathology for some of that.

2:35:56.000 --> 2:35:57.000
 You're right.

2:35:57.000 --> 2:35:58.000
 You just don't have to do it.

2:35:58.000 --> 2:35:59.000
 That's not the only answer.

2:35:59.000 --> 2:36:00.000
 Right?

2:36:00.000 --> 2:36:01.000
 And so other companies can access this, be more accessible.

2:36:01.000 --> 2:36:03.960
 We really, let's really say, open team is the future of enterprise software.

2:36:03.960 --> 2:36:05.040
 We're still early.

2:36:05.040 --> 2:36:08.760
 This idea just percolated over the past year as we've kind of grown quantized and realized

2:36:08.760 --> 2:36:10.520
 the extensibility of it.

2:36:10.520 --> 2:36:17.000
 We just finished in our seed round to help get more salespeople and then push the messaging

2:36:17.000 --> 2:36:18.000
 correctly.

2:36:18.000 --> 2:36:20.600
 And there's lots of tools we're building to make this easier, like we want to automate

2:36:20.600 --> 2:36:21.800
 the processes.

2:36:21.800 --> 2:36:25.280
 We feel like a lot of the power is the efficiency of the sales process.

2:36:25.280 --> 2:36:31.520
 There's a lot of wasted energy in small teams and the sales energy to get into large companies

2:36:31.520 --> 2:36:32.520
 and make a deal.

2:36:32.520 --> 2:36:34.720
 There's a lot of money spent on that process.

2:36:34.720 --> 2:36:36.640
 Creating the tools and processes for that sales.

2:36:36.640 --> 2:36:41.000
 So make that super seamless so a single company can go, oh, I've got my contract with open

2:36:41.000 --> 2:36:42.000
 teams.

2:36:42.000 --> 2:36:43.000
 We've got a subscription they can get.

2:36:43.000 --> 2:36:45.360
 They can make that procurement seamless.

2:36:45.360 --> 2:36:48.840
 And then the fact they have access to the entire open source ecosystem.

2:36:48.840 --> 2:36:53.800
 And we have a part of our work that's embracing open source ecosystems and making sure we're

2:36:53.800 --> 2:36:55.040
 doing things useful for them.

2:36:55.040 --> 2:36:56.240
 We're serving them.

2:36:56.240 --> 2:36:59.320
 And then companies making sure they're getting solutions they care about.

2:36:59.320 --> 2:37:03.000
 And then figuring out which targets we have.

2:37:03.000 --> 2:37:06.160
 We're not taking on all of open source, all of enterprise software yet.

2:37:06.160 --> 2:37:07.160
 But we're...

2:37:07.160 --> 2:37:08.560
 Well, this feels like the future.

2:37:08.560 --> 2:37:10.760
 The idea and the vision is brilliant.

2:37:10.760 --> 2:37:15.680
 Kasko, why do you think Microsoft bought GitHub and what do you think is the future

2:37:15.680 --> 2:37:16.680
 of GitHub?

2:37:16.680 --> 2:37:17.680
 Great point.

2:37:17.680 --> 2:37:18.680
 Great point.

2:37:18.680 --> 2:37:19.680
 I thought it was a brilliant move.

2:37:19.680 --> 2:37:22.920
 I think they did because Microsoft has always had a developer centric culture, like they

2:37:22.920 --> 2:37:23.920
 always have.

2:37:23.920 --> 2:37:27.080
 Like one of the things Microsoft's always done well is understand that their power is developers,

2:37:27.080 --> 2:37:28.080
 right?

2:37:28.080 --> 2:37:33.840
 And Balmer didn't necessarily make a good meme about how he approached that, but names are

2:37:33.840 --> 2:37:34.840
 broadening that.

2:37:34.840 --> 2:37:35.840
 I think that's why.

2:37:35.840 --> 2:37:38.560
 Because they recognize GitHub is where developers are at, right?

2:37:38.560 --> 2:37:39.560
 And so...

2:37:39.560 --> 2:37:42.160
 But do they have a vision like open teams type of situation, right?

2:37:42.160 --> 2:37:43.160
 I don't think so yet.

2:37:43.160 --> 2:37:44.160
 I mean...

2:37:44.160 --> 2:37:50.320
 Are they just basically throwing money at developers to show their support without a topology?

2:37:50.320 --> 2:37:55.280
 Like you put it like a way to leverage that, like to give developers actual money.

2:37:55.280 --> 2:37:56.280
 Right.

2:37:56.280 --> 2:37:57.280
 I don't think so.

2:37:57.280 --> 2:37:58.280
 It's still...

2:37:58.280 --> 2:38:00.480
 It's an enterprise software company and they make a bunch of money.

2:38:00.480 --> 2:38:01.480
 They make a bunch of games.

2:38:01.480 --> 2:38:02.640
 They're a big company.

2:38:02.640 --> 2:38:03.720
 They sell products.

2:38:03.720 --> 2:38:07.960
 I think part of it is they know there's opportunity to make money from GitHub, right?

2:38:07.960 --> 2:38:13.200
 There's definitely a business there to sell to developers or to sell to people using development.

2:38:13.200 --> 2:38:14.200
 I think there's part of that.

2:38:14.200 --> 2:38:19.960
 I think part of it is also they had definitely wanted to recognize that you need to value

2:38:19.960 --> 2:38:23.960
 open source to get great developers, which is an important concept that was emerging

2:38:23.960 --> 2:38:30.160
 over the past 10 years that paid by data, we were able to convince JPMorgan to support

2:38:30.160 --> 2:38:32.080
 by data because of that fact, right?

2:38:32.080 --> 2:38:34.720
 That was where the money for them putting a couple of hundred thousand into supporting

2:38:34.720 --> 2:38:39.000
 by data for several conferences was they want developers and they realized that developers

2:38:39.000 --> 2:38:40.800
 want to participate in open source.

2:38:40.800 --> 2:38:44.800
 So enterprise software folks don't always understand how their software gets used.

2:38:44.800 --> 2:38:50.120
 Having spent a lot of time on the floors at JPMorgan in Shell and ExxonMobil, you see,

2:38:50.120 --> 2:38:53.280
 oh, these companies have large development teams.

2:38:53.280 --> 2:38:56.800
 And then they're kind of dealing with the what's being delivered to them.

2:38:56.800 --> 2:39:00.400
 So I really feel kind of a privilege that I had a chance to learn some of these people

2:39:00.400 --> 2:39:06.880
 and see what they're doing and even work alongside them as a consultant, using open

2:39:06.880 --> 2:39:10.160
 source and trying to figure out how to make this work inside of our large organization.

2:39:10.160 --> 2:39:14.800
 Some of it is actually for a large organization, some of it is messaging to the world that

2:39:14.800 --> 2:39:19.120
 you care about developers and you care.

2:39:19.120 --> 2:39:24.840
 For example, like at Ford, because I talked to them, the car companies, right?

2:39:24.840 --> 2:39:28.800
 They want to attract, you know, you want to take on Tesla and autopilot.

2:39:28.800 --> 2:39:30.040
 You want to take that, right?

2:39:30.040 --> 2:39:31.840
 And so what do you do there?

2:39:31.840 --> 2:39:36.680
 You show that you're cool, like you try to show off that you care about developers and

2:39:36.680 --> 2:39:39.280
 they have a lot of trouble doing that.

2:39:39.280 --> 2:39:43.880
 And like one way, I think like Ford should have bought GitHub, like just to show off

2:39:43.880 --> 2:39:48.680
 like these old school companies and it's in a lot of different industries.

2:39:48.680 --> 2:39:54.360
 There's probably different ways, it's probably an art to show that you care to developers.

2:39:54.360 --> 2:40:00.800
 And the developers, it's exactly like, for example, just spitballing here, but like

2:40:00.800 --> 2:40:10.040
 Ford or somebody like that could give $100 million to the development of NumPy and like

2:40:10.040 --> 2:40:16.320
 literally look at like the top most popular projects in Python and just say, we're just

2:40:16.320 --> 2:40:17.320
 going to give them money.

2:40:17.320 --> 2:40:18.320
 Right?

2:40:18.320 --> 2:40:20.480
 You want to immediately make you cool?

2:40:20.480 --> 2:40:21.480
 They could actually.

2:40:21.480 --> 2:40:22.480
 Yeah.

2:40:22.480 --> 2:40:24.520
 And in fact, you set up NumFocus to make it easy.

2:40:24.520 --> 2:40:28.600
 But the challenge was is also you have to have some business development.

2:40:28.600 --> 2:40:31.440
 Like it's a bit of a, it's a bit of a seeding problem, right?

2:40:31.440 --> 2:40:34.240
 And you look at how I've talked to the folks at Linux Foundation, know how they're doing

2:40:34.240 --> 2:40:35.240
 it.

2:40:35.240 --> 2:40:40.040
 I know how, and starting NumFocus, because we had two babies in 2012, one was Anaconda,

2:40:40.040 --> 2:40:41.040
 one was NumFocus, right?

2:40:41.040 --> 2:40:42.760
 And they were both important efforts.

2:40:42.760 --> 2:40:47.080
 They had distinct journeys and super grateful that both existed and still grateful both

2:40:47.080 --> 2:40:49.000
 exist.

2:40:49.000 --> 2:40:54.400
 But there's different energies in getting donations as there is getting, this is important

2:40:54.400 --> 2:40:55.480
 to my business.

2:40:55.480 --> 2:40:59.640
 Like I'm selling something that, this is not a, this is, I'm going to make money this

2:40:59.640 --> 2:41:00.640
 way.

2:41:00.640 --> 2:41:04.400
 Like if you can tie it, if you can tie the message to an ROI for the company, it becomes

2:41:04.400 --> 2:41:05.400
 a brainer.

2:41:05.400 --> 2:41:06.400
 That's more effective.

2:41:06.400 --> 2:41:07.400
 It's much more effective, right?

2:41:07.400 --> 2:41:09.560
 So, and there are rational arguments to make.

2:41:09.560 --> 2:41:12.320
 I've tried to have conversations with marketing, especially marketing departments.

2:41:12.320 --> 2:41:17.040
 Like very early on it was clear to me that, oh, you could just take a fraction of your

2:41:17.040 --> 2:41:22.240
 marketing budget and just spend it on open source development and you get better results

2:41:22.240 --> 2:41:23.240
 from your marketing.

2:41:23.240 --> 2:41:24.240
 Like because.

2:41:24.240 --> 2:41:28.120
 How did those, can I, sorry, I'm going to try not to go around here.

2:41:28.120 --> 2:41:31.680
 What have you learned from the interaction with the marketing folks on that kind of,

2:41:31.680 --> 2:41:37.200
 because you gave a great example of something that will obviously be much better investment

2:41:37.200 --> 2:41:40.400
 in terms of marketing is supporting open source projects.

2:41:40.400 --> 2:41:44.960
 The challenge is not dissimilar from the challenge you have in academia of the different

2:41:44.960 --> 2:41:46.920
 colleges, right?

2:41:46.920 --> 2:41:50.080
 Challenge gets very specific and very channeled, right?

2:41:50.080 --> 2:41:54.800
 And so people get, they get a lot of learning in the thing they know about and it's hard

2:41:54.800 --> 2:42:00.680
 then to bridge that and to get them to think differently enough to have a sense that you

2:42:00.680 --> 2:42:02.920
 might have something to offer because it's different.

2:42:02.920 --> 2:42:04.360
 It's like, well, how do I implement that?

2:42:04.360 --> 2:42:05.920
 How do I, what do I do with that?

2:42:05.920 --> 2:42:07.720
 Like, do I, which budget do I take from?

2:42:07.720 --> 2:42:12.640
 Do I slow down my spend on Google ads or my spend on Facebook ads or do I not hire a

2:42:12.640 --> 2:42:17.200
 content creator and stay like, like there's an operational aspect to that that you have

2:42:17.200 --> 2:42:19.120
 to be the CMO, right?

2:42:19.120 --> 2:42:20.120
 Or the CEO.

2:42:20.120 --> 2:42:21.120
 You have to get the right level.

2:42:21.120 --> 2:42:23.960
 So you have to hire at a high position level.

2:42:23.960 --> 2:42:24.960
 Right.

2:42:24.960 --> 2:42:25.960
 People that care about this.

2:42:25.960 --> 2:42:26.960
 Right.

2:42:26.960 --> 2:42:27.960
 Or they won't know how.

2:42:27.960 --> 2:42:28.960
 Right.

2:42:28.960 --> 2:42:29.960
 And because you can also do it very clumsily.

2:42:29.960 --> 2:42:30.960
 Yeah.

2:42:30.960 --> 2:42:31.960
 Right.

2:42:31.960 --> 2:42:35.600
 And I've seen, because you can, you absolutely have to honor and recognize the people you're

2:42:35.600 --> 2:42:38.840
 going to and the fact that if you just throw money at them, it could actually create more

2:42:38.840 --> 2:42:39.840
 problems.

2:42:39.840 --> 2:42:40.840
 Can I just say, this is not you saying.

2:42:40.840 --> 2:42:44.360
 Can I just, because I just need, I need, I need to say this.

2:42:44.360 --> 2:42:51.760
 I've been very surprised how often marketing people are terrible at marketing.

2:42:51.760 --> 2:42:58.360
 I feel like the best marketing is doing something novel and unique that anticipates the future.

2:42:58.360 --> 2:43:04.680
 It feels like so much of the marketing practice is like what they took in school or maybe

2:43:04.680 --> 2:43:08.720
 they're studying from what was the best thing that was done in the past decade.

2:43:08.720 --> 2:43:13.840
 And they're just repeating that over and over as opposed to innovating, like taking the risk.

2:43:13.840 --> 2:43:14.840
 To me, marketing.

2:43:14.840 --> 2:43:15.840
 That's a great point.

2:43:15.840 --> 2:43:16.840
 Is taking the big risk.

2:43:16.840 --> 2:43:17.840
 That's a great point.

2:43:17.840 --> 2:43:18.840
 And being the first one to risk.

2:43:18.840 --> 2:43:19.840
 Yeah.

2:43:19.840 --> 2:43:20.840
 And they're not.

2:43:20.840 --> 2:43:21.840
 There's an aspect of data observation from that risk.

2:43:21.840 --> 2:43:22.840
 Right.

2:43:22.840 --> 2:43:26.040
 That's, that's, that's, I think it's shared what they're doing already, but it absolutely,

2:43:26.040 --> 2:43:27.760
 it's about, I think it's content.

2:43:27.760 --> 2:43:32.960
 Like there's this whole world on content marketing that you could almost say, well, yeah, it can

2:43:32.960 --> 2:43:36.560
 get over, you can get, you can get inundated with stuff that's not relevant to you.

2:43:36.560 --> 2:43:40.680
 Because what you're saying would be highly relevant and highly useful and highly, highly

2:43:40.680 --> 2:43:41.680
 beneficial.

2:43:41.680 --> 2:43:42.680
 Yeah.

2:43:42.680 --> 2:43:43.680
 But it's, it's a risk.

2:43:43.680 --> 2:43:46.320
 I mean, that's why sort of there's a lot of innovative ways of doing that.

2:43:46.320 --> 2:43:49.960
 Tesla is an example of people that basically don't do marketing.

2:43:49.960 --> 2:43:55.720
 They do marketing in a very like, let's say Elon hired a person who's just good at Twitter

2:43:55.720 --> 2:43:57.480
 for running Tesla's Twitter account.

2:43:57.480 --> 2:43:58.480
 No, right.

2:43:58.480 --> 2:43:59.480
 Right.

2:43:59.480 --> 2:44:00.840
 I mean, that's exactly what you want to be doing.

2:44:00.840 --> 2:44:02.720
 You want to be constantly innovating in the.

2:44:02.720 --> 2:44:03.720
 Right.

2:44:03.720 --> 2:44:04.720
 There's an aspect of telling.

2:44:04.720 --> 2:44:08.440
 I've definitely seen people doing great work where you're not talking about it.

2:44:08.440 --> 2:44:10.880
 Like I would say that's actually a problem I have right now with Quonsite Labs.

2:44:10.880 --> 2:44:13.480
 Quonsite Labs has been doing amazing work, really excited about it.

2:44:13.480 --> 2:44:15.520
 We have not been talking about it enough.

2:44:15.520 --> 2:44:16.520
 We haven't been.

2:44:16.520 --> 2:44:17.760
 And there's different ways to talk about it.

2:44:17.760 --> 2:44:20.920
 There's different ways to, there's different channels to which to communicate.

2:44:20.920 --> 2:44:27.920
 There's also like, I'll just throw some shade at companies I love.

2:44:27.920 --> 2:44:30.800
 So for example, iRobot, I just had a conversation with them.

2:44:30.800 --> 2:44:31.800
 They make Roombas.

2:44:31.800 --> 2:44:32.800
 Sure.

2:44:32.800 --> 2:44:38.280
 And I think I love the incredible robots, but like every time they do like advertisement

2:44:38.280 --> 2:44:44.440
 assistant, not advertisement, but like marketing type stuff, it just looks so corporate.

2:44:44.440 --> 2:44:50.320
 And to me, the incredible, maybe wrong in the case of iRobot, I don't know.

2:44:50.320 --> 2:44:55.360
 But to me, when you're talking about engineering systems, it's really nice to show off the

2:44:55.360 --> 2:45:02.040
 magic of the engineering and the software and the, all the, all the geniuses behind

2:45:02.040 --> 2:45:07.080
 this product and the tinkering and like the raw authenticity of what it takes to build

2:45:07.080 --> 2:45:12.440
 that system versus the marketing people who want to have like pretty people, like standing

2:45:12.440 --> 2:45:15.800
 there all pretty with the robots, like moving perfectly.

2:45:15.800 --> 2:45:19.160
 So to me, there's some aspect, it's like speaking to the hackers.

2:45:19.160 --> 2:45:27.560
 You have to throw some bones, some, some care towards the engineers, the developers, because

2:45:27.560 --> 2:45:32.200
 there's some aspect, one for the hiring, but two, there's an authenticity to that kind

2:45:32.200 --> 2:45:36.200
 of communication that's really inspiring to the end user as well.

2:45:36.200 --> 2:45:40.760
 Like if they know that brilliant people, the best in the world are working at your company,

2:45:40.760 --> 2:45:43.920
 they start to believe that that product that you're creating is really good.

2:45:43.920 --> 2:45:46.800
 It's interesting because your initial reaction would be, wait, there's different users here.

2:45:46.800 --> 2:45:47.800
 Why would you do that?

2:45:47.800 --> 2:45:52.320
 You know, my wife bought a Roomba Roomba, but she, and she loves developers, she loves

2:45:52.320 --> 2:45:56.680
 me, but she doesn't care about that culture.

2:45:56.680 --> 2:46:00.480
 So essentially what you said is actually the authenticity, because everyone has a friend

2:46:00.480 --> 2:46:01.480
 or everyone knows people.

2:46:01.480 --> 2:46:02.480
 There's word of mouth.

2:46:02.480 --> 2:46:03.480
 I mean, if you...

2:46:03.480 --> 2:46:04.480
 Word of mouth is so, so popular.

2:46:04.480 --> 2:46:05.480
 Yeah, exactly.

2:46:05.480 --> 2:46:06.480
 That's interesting.

2:46:06.480 --> 2:46:09.920
 Because I think it's the lack of that realization there's this halo effect that influences your

2:46:09.920 --> 2:46:10.920
 general marketing.

2:46:10.920 --> 2:46:11.920
 Interesting.

2:46:11.920 --> 2:46:17.040
 For some stupid reason, I do have a platform and it seems that the reason I have a platform,

2:46:17.040 --> 2:46:22.360
 many others like me, millions of others, is like the authenticity and like we get excited

2:46:22.360 --> 2:46:28.040
 naturally about stuff and like I don't want to get excited about that iRobot video because

2:46:28.040 --> 2:46:33.640
 it's boring, it's marketing, it's corporate, as opposed to I wanted to do some fun.

2:46:33.640 --> 2:46:38.880
 This is me like a shout out to iRobot, is they're not letting me get into the robot.

2:46:38.880 --> 2:46:39.880
 Yeah.

2:46:39.880 --> 2:46:44.920
 Well, there's an aspect of, they could be benefiting from a culture of modularity like

2:46:44.920 --> 2:46:47.880
 add ons and like that could actually dramatically help.

2:46:47.880 --> 2:46:49.240
 You've seen that over history.

2:46:49.240 --> 2:46:52.840
 I mean, Apple is an example of a company like that or the...

2:46:52.840 --> 2:46:58.240
 I can see what your point is, is that you have something that needs to be adopted broadly,

2:46:58.240 --> 2:47:01.720
 the concept needs to be adopted broadly and if you want to go beyond this one device,

2:47:01.720 --> 2:47:04.240
 you need to engage this community.

2:47:04.240 --> 2:47:05.240
 Yeah.

2:47:05.240 --> 2:47:12.160
 And connecting to the open source, as you said, I got to ask you, your programmer, one

2:47:12.160 --> 2:47:18.880
 of the most impactful programmers ever, you've led many programmers, you lead many programmers.

2:47:18.880 --> 2:47:21.680
 What are some from a programmer perspective?

2:47:21.680 --> 2:47:23.520
 What makes a good programmer?

2:47:23.520 --> 2:47:25.080
 What makes a productive programmer?

2:47:25.080 --> 2:47:29.000
 Is there a device you can give to be a great programmer as well?

2:47:29.000 --> 2:47:30.520
 That's a great, great question.

2:47:30.520 --> 2:47:33.560
 And there are times in my life I'd probably answer this even better than I hope maybe

2:47:33.560 --> 2:47:37.440
 give an answer today because I thought about this numerous times, like right now I've spent

2:47:37.440 --> 2:47:44.000
 on so much time recently hiring salespeople that your mind is a little bit on something

2:47:44.000 --> 2:47:45.000
 else.

2:47:45.000 --> 2:47:49.200
 And so I reflected on the past and also I have some really, the only way I can do this,

2:47:49.200 --> 2:47:53.200
 I have some really great programmers that I work with who lead the teams that they lead

2:47:53.200 --> 2:47:58.120
 and my goal is to inspire them and hopefully help them, encourage them and be, help them

2:47:58.120 --> 2:47:59.620
 encourage with their teams.

2:47:59.620 --> 2:48:01.360
 I would say there's a number of things, a couple of things.

2:48:01.360 --> 2:48:04.360
 One is curiosity.

2:48:04.360 --> 2:48:11.160
 I think a programmer without curiosity is mundane, like you'll lose interest, you won't

2:48:11.160 --> 2:48:12.160
 do your best work.

2:48:12.160 --> 2:48:15.800
 So it's sort of, it's an affect, it's sort of, are you, you have some curiosity about

2:48:15.800 --> 2:48:16.800
 things.

2:48:16.800 --> 2:48:21.000
 I think two, don't try to do everything at once, recognize that you're, you know, we're

2:48:21.000 --> 2:48:24.560
 limited as humans, you're limited as a human and each one of us are limited in different

2:48:24.560 --> 2:48:25.560
 ways.

2:48:25.560 --> 2:48:28.640
 You know, we all have our different strengths and skills, so it's adapting the art of programming

2:48:28.640 --> 2:48:29.640
 to your skills.

2:48:29.640 --> 2:48:34.000
 One of the things that always works is to limit what you're trying to solve, right?

2:48:34.000 --> 2:48:38.840
 So if you're part of a team, usually maybe somebody else has put the architecture together

2:48:38.840 --> 2:48:42.680
 and they've gotten given a portion for you if you're, if you're young, if you're not

2:48:42.680 --> 2:48:47.280
 part of a team, it's sort of breaking down the problem into smaller parts is essential

2:48:47.280 --> 2:48:48.760
 for you to make progress.

2:48:48.760 --> 2:48:52.800
 It's very easy to take on a big project and try to do it all at once and you get lost

2:48:52.800 --> 2:48:54.320
 and then you do it badly.

2:48:54.320 --> 2:49:01.000
 So thinking about, you know, very concretely what you're doing, defining the inputs and

2:49:01.000 --> 2:49:06.240
 outputs, defining what you want to get done, even just talking about that and like writing

2:49:06.240 --> 2:49:09.240
 down before you write code, just what are you trying to accomplish?

2:49:09.240 --> 2:49:12.760
 I mean, very specific about it, really, really helps.

2:49:12.760 --> 2:49:20.120
 I think using other people's work, right, don't, don't be afraid that somehow you're,

2:49:20.120 --> 2:49:23.120
 like you should do it all, like nobody does.

2:49:23.120 --> 2:49:26.560
 Stand on the shoulders of giants and copy and paste some stock overplay.

2:49:26.560 --> 2:49:30.240
 Copy and paste some stock overplay, it's like, but, but, but don't just copy and paste, it's

2:49:30.240 --> 2:49:34.240
 particularly relevant in the era of codecs and the, you know, the auto generated code,

2:49:34.240 --> 2:49:36.840
 which is essentially I see as an indexing of stock overflow.

2:49:36.840 --> 2:49:37.840
 Right, exactly.

2:49:37.840 --> 2:49:38.840
 Secondly, it's like.

2:49:38.840 --> 2:49:39.840
 It's a search engine.

2:49:39.840 --> 2:49:42.240
 It's a search engine over stock overflow, basically, so it's not, I mean, it's, we've

2:49:42.240 --> 2:49:43.240
 had this for a while.

2:49:43.240 --> 2:49:44.240
 Yeah.

2:49:44.240 --> 2:49:49.240
 But really, you want to cut and paste, but, but, but not blindly, like, absolutely I've

2:49:49.240 --> 2:49:53.640
 cut and paste to understand, but then you understand, oh, this is what this means.

2:49:53.640 --> 2:49:56.800
 Oh, this is what it's doing and understanding as much as you can.

2:49:56.800 --> 2:49:57.800
 So it's critical.

2:49:57.800 --> 2:49:59.120
 That's where the curiosity comes in.

2:49:59.120 --> 2:50:02.080
 If you're just blindly cutting and basting, you're not going to understand.

2:50:02.080 --> 2:50:09.440
 And so understand and then, you know, be, be sensitive to hype cycles, right?

2:50:09.440 --> 2:50:12.160
 Every, every few, every few often there's always a, oh, test driven development is the

2:50:12.160 --> 2:50:13.160
 answer.

2:50:13.160 --> 2:50:14.160
 Oh, object oriented is the answer.

2:50:14.160 --> 2:50:18.680
 Oh, like there's always an answer, you know, agile is the answer.

2:50:18.680 --> 2:50:20.960
 Be cautious of jumping onto a hype cycle.

2:50:20.960 --> 2:50:24.400
 Like likely there's signal, like there's a thing there that's, that's actually valuable

2:50:24.400 --> 2:50:29.080
 you can learn from, but it's almost certainly not the answer to everything you need.

2:50:29.080 --> 2:50:36.280
 What lessons do you draw from you having created NumPy and SciPy, like in, in service of sort

2:50:36.280 --> 2:50:39.560
 of answering the question of what it takes to be a great programmer and giving advice

2:50:39.560 --> 2:50:40.560
 to people?

2:50:40.560 --> 2:50:41.560
 Yeah.

2:50:41.560 --> 2:50:43.080
 How can you be the next person to create a SciPy?

2:50:43.080 --> 2:50:44.080
 Yeah.

2:50:44.080 --> 2:50:45.080
 So one is listen.

2:50:45.080 --> 2:50:46.080
 Two.

2:50:46.080 --> 2:50:47.080
 Listen.

2:50:47.080 --> 2:50:48.080
 To who?

2:50:48.080 --> 2:50:53.440
 Uh, to, uh, to people that have a problem, right, which is everybody, right, but, but

2:50:53.440 --> 2:50:58.400
 listen and listen to many and, and try to, uh, then do like don't, you're going to have

2:50:58.400 --> 2:51:00.640
 to do an experiment, you know, do fall down.

2:51:00.640 --> 2:51:01.640
 Don't be afraid to fall down.

2:51:01.640 --> 2:51:02.640
 Don't be afraid.

2:51:02.640 --> 2:51:08.080
 You know, the first thing you do is probably going to suck and that's okay, right?

2:51:08.080 --> 2:51:12.960
 It's honestly, I think iteration is the key to innovation and, and it's that, it's almost

2:51:12.960 --> 2:51:19.360
 that psychological, um, hesitation we have to just, uh, iterate like, yeah, we know,

2:51:19.360 --> 2:51:22.040
 we know it's not great, but next someone will be better.

2:51:22.040 --> 2:51:25.680
 I mean, just, just keep learning and keep proving and keep improving.

2:51:25.680 --> 2:51:32.400
 It's, it's, it's an attitude, um, and then it doesn't take intense concentration, right?

2:51:32.400 --> 2:51:37.640
 Good things don't happen just it's not quite like Tik Tok or like Facebook.

2:51:37.640 --> 2:51:40.640
 You know, you can't scroll your way to good programming, right?

2:51:40.640 --> 2:51:46.120
 There are, you know, sincere like hours of, of deep, don't be afraid of the deep problem.

2:51:46.120 --> 2:51:49.640
 Like often people will run away from something because, oh, I can't solve this and you might

2:51:49.640 --> 2:51:55.000
 be right, but give it an hour, give it a couple of hours and see and you know, just, um, five

2:51:55.000 --> 2:51:56.000
 minutes.

2:51:56.000 --> 2:51:57.000
 It's not going to, not going to give you that.

2:51:57.000 --> 2:52:00.360
 Was it lonely when you were building Saipa and Napa?

2:52:00.360 --> 2:52:01.360
 Oh, hugely.

2:52:01.360 --> 2:52:02.360
 Yeah.

2:52:02.360 --> 2:52:06.640
 Absolutely lonely in the sense of you have to have an inner drive and that inner drive

2:52:06.640 --> 2:52:11.480
 for me always comes from, I have to, I have to see that this is right in some angle.

2:52:11.480 --> 2:52:14.800
 I have to believe it, that this is the right approach, the right thing to do.

2:52:14.800 --> 2:52:19.280
 With Saipa, it was like, oh yeah, the world needs libraries in Python.

2:52:19.280 --> 2:52:23.440
 Clearly Python is popular enough with enough influential people that to start and it needs

2:52:23.440 --> 2:52:24.440
 more libraries.

2:52:24.440 --> 2:52:25.440
 Yeah.

2:52:25.440 --> 2:52:26.440
 So that is a good, you know, itself.

2:52:26.440 --> 2:52:28.440
 So I'm going to go do that good.

2:52:28.440 --> 2:52:33.080
 So find a good, find a thing that you know is good and just, just work on it.

2:52:33.080 --> 2:52:37.200
 So that has to happen and it is, and you kind of have to have enough realization of your

2:52:37.200 --> 2:52:41.920
 mission to be okay with the naysayer or the fact that not everybody joins you at front.

2:52:41.920 --> 2:52:44.680
 In fact, the one thing I've talked to people a lot, I've seen a lot of projects come and

2:52:44.680 --> 2:52:45.680
 some fail.

2:52:45.680 --> 2:52:47.560
 Like not everything I've done has actually worked perfectly.

2:52:47.560 --> 2:52:50.720
 I've tried a bunch of stuff that, okay, that didn't really work or this isn't working and

2:52:50.720 --> 2:52:52.160
 why.

2:52:52.160 --> 2:52:59.000
 But you see the patterns and one of the key things is you can't even know for six months.

2:52:59.000 --> 2:53:00.200
 I say 18 months right now.

2:53:00.200 --> 2:53:03.680
 If you're starting a new project, you got to give it a good 18 month run before you even

2:53:03.680 --> 2:53:05.440
 know if the feedback's there.

2:53:05.440 --> 2:53:07.920
 Like it's, you're not going to know in six months.

2:53:07.920 --> 2:53:11.560
 You might have the perfect thing, but six months from now it's still kind of still emerging.

2:53:11.560 --> 2:53:15.840
 So give it time because you're dealing with humans and humans have an inertial energy

2:53:15.840 --> 2:53:18.240
 that just doesn't change that quickly.

2:53:18.240 --> 2:53:21.160
 So let me ask a silly question.

2:53:21.160 --> 2:53:26.360
 But like you said, you're focused on the sales side of things currently.

2:53:26.360 --> 2:53:31.920
 But back when you were actually programming, maybe in the 90s, you talked about IDs.

2:53:31.920 --> 2:53:39.600
 What's your, a setup that you have that brings you joy, keyboard, number of screens, Linux?

2:53:39.600 --> 2:53:42.040
 I do still like to program some, it's not as much as I used to.

2:53:42.040 --> 2:53:45.800
 I have two projects I'm super interested in trying to find funding for them, trying to

2:53:45.800 --> 2:53:49.120
 figure out some good teams for them, but I could talk about those.

2:53:49.120 --> 2:53:51.800
 But yeah, I'm an Emacs guy.

2:53:51.800 --> 2:53:52.800
 Great.

2:53:52.800 --> 2:53:53.800
 Thanks.

2:53:53.800 --> 2:53:59.600
 The superior editor, everybody, I've got, I don't often delete tweets, but one of the

2:53:59.600 --> 2:54:03.000
 tweets I deleted when I said Emacs was better than Vim.

2:54:03.000 --> 2:54:06.880
 And then the hate I got, I was like, I'm walking away from this.

2:54:06.880 --> 2:54:08.120
 I do too.

2:54:08.120 --> 2:54:09.120
 I don't push it.

2:54:09.120 --> 2:54:10.720
 I mean, I'm, I'm just joking.

2:54:10.720 --> 2:54:11.720
 Of course.

2:54:11.720 --> 2:54:12.720
 Yeah, exactly.

2:54:12.720 --> 2:54:13.720
 It's kind of like, but people do take the editor seriously.

2:54:13.720 --> 2:54:14.720
 They take it seriously.

2:54:14.720 --> 2:54:15.720
 I did it as a joke.

2:54:15.720 --> 2:54:16.720
 It's your life.

2:54:16.720 --> 2:54:21.360
 It is, but there's something, there's something beautiful to me about Emacs, but that's for

2:54:21.360 --> 2:54:22.360
 people that love them.

2:54:22.360 --> 2:54:23.360
 There's something beautiful to them about that.

2:54:23.360 --> 2:54:24.360
 There is.

2:54:24.360 --> 2:54:28.080
 I mean, I do use Vim for quick editing, like command line, if I say quick editing, I will

2:54:28.080 --> 2:54:30.360
 still sometimes use it, but not much.

2:54:30.360 --> 2:54:32.800
 Like it's simple corrective, corrective single editor character.

2:54:32.800 --> 2:54:34.960
 So when you were developing SciPy, you were using Emacs?

2:54:34.960 --> 2:54:35.960
 Emacs.

2:54:35.960 --> 2:54:36.960
 Yeah.

2:54:36.960 --> 2:54:43.320
 SciPy NumPy are all written in Emacs on a Linux box and CVS and then SVN, version control.

2:54:43.320 --> 2:54:44.320
 Git came later.

2:54:44.320 --> 2:54:48.040
 Git has, I love distributed branch stuff.

2:54:48.040 --> 2:54:51.960
 I think Git is pretty complicated, but I love the concept.

2:54:51.960 --> 2:54:59.080
 And also, of course, GitHub is, and then GitLab, Git, definitely consumable, but that came

2:54:59.080 --> 2:55:00.080
 later.

2:55:00.080 --> 2:55:01.080
 Did you ever touch the list, but all day?

2:55:01.080 --> 2:55:04.720
 Like, were we, were we emotional feelings about all the parentheses?

2:55:04.720 --> 2:55:05.720
 Great question.

2:55:05.720 --> 2:55:10.280
 So I find myself appreciating lists today much more than I did early because when I came

2:55:10.280 --> 2:55:13.040
 to programming, I knew programming, but I was a domain expert, right?

2:55:13.040 --> 2:55:15.240
 And to me, the parentheses were in the way.

2:55:15.240 --> 2:55:19.360
 It's like, wow, it's just all this, like it just gets in the way of my thinking about

2:55:19.360 --> 2:55:20.360
 what I'm doing.

2:55:20.360 --> 2:55:22.480
 So why would I have all these, right?

2:55:22.480 --> 2:55:24.560
 That was my initial reaction to it.

2:55:24.560 --> 2:55:29.120
 You know, now as I appreciate kind of the structure that kind of naturally maps to the,

2:55:29.120 --> 2:55:33.000
 to a logical thinking about a program, I can appreciate them, right?

2:55:33.000 --> 2:55:38.080
 And why it's actually, you could, you could create editors that make it not so problematic,

2:55:38.080 --> 2:55:39.080
 right?

2:55:39.080 --> 2:55:40.080
 Honestly.

2:55:40.080 --> 2:55:41.080
 Yeah.

2:55:41.080 --> 2:55:44.120
 So I actually have a much more appreciation of Lisp and things like closure, and there's

2:55:44.120 --> 2:55:48.520
 high V, which is a Python, you know, a list that compiles the Python byte code.

2:55:48.520 --> 2:55:50.360
 I think it's challenging.

2:55:50.360 --> 2:55:54.800
 Like typically these languages are, you know, I even saw a whole data science programming

2:55:54.800 --> 2:55:59.480
 system in Lisp that somebody created, which is, you know, cool, but again, it's the, I

2:55:59.480 --> 2:56:02.800
 think it's the lack of recognition of the fact that there exists what I call occasional

2:56:02.800 --> 2:56:03.800
 programmers.

2:56:03.800 --> 2:56:04.800
 Yes.

2:56:04.800 --> 2:56:05.800
 People that are never going to be programmers for living.

2:56:05.800 --> 2:56:08.440
 They don't want to have all this, the cuteness in their head.

2:56:08.440 --> 2:56:09.440
 They want just.

2:56:09.440 --> 2:56:14.880
 You know, it's why basic, you know, Microsoft had the right idea with basic in terms of

2:56:14.880 --> 2:56:21.280
 having that be the language of visual basic, the language of Excel and SQL, SQL server.

2:56:21.280 --> 2:56:24.760
 They should have converted that to Python 10 years ago, but world would be a better

2:56:24.760 --> 2:56:27.280
 place if they had, but.

2:56:27.280 --> 2:56:31.640
 There's also, there's a beauty and a magic to the history behind a language in Lisp,

2:56:31.640 --> 2:56:36.360
 you know, some of the most interesting people in the history of computer science and artificial

2:56:36.360 --> 2:56:38.000
 intelligence have used the Lisp.

2:56:38.000 --> 2:56:39.000
 So.

2:56:39.000 --> 2:56:40.000
 Yeah.

2:56:40.000 --> 2:56:41.000
 You feel.

2:56:41.000 --> 2:56:42.000
 Well, it's about that language.

2:56:42.000 --> 2:56:43.000
 When you, when you have a language, you can think in it.

2:56:43.000 --> 2:56:44.000
 Yeah.

2:56:44.000 --> 2:56:45.000
 And it helps you think about it.

2:56:45.000 --> 2:56:47.000
 And it attracts a certain kinds of people that think in a certain kind of way.

2:56:47.000 --> 2:56:48.520
 And then that's, that's there.

2:56:48.520 --> 2:56:49.520
 Okay.

2:56:49.520 --> 2:56:55.080
 So what about like small laptop with a tiny keyboard or is there like three screens?

2:56:55.080 --> 2:56:56.080
 You know, good question.

2:56:56.080 --> 2:56:58.120
 I've never gotten into the big, the many screens, to be honest.

2:56:58.120 --> 2:57:03.640
 I mean, and maybe it's because in my head, I kind of just, I just swap between windows.

2:57:03.640 --> 2:57:09.280
 Like, partly because I guess I really can't process three screens at once anyway.

2:57:09.280 --> 2:57:14.560
 Like, I just, I'm looking at one and I just flip, you know, I flip an application open.

2:57:14.560 --> 2:57:19.160
 So where it's really helpful is actually when I'm trying to, you know, here's data and I

2:57:19.160 --> 2:57:20.160
 want to input it from here.

2:57:20.160 --> 2:57:21.160
 Right.

2:57:21.160 --> 2:57:22.160
 This is the only time I really need another screen.

2:57:22.160 --> 2:57:27.760
 So now, because you're both developer, lead developers, but then there's also these businesses

2:57:27.760 --> 2:57:31.160
 and their sales people in your working large companies.

2:57:31.160 --> 2:57:32.160
 Operations people, hiring people.

2:57:32.160 --> 2:57:33.600
 Yeah, the whole thing.

2:57:33.600 --> 2:57:37.280
 Which operating system is your favorite at this, at this point?

2:57:37.280 --> 2:57:38.600
 So Linux was the early days.

2:57:38.600 --> 2:57:39.600
 Linux.

2:57:39.600 --> 2:57:42.960
 So yeah, I love, love Linux as a, as a server side and it was early days I had my own Linux

2:57:42.960 --> 2:57:43.960
 desktop.

2:57:43.960 --> 2:57:47.800
 Um, I've been on Mac laptops for 10 years now.

2:57:47.800 --> 2:57:48.800
 Yeah.

2:57:48.800 --> 2:57:52.280
 This is what leadership looks like is you switch to Mac.

2:57:52.280 --> 2:57:53.280
 Okay.

2:57:53.280 --> 2:57:54.280
 Great.

2:57:54.280 --> 2:57:55.280
 Yeah.

2:57:55.280 --> 2:57:56.280
 Pretty much.

2:57:56.280 --> 2:58:00.000
 I mean, just the fact that I had to do PowerPoints, I had to do presentations and, you know, plug

2:58:00.000 --> 2:58:02.280
 in, I just couldn't mess with plugging in laptops.

2:58:02.280 --> 2:58:04.520
 It wouldn't project and yeah.

2:58:04.520 --> 2:58:09.320
 So you mentioned also Quonset Labs and things like that.

2:58:09.320 --> 2:58:14.640
 Can you give advice on how to hire great programmers and great people?

2:58:14.640 --> 2:58:15.640
 Yeah.

2:58:15.640 --> 2:58:21.120
 I would say produce an open source project, get people contributing to it and hire those

2:58:21.120 --> 2:58:22.120
 people.

2:58:22.120 --> 2:58:23.120
 Yeah.

2:58:23.120 --> 2:58:27.520
 I mean, you're doing it sort of, uh, you might, maybe perhaps a little biased, but that's

2:58:27.520 --> 2:58:30.240
 probably a hundred percent really good advice.

2:58:30.240 --> 2:58:31.760
 I find it hard to hire.

2:58:31.760 --> 2:58:32.960
 I still find it hard to hire.

2:58:32.960 --> 2:58:37.360
 Like in terms of, I don't think that it's not hard to hire if I've worked with somebody

2:58:37.360 --> 2:58:43.680
 for a couple of weeks, but a cup, an hour or two of interviews, I have no idea.

2:58:43.680 --> 2:58:49.680
 So that instinct, that radar of knowing if you're good or not, that you've, you've found

2:58:49.680 --> 2:58:50.840
 that you're still not able to really.

2:58:50.840 --> 2:58:51.840
 It's really hard.

2:58:51.840 --> 2:58:56.040
 I mean, the resume can help, but again, the resume is like a presentation of the things

2:58:56.040 --> 2:59:02.360
 they want you to see, not the reality of, of, and there's also, um, you know, you have

2:59:02.360 --> 2:59:04.280
 to understand what you're hiring for.

2:59:04.280 --> 2:59:06.880
 There are different stages and different kinds of skills.

2:59:06.880 --> 2:59:12.520
 And so it isn't just a, um, one of the things I talk a lot about internally at my company

2:59:12.520 --> 2:59:18.880
 is that the whole idea of, of measuring ourselves against a single axis is flawed because we're

2:59:18.880 --> 2:59:22.200
 not, it's a multi dimensional space and how do you order a multi dimensional space?

2:59:22.200 --> 2:59:23.560
 There isn't one ordering.

2:59:23.560 --> 2:59:27.480
 So this whole idea, you, you immediately have projected into a thing when you're talking

2:59:27.480 --> 2:59:30.760
 about hiring or best or worst or better or not better.

2:59:30.760 --> 2:59:33.840
 So what is the thing you're actually needing?

2:59:33.840 --> 2:59:36.080
 And you can hire for that.

2:59:36.080 --> 2:59:37.080
 There is such a thing.

2:59:37.080 --> 2:59:42.640
 Generally, I really value people who have the affect, uh, the care about open source.

2:59:42.640 --> 2:59:47.120
 Like, so in some cases, they're, they're affinity to open source is simply a kind of a filter

2:59:47.120 --> 2:59:48.120
 of an affect.

2:59:48.120 --> 2:59:54.880
 Um, however, I have found this interesting dichotomy between open source contributors

2:59:54.880 --> 2:59:57.280
 and product creation.

2:59:57.280 --> 3:00:04.240
 There's, I don't know if it's fully true, but there does seem to be the more, uh, the

3:00:04.240 --> 3:00:08.560
 more experienced, the more affect somebody has to an open source community, the less

3:00:08.560 --> 3:00:13.600
 ability to actually produce product that they have and the opposite is kind of true too.

3:00:13.600 --> 3:00:16.680
 The more product focused are, I find a lot of people have talked to a lot of people who

3:00:16.680 --> 3:00:20.640
 produce really great products and they, they have a, they're looking over the open source

3:00:20.640 --> 3:00:24.800
 communities, kind of wanting to participate and play, but they've played here and they

3:00:24.800 --> 3:00:26.080
 do a great job here.

3:00:26.080 --> 3:00:30.280
 And then they don't necessarily have some of the same, I don't think that, I don't think

3:00:30.280 --> 3:00:32.040
 that's entirely necessary.

3:00:32.040 --> 3:00:35.360
 I think part of it is cultural, how that's, how they've emerged, cause one of the things

3:00:35.360 --> 3:00:39.720
 that open source communities often lack is great product management, like some product

3:00:39.720 --> 3:00:40.720
 management energy.

3:00:40.720 --> 3:00:41.720
 That's brilliant.

3:00:41.720 --> 3:00:44.840
 But you want both of those energies in the same place together.

3:00:44.840 --> 3:00:45.840
 Yes.

3:00:45.840 --> 3:00:49.880
 And so it's a lot of it's creating these teams of people that have these needed skills and

3:00:49.880 --> 3:00:51.960
 attributes that are hard.

3:00:51.960 --> 3:00:56.400
 And so, so one of the big things I look for is somebody that fundamentally recognize their

3:00:56.400 --> 3:01:00.960
 need to learn, like one of the values that we, we have in all of the things we do is

3:01:00.960 --> 3:01:01.960
 learning.

3:01:01.960 --> 3:01:06.280
 Like if somebody thinks they know it all, they're going to struggle.

3:01:06.280 --> 3:01:12.280
 And some of that is just, there's more basic things like humility, just being humble in

3:01:12.280 --> 3:01:14.440
 the face of all the things you don't know.

3:01:14.440 --> 3:01:15.800
 And that's like step one of learning.

3:01:15.800 --> 3:01:17.320
 That's step one of learning, right?

3:01:17.320 --> 3:01:20.960
 And you know, I've spent a lot of time learning, right?

3:01:20.960 --> 3:01:22.880
 Other people spend a lot more time, but I've spent a lot of time learning.

3:01:22.880 --> 3:01:27.200
 I went, you know, my whole goal was to get a PhD because I love school and I wanted to

3:01:27.200 --> 3:01:28.400
 be a scientist.

3:01:28.400 --> 3:01:32.640
 And then what I found is what's been written about elsewhere as well as the more I learned,

3:01:32.640 --> 3:01:38.160
 the more I didn't know, the more I realized, man, I know about this, but this is such a

3:01:38.160 --> 3:01:41.320
 tiny thing in the global scope of what I might want to know about.

3:01:41.320 --> 3:01:47.960
 So I need to be listening a whole lot better than I am just talking.

3:01:47.960 --> 3:01:48.960
 That's changed a little bit.

3:01:48.960 --> 3:01:50.680
 Actually, my wife says that I used to be a better listener.

3:01:50.680 --> 3:01:53.720
 Now that I'm so full of all these ideas I want to do, she kind of says, you've got to

3:01:53.720 --> 3:01:55.600
 give people time to talk.

3:01:55.600 --> 3:01:58.440
 So you've succeeded on multiple dimensions.

3:01:58.440 --> 3:02:01.720
 So one is the tenure track faculty.

3:02:01.720 --> 3:02:05.200
 The other is just creating all these products and building up the businesses, then working

3:02:05.200 --> 3:02:06.200
 with businesses.

3:02:06.200 --> 3:02:12.560
 Do you have advice for young people today in high school, in college, of how to live

3:02:12.560 --> 3:02:20.560
 a life as nonlinear and as successful as yours, a life that could be, they could be proud

3:02:20.560 --> 3:02:21.560
 of?

3:02:21.560 --> 3:02:23.080
 Well, that's a super compliment.

3:02:23.080 --> 3:02:24.560
 I'm humbled by that actually.

3:02:24.560 --> 3:02:29.360
 I would say a life they can be proud of, honestly, one thing that I've said to people

3:02:29.360 --> 3:02:34.360
 is first, find people you love and care about them.

3:02:34.360 --> 3:02:39.720
 Like family matters to me a lot, and family means people you love and have committed to.

3:02:39.720 --> 3:02:45.240
 So it can be whatever you mean by that, but you need to have a foundation.

3:02:45.240 --> 3:02:50.200
 So find people you love and want to commit to and do that, because it anchors you in

3:02:50.200 --> 3:02:52.320
 a way that nothing else can.

3:02:52.320 --> 3:02:57.800
 And then you find other things, and then from out there, you find other kinds of things

3:02:57.800 --> 3:03:04.320
 you can commit to, whether it's ideas or people or groups of people.

3:03:04.320 --> 3:03:10.480
 So especially in high school, I would say, don't settle on what you think you know.

3:03:10.480 --> 3:03:13.800
 Give yourself 10 years to think about the world.

3:03:13.800 --> 3:03:18.240
 I see a lot of high school students who seem to know everything already, and I think I

3:03:18.240 --> 3:03:19.240
 did too.

3:03:19.240 --> 3:03:23.920
 I think it's maybe natural, but recognize that the things you care about, you might change

3:03:23.920 --> 3:03:26.520
 your perspective over time.

3:03:26.520 --> 3:03:30.520
 I certainly have over time, because I was really passionate about one specific thing

3:03:30.520 --> 3:03:37.480
 that kind of softened, I was a big, didn't like the Federal Reserve, and there's still,

3:03:37.480 --> 3:03:42.600
 we could have a longer conversation about monetary policy and finances, but I'm a little

3:03:42.600 --> 3:03:48.200
 more nuanced in my perspective at this point.

3:03:48.200 --> 3:03:52.880
 But that's one area where you learn about something, go, I want to attack it.

3:03:52.880 --> 3:03:55.480
 Build, don't destroy.

3:03:55.480 --> 3:04:00.200
 Build, so often the tendency is to not like something, they want to go attack it.

3:04:00.200 --> 3:04:01.200
 Build something.

3:04:01.200 --> 3:04:02.760
 Build something to replace it.

3:04:02.760 --> 3:04:03.760
 Build up.

3:04:03.760 --> 3:04:05.720
 Attract people to your new thing.

3:04:05.720 --> 3:04:08.840
 You'll be far better.

3:04:08.840 --> 3:04:12.640
 You don't need to destroy something to build something else.

3:04:12.640 --> 3:04:14.920
 So that's, I guess, generally.

3:04:14.920 --> 3:04:23.200
 And then definitely like curiosity, follow your curiosity and let it, don't just follow

3:04:23.200 --> 3:04:24.200
 the money.

3:04:24.200 --> 3:04:31.360
 And all of that, like you said, is grounded in family, friendship, and ultimately love.

3:04:31.360 --> 3:04:37.640
 Which is a great way to end it, Travis, you're one of the most impactful people in the engineer

3:04:37.640 --> 3:04:40.080
 and the computer science in the human world.

3:04:40.080 --> 3:04:45.760
 So I truly appreciate everything you've done, and I really appreciate that you would spend

3:04:45.760 --> 3:04:46.960
 your valuable time with me.

3:04:46.960 --> 3:04:47.960
 It was an honor.

3:04:47.960 --> 3:04:48.960
 It was a real pleasure for me.

3:04:48.960 --> 3:04:49.960
 I appreciate that.

3:04:49.960 --> 3:04:54.040
 Thanks for listening to this conversation with Travis Oliphant.

3:04:54.040 --> 3:04:58.000
 To support this podcast, please check out our sponsors in the description.

3:04:58.000 --> 3:05:03.480
 And now, let me leave you with something that in the programming world is called Hodgson's

3:05:03.480 --> 3:05:05.240
 Law.

3:05:05.240 --> 3:05:12.640
 Every sufficiently advanced LISP application will eventually be reimplemented in Python.

3:05:12.640 --> 3:05:23.080
 Thank you for listening, and hope to see you next time.

